{
  "address": "0xF32D39ff9f6Aa7a7A64d7a4F00a54826Ef791a55",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINT_PUBLIC_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candyShopAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainRunnersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dreamers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "candy",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDreamersMintPublicSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "ownerTokenIndexes",
          "type": "bytes"
        }
      ],
      "name": "mintBatchPublicSale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "ownerTokenIndexes",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "candyIdsBytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "candyIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "candyAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatchRunnersAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candyShopContractAddress",
          "type": "address"
        }
      ],
      "name": "setCandyShopAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_chainRunnersContractAddress",
          "type": "address"
        }
      ],
      "name": "setChainRunnersContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDreamersMintPublicSale",
          "type": "uint256"
        }
      ],
      "name": "setMaxDreamersMintPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_renderingContractAddress",
          "type": "address"
        }
      ],
      "name": "setRenderingContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdbdd70ef4ec2659f975d526855e446a1360e286e11508f5d5cc2f89bab007c2b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xF32D39ff9f6Aa7a7A64d7a4F00a54826Ef791a55",
    "transactionIndex": 0,
    "gasUsed": "3826292",
    "logsBloom": "0x
    "blockHash": "0x5d4e241bb8f2e1184a93877be50b1883288c4b8517953014c409fca7df1e47af",
    "transactionHash": "0xdbdd70ef4ec2659f975d526855e446a1360e286e11508f5d5cc2f89bab007c2b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14088829,
        "transactionHash": "0xdbdd70ef4ec2659f975d526855e446a1360e286e11508f5d5cc2f89bab007c2b",
        "address": "0xF32D39ff9f6Aa7a7A64d7a4F00a54826Ef791a55",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5d4e241bb8f2e1184a93877be50b1883288c4b8517953014c409fca7df1e47af"
      }
    ],
    "blockNumber": 14088829,
    "cumulativeGasUsed": "3826292",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Chain Dreamers",
    "DRE"
  ],
  "numDeployments": 1,
  "solcInputHash": "0464b55ace3cba2f67d8122017481bf4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_PUBLIC_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candyShopAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainRunnersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dreamers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"candy\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDreamersMintPublicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ownerTokenIndexes\",\"type\":\"bytes\"}],\"name\":\"mintBatchPublicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ownerTokenIndexes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"candyIdsBytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"candyIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"candyAmounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatchRunnersAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candyShopContractAddress\",\"type\":\"address\"}],\"name\":\"setCandyShopAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainRunnersContractAddress\",\"type\":\"address\"}],\"name\":\"setChainRunnersContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDreamersMintPublicSale\",\"type\":\"uint256\"}],\"name\":\"setMaxDreamersMintPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_renderingContractAddress\",\"type\":\"address\"}],\"name\":\"setRenderingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dreamers/ChainDreamers.sol\":\"ChainDreamers\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dreamers/ChainDreamers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../tokens/ERC721Enumerable.sol\\\";\\nimport \\\"../interfaces/IDreamersRenderer.sol\\\";\\nimport \\\"../interfaces/ICandyShop.sol\\\";\\nimport \\\"../interfaces/IChainRunners.sol\\\";\\n\\ncontract ChainDreamers is ERC721Enumerable, Ownable, ReentrancyGuard {\\n    // Linked contracts\\n    address public renderingContractAddress;\\n    address public candyShopAddress;\\n    address public chainRunnersAddress;\\n    IDreamersRenderer renderer;\\n    ICandyShop candyShop;\\n    IChainRunners chainRunners;\\n\\n    // Constants\\n    uint256 public maxDreamersMintPublicSale;\\n    uint256 public constant MINT_PUBLIC_PRICE = 0.05 ether;\\n\\n    // State variables\\n    uint256 public publicSaleStartTimestamp;\\n\\n    function setPublicSaleTimestamp(uint256 timestamp) external onlyOwner {\\n        publicSaleStartTimestamp = timestamp;\\n    }\\n\\n    function isPublicSaleOpen() public view returns (bool) {\\n        return\\n            block.timestamp >= publicSaleStartTimestamp &&\\n            publicSaleStartTimestamp != 0;\\n    }\\n\\n    modifier whenPublicSaleActive() {\\n        require(isPublicSaleOpen(), \\\"Public sale not open\\\");\\n        _;\\n    }\\n\\n    function setRenderingContractAddress(address _renderingContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        renderingContractAddress = _renderingContractAddress;\\n        renderer = IDreamersRenderer(renderingContractAddress);\\n    }\\n\\n    function setCandyShopAddress(address _candyShopContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        candyShopAddress = _candyShopContractAddress;\\n        candyShop = ICandyShop(candyShopAddress);\\n    }\\n\\n    function setMaxDreamersMintPublicSale(uint256 _maxDreamersMintPublicSale)\\n        public\\n        onlyOwner\\n    {\\n        maxDreamersMintPublicSale = _maxDreamersMintPublicSale;\\n    }\\n\\n    function setChainRunnersContractAddress(\\n        address _chainRunnersContractAddress\\n    ) public onlyOwner {\\n        chainRunnersAddress = _chainRunnersContractAddress;\\n        chainRunners = IChainRunners(_chainRunnersContractAddress);\\n    }\\n\\n    constructor(string memory name_, string memory symbol_)\\n        ERC721(name_, symbol_)\\n    {}\\n\\n    /*\\n    @param tokenId a bytes interpreted as an array of uint16\\n    @param ownerTokenIndexes a bytes interpreted as an array of uint16. Given here to avoid indexes computation and save gas\\n    @param candyIdsBytes a bytes interpreted as an array of uint8\\n    @param candyIds the same indexes as above but as a uint8 array\\n    @param candyIdsCount should be an array of 1\\n    */\\n    function mintBatchRunnersAccess(\\n        bytes calldata tokenIds,\\n        bytes calldata ownerTokenIndexes,\\n        bytes calldata candyIdsBytes,\\n        uint256[] calldata candyIds,\\n        uint256[] calldata candyAmounts\\n    ) public nonReentrant returns (bool) {\\n        require(\\n            candyIdsBytes.length == candyIds.length,\\n            \\\"Candy ids should have the same length\\\"\\n        );\\n        require(\\n            tokenIds.length == candyIdsBytes.length * 2,\\n            \\\"Each runner needs its own candy\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tokenIds.length; i += 2) {\\n            require(\\n                chainRunners.ownerOf(BytesLib.toUint16(tokenIds, i)) ==\\n                    _msgSender(),\\n                \\\"You cannot give candies to a runner that you do not own\\\"\\n            );\\n            require(\\n                uint8(candyIds[i / 2]) == uint8(candyIdsBytes[i / 2]),\\n                \\\"Candy ids should be the same\\\"\\n            );\\n            require(\\n                candyAmounts[i / 2] == 1,\\n                \\\"Your runner needs one and only one candy, who knows what could happen otherwise\\\"\\n            );\\n        }\\n        _safeMintBatchWithCandies(\\n            _msgSender(),\\n            tokenIds,\\n            ownerTokenIndexes,\\n            candyIdsBytes\\n        );\\n        candyShop.burnBatch(_msgSender(), candyIds, candyAmounts);\\n        return true;\\n    }\\n\\n    function mintBatchPublicSale(\\n        bytes calldata tokenIds,\\n        bytes calldata ownerTokenIndexes\\n    ) public payable nonReentrant whenPublicSaleActive returns (bool) {\\n        require(\\n            (tokenIds.length / 2) * MINT_PUBLIC_PRICE == msg.value,\\n            \\\"You have to pay the bail bond\\\"\\n        );\\n        require(\\n            ERC721.balanceOf(_msgSender()) + tokenIds.length / 2 <=\\n                maxDreamersMintPublicSale,\\n            \\\"Your home is to small to welcome so many dreamers\\\"\\n        );\\n        _safeMintBatch(_msgSender(), tokenIds, ownerTokenIndexes);\\n        return true;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(uint16(_tokenId)),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        if (renderingContractAddress == address(0)) {\\n            return \\\"\\\";\\n        }\\n\\n        return renderer.tokenURI(_tokenId, dreamers[uint16(_tokenId)]);\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = _msgSender().call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe0ae19676eb5a38779bee912b596701fc6b504bbf2bc3a60e5c501b85cea0699\",\"license\":\"MIT\"},\"contracts/dreamers/ChainDreamersTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ChainDreamersTypes {\\n    struct ChainDreamer {\\n        uint8 candy;\\n    }\\n}\\n\",\"keccak256\":\"0x62a3c9cc0fb474480b2656fbe1d5a60e68159dbb6abd8b4a74ef1f4564079299\",\"license\":\"MIT\"},\"contracts/interfaces/ICandyShop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICandyShop {\\n    function burnBatch(\\n        address from,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3c1ae8ecaa75a002fcbdba21316470e51699d42e3f5cb7184e8a7b4f2da0bbb7\",\"license\":\"MIT\"},\"contracts/interfaces/IChainRunners.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IChainRunners {\\n    function getDna(uint256 _tokenId) external view returns (uint256);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x32b3945520274c2188f4432dcf78bdf498ec63b5b16d55b2f5b73d3df2443445\",\"license\":\"MIT\"},\"contracts/interfaces/IDreamersRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../dreamers/ChainDreamersTypes.sol\\\";\\n\\ninterface IDreamersRenderer {\\n    function tokenURI(\\n        uint256 tokenId,\\n        ChainDreamersTypes.ChainDreamer memory dreamer\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x3a45c1cf54e267b7746560ef8694b1f816ef36993ecd913c4f8d384532296fed\",\"license\":\"MIT\"},\"contracts/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\n// This file is copied from OpenZeppelin with the addition of a _safeMintBatch function tailored for the Dreamers\\n// mechanism.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport \\\"../dreamers/ChainDreamersTypes.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint16;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint16 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint16) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint16 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Mapping from tokenId to Dreamer\\n    mapping(uint256 => ChainDreamersTypes.ChainDreamer) public dreamers;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return uint256(_balances[owner]);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address owner = _owners[uint16(tokenId)];\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: owner query for nonexistent token\\\"\\n        );\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, uint16(tokenId));\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(uint16(tokenId)),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[uint16(tokenId)];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), uint16(tokenId)),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, uint16(tokenId));\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, uint16(tokenId), \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), uint16(tokenId)),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, uint16(tokenId), _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint16 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint16 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint16 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint16 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint16 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    function _safeMintBatchWithCandies(\\n        address to,\\n        bytes calldata tokenIds,\\n        bytes calldata ownerTokenIndexes,\\n        bytes calldata candyIds\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(\\n            tokenIds.length < 512,\\n            \\\"You can mint by batches up to 256 tokens at a time\\\"\\n        );\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                candyIds,\\n                tokenIds,\\n                msg.sender,\\n                msg.value,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n\\n        _beforeBatchMint(to, tokenIds, ownerTokenIndexes);\\n\\n        for (uint256 i = 0; i < tokenIds.length / 2; i++) {\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i * 2);\\n            require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n            _owners[tokenId] = to;\\n            dreamers[tokenId] = ChainDreamersTypes.ChainDreamer(\\n                ((uint8(candies[0]) >> 2) << 2) + (uint8(candyIds[i]) % 4)\\n            );\\n            candies >>= 1;\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n        _balances[to] += uint16(tokenIds.length) / 2;\\n\\n        require(\\n            _checkOnERC721Received(\\n                address(0),\\n                to,\\n                BytesLib.toUint16(tokenIds, 0),\\n                \\\"\\\"\\n            ),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    function _safeMintBatch(\\n        address to,\\n        bytes calldata tokenIds,\\n        bytes calldata ownerTokenIndexes\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(\\n            tokenIds.length < 256,\\n            \\\"You can mint by batches up to 256 tokens at a time\\\"\\n        );\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                tokenIds,\\n                ownerTokenIndexes,\\n                msg.sender,\\n                msg.value,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n\\n        _beforeBatchMint(to, tokenIds, ownerTokenIndexes);\\n\\n        for (uint256 i = 0; i < tokenIds.length / 2; i++) {\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i * 2);\\n            require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n            _owners[tokenId] = to;\\n            dreamers[tokenId] = ChainDreamersTypes.ChainDreamer(\\n                uint8(candies[0])\\n            );\\n            candies >>= 1;\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n        _balances[to] += uint16(tokenIds.length);\\n\\n        require(\\n            _checkOnERC721Received(\\n                address(0),\\n                to,\\n                BytesLib.toUint16(tokenIds, 0),\\n                \\\"\\\"\\n            ),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint16 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint16 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint16 tokenId\\n    ) internal virtual {\\n        require(\\n            ERC721.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint16 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint16 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint16 tokenId\\n    ) internal virtual {}\\n\\n    function _beforeBatchMint(\\n        address to,\\n        bytes calldata tokenIds,\\n        bytes calldata ownerTokenIndexes\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x88cdb5b84eb7f29fb0eed649642f2ba6e05ed4f783d9280f8d58a84e0a2e3218\",\"license\":\"MIT\"},\"contracts/tokens/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\n/**\\n * @dev This implementation leverages the fact that there is 10k runners and so at most 10k dreamers as well.\\n *      We then used bytes to stores tokens and indexes and uses uint16 (bytes2) everywhere.\\n *      Using bytes.concat to batch mint will save heaps of gas.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => bytes) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    bytes private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration, two bytes per tokenId (uint16)\\n    bytes private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint16 => uint16) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC721)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            index < ERC721.balanceOf(owner),\\n            \\\"ERC721Enumerable: owner index out of bounds\\\"\\n        );\\n        return BytesLib.toUint16(_ownedTokens[owner], index * 2);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length / 2;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            index < ERC721Enumerable.totalSupply(),\\n            \\\"ERC721Enumerable: global index out of bounds\\\"\\n        );\\n        return BytesLib.toUint16(_allTokens, index * 2);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint16 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            // Token is minted, add it to the global list\\n            uint16 tokenIndex = uint16(_allTokens.length);\\n            _allTokensIndex[tokenId] = tokenIndex;\\n            _allTokens = bytes.concat(_allTokens, bytes2(tokenId));\\n\\n            // Add it to the minter list as well\\n            bytes2 length = bytes2(uint16(_ownedTokens[to].length));\\n            _ownedTokensIndex = bytes.concat(_ownedTokensIndex, length);\\n            _ownedTokens[to] = bytes.concat(_ownedTokens[to], bytes2(tokenId));\\n        } else if (to == address(0)) {\\n            // Token is burnt, remove it from the global list\\n            uint16 tokenIndex = _allTokensIndex[tokenId];\\n\\n            _allTokens = bytes.concat(\\n                BytesLib.slice(_allTokens, 0, tokenIndex),\\n                BytesLib.slice(\\n                    _allTokens,\\n                    tokenIndex + 2,\\n                    _allTokens.length - tokenIndex - 2\\n                )\\n            );\\n\\n            uint16 tokenIndexForOwner = BytesLib.toUint16(\\n                _ownedTokensIndex,\\n                tokenIndex\\n            );\\n\\n            _ownedTokens[from] = bytes.concat(\\n                BytesLib.slice(_ownedTokens[from], 0, tokenIndexForOwner),\\n                BytesLib.slice(\\n                    _ownedTokens[from],\\n                    tokenIndexForOwner + 2,\\n                    _ownedTokens[from].length - tokenIndexForOwner - 2\\n                )\\n            );\\n        } else if (from != to) {\\n            // Get indexes in global bytes and in owner's bytes\\n            uint16 tokenIndex = _allTokensIndex[tokenId];\\n            uint16 tokenIndexForOwner = BytesLib.toUint16(\\n                _ownedTokensIndex,\\n                tokenIndex\\n            );\\n\\n            // Remove from \\\"from\\\" bytes and add to \\\"to\\\" one's\\n            _ownedTokens[from] = bytes.concat(\\n                BytesLib.slice(_ownedTokens[from], 0, tokenIndexForOwner),\\n                BytesLib.slice(\\n                    _ownedTokens[from],\\n                    tokenIndexForOwner + 2,\\n                    _ownedTokens[from].length - tokenIndexForOwner - 2\\n                )\\n            );\\n            bytes2 length = bytes2(uint16(_ownedTokens[to].length));\\n            _ownedTokens[to] = bytes.concat(_ownedTokens[to], bytes2(tokenId));\\n\\n            // Update owner's index\\n            _ownedTokensIndex[tokenIndex] = length[0];\\n            _ownedTokensIndex[tokenIndex + 1] = length[1];\\n        }\\n    }\\n\\n    function _beforeBatchMint(\\n        address to,\\n        bytes calldata tokenIds,\\n        bytes calldata ownerTokenIndexes\\n    ) internal virtual override {\\n        uint16 firstIndex = BytesLib.toUint16(ownerTokenIndexes, 0);\\n        require(\\n            tokenIds.length == ownerTokenIndexes.length,\\n            \\\"ownerIndexes must have the same length as tokenIds\\\"\\n        );\\n        require(\\n            _ownedTokens[to].length == firstIndex * 2,\\n            \\\"The given ownerTokenIndexes do not start from the current owner count\\\"\\n        );\\n\\n        // Add them to the minter list\\n        _ownedTokensIndex = bytes.concat(_ownedTokensIndex, ownerTokenIndexes);\\n        _ownedTokens[to] = bytes.concat(_ownedTokens[to], tokenIds);\\n\\n        // Add tokens to the global list\\n        uint16 tokenIndex = uint16(_allTokens.length);\\n        for (uint16 i = 0; i < tokenIds.length; i += 2) {\\n            require(\\n                BytesLib.toUint16(ownerTokenIndexes, i) == firstIndex + i / 2,\\n                \\\"ownerTokenIndexes must be a sequence\\\"\\n            );\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i);\\n            _allTokensIndex[tokenId] = tokenIndex + i;\\n        }\\n        _allTokens = bytes.concat(_allTokens, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xe497dd018c6228445f1812523e6028b7d6a40819c73346317aeefbe9057b5b06\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004607380380620046078339810160408190526200003491620001f9565b8151829082906200004d906000906020850190620000e3565b50805162000063906001906020840190620000e3565b505050620000806200007a6200008d60201b60201c565b62000091565b50506001600c5562000373565b3390565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000f190620002e7565b90600052602060002090601f01602090048101928262000115576000855562000160565b82601f106200013057805160ff191683800117855562000160565b8280016001018555821562000160579182015b828111156200016057825182559160200191906001019062000143565b506200016e92915062000172565b5090565b5b808211156200016e576000815560010162000173565b6000620001a06200019a8462000287565b62000268565b905082815260208101848484011115620001b957600080fd5b620001c6848285620002b4565b509392505050565b600082601f830112620001df578081fd5b8151620001f184826020860162000189565b949350505050565b600080604083850312156200020c578182fd5b828201516001600160401b0381111562000224578283fd5b6200023285828601620001ce565b602085015190935090506001600160401b0381111562000250578182fd5b6200025e85828601620001ce565b9150509250929050565b60006200027460405190565b905062000282828262000318565b919050565b60006001600160401b03821115620002a357620002a36200035d565b601f19601f83011660200192915050565b60005b83811015620002d1578181015183820152602001620002b7565b83811115620002e1576000848401525b50505050565b600281046001821680620002fc57607f821691505b6020821081141562000312576200031262000347565b50919050565b601f19601f83011681016001600160401b03811182821017156200034057620003406200035d565b6040525050565b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61428480620003836000396000f3fe6080604052600436106102385760003560e01c80636b318e6e11610138578063b5fcb339116100b0578063d3d6005b1161007f578063e985e9c511610064578063e985e9c514610636578063f2fde38b1461067f578063fac913231461069f57600080fd5b8063d3d6005b14610600578063d7822c991461062057600080fd5b8063b5fcb33914610580578063b88d4fde146105a0578063c074f412146105c0578063c87b56dd146105e057600080fd5b80638da5cb5b1161010757806395d89b41116100ec57806395d89b41146105305780639c51792a14610545578063a22cb4651461056057600080fd5b80638da5cb5b146104f257806395a97a631461051057600080fd5b80636b318e6e1461048757806370a082311461049d578063715018a6146104bd5780638392d804146104d257600080fd5b80631a6949e3116101cb5780633ccfd60b1161019a5780634f6ccce71161017f5780634f6ccce714610427578063511a9605146104475780636352211e1461046757600080fd5b80633ccfd60b146103f257806342842e0e1461040757600080fd5b80631a6949e31461038a57806323b872dd1461039f5780632a133e35146103bf5780632f745c59146103d257600080fd5b8063095ea7b311610207578063095ea7b3146103065780630d77c7561461032857806312b40a9f1461034857806318160ddd1461036857600080fd5b806301ffc9a71461024457806306fdde031461027a57806307c5bde31461029c578063081812fc146102d957600080fd5b3661023f57005b600080fd5b34801561025057600080fd5b5061026461025f366004612da8565b6106bf565b6040516102719190613ce6565b60405180910390f35b34801561028657600080fd5b5061028f61071b565b6040516102719190613cf4565b3480156102a857600080fd5b506102cc6102b7366004612f84565b60066020526000908152604090205460ff1681565b6040516102719190613f6c565b3480156102e557600080fd5b506102f96102f4366004612f84565b6107ad565b6040516102719190613c53565b34801561031257600080fd5b50610326610321366004612d7a565b61080f565b005b34801561033457600080fd5b50610326610343366004612f84565b610895565b34801561035457600080fd5b50610326610363366004612c19565b6108c4565b34801561037457600080fd5b5061037d610927565b6040516102719190613f43565b34801561039657600080fd5b50610264610948565b3480156103ab57600080fd5b506103266103ba366004612c8b565b610960565b6102646103cd366004612de2565b610991565b3480156103de57600080fd5b5061037d6103ed366004612d7a565b610a75565b3480156103fe57600080fd5b50610326610b61565b34801561041357600080fd5b50610326610422366004612c8b565b610bf6565b34801561043357600080fd5b5061037d610442366004612f84565b610c15565b34801561045357600080fd5b50610326610462366004612f84565b610c57565b34801561047357600080fd5b506102f9610482366004612f84565b610c86565b34801561049357600080fd5b5061037d60135481565b3480156104a957600080fd5b5061037d6104b8366004612c19565b610cc0565b3480156104c957600080fd5b50610326610d08565b3480156104de57600080fd5b50600f546102f9906001600160a01b031681565b3480156104fe57600080fd5b50600b546001600160a01b03166102f9565b34801561051c57600080fd5b5061026461052b366004612e51565b610d3e565b34801561053c57600080fd5b5061028f611032565b34801561055157600080fd5b5061037d66b1a2bc2ec5000081565b34801561056c57600080fd5b5061032661057b366004612d4c565b611041565b34801561058c57600080fd5b5061032661059b366004612c19565b611050565b3480156105ac57600080fd5b506103266105bb366004612cd6565b6110b3565b3480156105cc57600080fd5b50600d546102f9906001600160a01b031681565b3480156105ec57600080fd5b5061028f6105fb366004612f84565b6110eb565b34801561060c57600080fd5b5061032661061b366004612c19565b611204565b34801561062c57600080fd5b5061037d60145481565b34801561064257600080fd5b50610264610651366004612c53565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561068b57600080fd5b5061032661069a366004612c19565b611267565b3480156106ab57600080fd5b50600e546102f9906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806107155750610715826112c0565b92915050565b60606000805461072a906140ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610756906140ff565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b5050505050905090565b61ffff81166000908152600260205260408120546001600160a01b03166107ef5760405162461bcd60e51b81526004016107e690613e55565b60405180910390fd5b5061ffff166000908152600460205260409020546001600160a01b031690565b600061081a82610c86565b9050806001600160a01b0316836001600160a01b0316141561084e5760405162461bcd60e51b81526004016107e690613e95565b336001600160a01b038216148061086a575061086a8133610651565b6108865760405162461bcd60e51b81526004016107e690613df5565b61089083836113a3565b505050565b600b546001600160a01b031633146108bf5760405162461bcd60e51b81526004016107e690613e65565b601355565b600b546001600160a01b031633146108ee5760405162461bcd60e51b81526004016107e690613e65565b600d80546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff19928316811790915560108054909216179055565b6000600260098054610938906140ff565b610943929150614034565b905090565b60006014544210158015610943575050601454151590565b61096a3382611421565b6109865760405162461bcd60e51b81526004016107e690613ec5565b6108908383836114e0565b60006002600c5414156109b65760405162461bcd60e51b81526004016107e690613f05565b6002600c556109c3610948565b6109df5760405162461bcd60e51b81526004016107e690613ef5565b3466b1a2bc2ec500006109f3600287614034565b6109fd9190614067565b14610a1a5760405162461bcd60e51b81526004016107e690613e15565b601354610a28600286614034565b610a3133610cc0565b610a3b9190613fe0565b1115610a595760405162461bcd60e51b81526004016107e690613de5565b610a663386868686611656565b50600180600c55949350505050565b6000610a8083610cc0565b8210610a9e5760405162461bcd60e51b81526004016107e690613d25565b6001600160a01b03831660009081526007602052604090208054610b569190610ac6906140ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610af2906140ff565b8015610b3f5780601f10610b1457610100808354040283529160200191610b3f565b820191906000526020600020905b815481529060010190602001808311610b2257829003601f168201915b5050505050836002610b519190614067565b6118f4565b61ffff169392505050565b600b546001600160a01b03163314610b8b5760405162461bcd60e51b81526004016107e690613e65565b604051600090339047908381818185875af1925050503d8060008114610bcd576040519150601f19603f3d011682016040523d82523d6000602084013e610bd2565b606091505b5050905080610bf35760405162461bcd60e51b81526004016107e690613f15565b50565b61089083838361ffff16604051806020016040528060008152506110b3565b6000610c1f610927565b8210610c3d5760405162461bcd60e51b81526004016107e690613ee5565b610c4d60098054610ac6906140ff565b61ffff1692915050565b600b546001600160a01b03163314610c815760405162461bcd60e51b81526004016107e690613e65565b601455565b61ffff81166000908152600260205260408120546001600160a01b0316806107155760405162461bcd60e51b81526004016107e690613e25565b60006001600160a01b038216610ce85760405162461bcd60e51b81526004016107e690613e05565b506001600160a01b031660009081526003602052604090205461ffff1690565b600b546001600160a01b03163314610d325760405162461bcd60e51b81526004016107e690613e65565b610d3c600061192a565b565b60006002600c541415610d635760405162461bcd60e51b81526004016107e690613f05565b6002600c55858414610d875760405162461bcd60e51b81526004016107e690613d15565b610d92866002614067565b8a14610db05760405162461bcd60e51b81526004016107e690613d05565b60005b8a811015610fa357336001600160a01b0316601260009054906101000a90046001600160a01b03166001600160a01b0316636352211e610e2a8f8f8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892506118f4915050565b6040518263ffffffff1660e01b8152600401610e469190613f35565b60206040518083038186803b158015610e5e57600080fd5b505afa158015610e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e969190612c36565b6001600160a01b031614610ebc5760405162461bcd60e51b81526004016107e690613f25565b8787610ec9600284614034565b818110610ee657634e487b7160e01b600052603260045260246000fd5b919091013560f81c90508686610efd600285614034565b818110610f1a57634e487b7160e01b600052603260045260246000fd5b9050602002013560ff1614610f415760405162461bcd60e51b81526004016107e690613d55565b8383610f4e600284614034565b818110610f6b57634e487b7160e01b600052603260045260246000fd5b90506020020135600114610f915760405162461bcd60e51b81526004016107e690613eb5565b610f9c600282613fe0565b9050610db3565b50610fb3338c8c8c8c8c8c611989565b6011546001600160a01b0316636b20c45433878787876040518663ffffffff1660e01b8152600401610fe9959493929190613ca5565b600060405180830381600087803b15801561100357600080fd5b505af1158015611017573d6000803e3d6000fd5b50505050600190506001600c559a9950505050505050505050565b60606001805461072a906140ff565b61104c338383611c7b565b5050565b600b546001600160a01b0316331461107a5760405162461bcd60e51b81526004016107e690613e65565b600e80546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff19928316811790915560118054909216179055565b6110bd3383611421565b6110d95760405162461bcd60e51b81526004016107e690613ec5565b6110e584848484611d1e565b50505050565b60606111128261ffff166000908152600260205260409020546001600160a01b0316151590565b61112e5760405162461bcd60e51b81526004016107e690613e85565b600d546001600160a01b031661115257505060408051602081019091526000815290565b60105461ffff83166000908152600660205260409081902090517f48a621a90000000000000000000000000000000000000000000000000000000081526001600160a01b03909216916348a621a9916111b091869190600401613f51565b60006040518083038186803b1580156111c857600080fd5b505afa1580156111dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107159190810190612f4f565b600b546001600160a01b0316331461122e5760405162461bcd60e51b81526004016107e690613e65565b600f80546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff19928316811790915560128054909216179055565b600b546001600160a01b031633146112915760405162461bcd60e51b81526004016107e690613e65565b6001600160a01b0381166112b75760405162461bcd60e51b81526004016107e690613d65565b610bf38161192a565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061135357507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061071557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610715565b61ffff81166000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385169081179091556113e882610c86565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61ffff81166000908152600260205260408120546001600160a01b031661145a5760405162461bcd60e51b81526004016107e690613dc5565b60006114698361ffff16610c86565b9050806001600160a01b0316846001600160a01b031614806114a85750836001600160a01b031661149d8461ffff166107ad565b6001600160a01b0316145b806114d857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166114f78261ffff16610c86565b6001600160a01b03161461151d5760405162461bcd60e51b81526004016107e690613e75565b6001600160a01b0382166115435760405162461bcd60e51b81526004016107e690613da5565b61154e838383611d51565b6115596000826113a3565b6001600160a01b038316600090815260036020526040812080546001929061158690849061ffff16614081565b82546101009290920a61ffff8181021990931691831602179091556001600160a01b038416600090815260036020526040812080546001945090926115cd91859116613fbc565b82546101009290920a61ffff8181021990931691831602179091558216600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0388811691821790925591519394509092908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b03851661167c5760405162461bcd60e51b81526004016107e690613e45565b610100831061169d5760405162461bcd60e51b81526004016107e690613e35565b600084848484333442446040516020016116be989796959493929190613ba8565b6040516020818303038152906040528051906020012090506116e3868686868661252c565b60005b6116f1600286614034565b81101561182f57600061174187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b51925086915060029050614067565b90506117688161ffff166000908152600260205260409020546001600160a01b0316151590565b156117855760405162461bcd60e51b81526004016107e690613d75565b61ffff81166000818152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038e169081179091558151808401835288851a815285855260069093528184209251835460ff191660ff909116179092555160019690961c959091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4508061182781614164565b9150506116e6565b506001600160a01b0386166000908152600360205260408120805486929061185c90849061ffff16613fbc565b92506101000a81548161ffff021916908361ffff1602179055506118d06000876118bb88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506118f4915050565b604051806020016040528060008152506127e7565b6118ec5760405162461bcd60e51b81526004016107e690613d35565b505050505050565b6000611901826002613fe0565b835110156119215760405162461bcd60e51b81526004016107e690613d95565b50016002015190565b600b80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0387166119af5760405162461bcd60e51b81526004016107e690613e45565b61020085106119d05760405162461bcd60e51b81526004016107e690613e35565b600082828888333442446040516020016119f1989796959493929190613ba8565b604051602081830303815290604052805190602001209050611a16888888888861252c565b60005b611a24600288614034565b811015611bbe576000611a7489898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b51925086915060029050614067565b9050611a9b8161ffff166000908152600260205260409020546001600160a01b0316151590565b15611ab85760405162461bcd60e51b81526004016107e690613d75565b61ffff8116600090815260026020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038e161790558151908101909152806004878786818110611b2057634e487b7160e01b600052603260045260246000fd5b611b319392013560f81c9050614191565b611b43906103fc600088901a16613ff3565b60ff90811690915261ffff83166000818152600660205260408082209451855460ff1916941693909317909355905160019590951c9490916001600160a01b038d16917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45080611bb681614164565b915050611a19565b50611bca600287614014565b6001600160a01b03891660009081526003602052604081208054909190611bf690849061ffff16613fbc565b92506101000a81548161ffff021916908361ffff160217905550611c556000896118bb8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506118f4915050565b611c715760405162461bcd60e51b81526004016107e690613d35565b5050505050505050565b816001600160a01b0316836001600160a01b03161415611cad5760405162461bcd60e51b81526004016107e690613db5565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611d11908590613ce6565b60405180910390a3505050565b611d298484846114e0565b611d35848484846127e7565b6110e55760405162461bcd60e51b81526004016107e690613d35565b6001600160a01b038316611ea057600060098054611d6e906140ff565b61ffff8481166000908152600a6020908152604091829020805461ffff19169385169390931790925551919350611daf925060099160f086901b9101613c18565b60405160208183030381529060405260099080519060200190611dd3929190612a08565b506001600160a01b03831660009081526007602052604081208054611df7906140ff565b905060f01b9050600881604051602001611e12929190613c18565b60405160208183030381529060405260089080519060200190611e36929190612a08565b506001600160a01b0384166000908152600760209081526040918290209151611e66929160f087901b9101613c18565b60408051601f198184030181529181526001600160a01b03861660009081526007602090815291902082516118ec93919290910190612a08565b6001600160a01b0382166122635761ffff8082166000908152600a6020526040902054600980549190921691611f6391611ed9906140ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611f05906140ff565b8015611f525780601f10611f2757610100808354040283529160200191611f52565b820191906000526020600020905b815481529060010190602001808311611f3557829003601f168201915b505050505060008361ffff1661293e565b61203060098054611f73906140ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9f906140ff565b8015611fec5780601f10611fc157610100808354040283529160200191611fec565b820191906000526020600020905b815481529060010190602001808311611fcf57829003601f168201915b5050505050836002611ffe9190613fbc565b61ffff1660028561ffff1660098054612016906140ff565b6120219291506140a4565b61202b91906140a4565b61293e565b604051602001612041929190613c02565b60405160208183030381529060405260099080519060200190612065929190612a08565b50600061210060088054612078906140ff565b80601f01602080910402602001604051908101604052809291908181526020018280546120a4906140ff565b80156120f15780601f106120c6576101008083540402835291602001916120f1565b820191906000526020600020905b8154815290600101906020018083116120d457829003601f168201915b50505050508361ffff166118f4565b6001600160a01b0386166000908152600760205260409020805491925061212a91611ed9906140ff565b6001600160a01b038616600090815260076020526040902080546122189190612152906140ff565b80601f016020809104026020016040519081016040528092919081815260200182805461217e906140ff565b80156121cb5780601f106121a0576101008083540402835291602001916121cb565b820191906000526020600020905b8154815290600101906020018083116121ae57829003601f168201915b50505050508360026121dd9190613fbc565b61ffff1660028561ffff16600760008c6001600160a01b03166001600160a01b031681526020019081526020016000208054612016906140ff565b604051602001612229929190613c02565b60408051601f198184030181529181526001600160a01b03871660009081526007602090815291902082516118ec93919290910190612a08565b816001600160a01b0316836001600160a01b0316146108905761ffff8082166000908152600a60205260408120546008805491909316926122a791612078906140ff565b6001600160a01b038616600090815260076020526040902080549192506122d191611ed9906140ff565b6001600160a01b038616600090815260076020526040902080546122f99190612152906140ff565b60405160200161230a929190613c02565b60408051601f198184030181529181526001600160a01b038716600090815260076020908152919020825161234493919290910190612a08565b506001600160a01b03841660009081526007602052604081208054612368906140ff565b905060f01b905060076000866001600160a01b03166001600160a01b031681526020019081526020016000208460f01b6040516020016123a9929190613c18565b60408051601f198184030181529181526001600160a01b03871660009081526007602090815291902082516123e393919290910190612a08565b508060001a60f81b60088461ffff1681546123fd906140ff565b811061241957634e487b7160e01b600052603260045260246000fd5b8154600116156124385790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f0100000000000000000000000000000000000000000000000000000000000000840402179055508060016002811061249157634e487b7160e01b600052603260045260246000fd5b1a60f81b60086124a2856001613fbc565b61ffff1681546124b1906140ff565b81106124cd57634e487b7160e01b600052603260045260246000fd5b8154600116156124ec5790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f010000000000000000000000000000000000000000000000000000000000000084040217905550505050505050565b600061256d83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506118f4915050565b905083821461258e5760405162461bcd60e51b81526004016107e690613ea5565b61259981600261403a565b6001600160a01b0387166000908152600760205260409020805461ffff92909216916125c4906140ff565b9050146125e35760405162461bcd60e51b81526004016107e690613d85565b600883836040516020016125f993929190613c37565b6040516020818303038152906040526008908051906020019061261d929190612a08565b506001600160a01b038616600090815260076020908152604091829020915161264b92918891889101613c37565b60408051601f198184030181529181526001600160a01b038816600090815260076020908152919020825161268593919290910190612a08565b50600060098054612695906140ff565b9050905060005b61ffff81168611156127ac576126b3600282614014565b6126bd9084613fbc565b61ffff1661270586868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505061ffff851690506118f4565b61ffff16146127265760405162461bcd60e51b81526004016107e690613d45565b600061276c88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505061ffff851690506118f4565b90506127788284613fbc565b61ffff9182166000908152600a60205260409020805461ffff1916919092161790556127a5600282613fbc565b905061269c565b50600986866040516020016127c393929190613c37565b60405160208183030381529060405260099080519060200190611c71929190612a08565b60006001600160a01b0384163b15612933576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290612844903390899088908890600401613c61565b602060405180830381600087803b15801561285e57600080fd5b505af192505050801561288e575060408051601f3d908101601f1916820190925261288b91810190612dc5565b60015b6128e8573d8080156128bc576040519150601f19603f3d011682016040523d82523d6000602084013e6128c1565b606091505b5080516128e05760405162461bcd60e51b81526004016107e690613d35565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506114d8565b506001949350505050565b60608161294c81601f613fe0565b101561296a5760405162461bcd60e51b81526004016107e690613dd5565b6129748284613fe0565b845110156129945760405162461bcd60e51b81526004016107e690613ed5565b6060821580156129b357604051915060008252602082016040526129fd565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156129ec5780518352602092830192016129d4565b5050858452601f01601f1916604052505b5090505b9392505050565b828054612a14906140ff565b90600052602060002090601f016020900481019282612a365760008555612a7c565b82601f10612a4f57805160ff1916838001178555612a7c565b82800160010185558215612a7c579182015b82811115612a7c578251825591602001919060010190612a61565b50612a88929150612a8c565b5090565b5b80821115612a885760008155600101612a8d565b6000612ab4612aaf84613f91565b613f7a565b905082815260208101848484011115612acc57600080fd5b612ad78482856140c7565b509392505050565b6000612aed612aaf84613f91565b905082815260208101848484011115612b0557600080fd5b612ad78482856140d3565b803561071581614204565b805161071581614204565b60008083601f840112612b37578182fd5b50813567ffffffffffffffff811115612b4e578182fd5b602083019150836020820283011115612b6657600080fd5b9250929050565b803561071581614218565b803561071581614220565b805161071581614220565b60008083601f840112612b9f578182fd5b50813567ffffffffffffffff811115612bb6578182fd5b602083019150836001820283011115612b6657600080fd5b600082601f830112612bde578081fd5b81356114d8848260208601612aa1565b600082601f830112612bfe578081fd5b81516114d8848260208601612adf565b803561071581614248565b600060208284031215612c2a578081fd5b612a0183828401612b10565b600060208284031215612c47578081fd5b612a0183828401612b1b565b60008060408385031215612c65578081fd5b612c7184828501612b10565b91506020612c8185828601612b10565b9150509250929050565b600080600060608486031215612c9f578081fd5b612cab85828601612b10565b92506020612cbb86828701612b10565b9250506040612ccc86828701612c0e565b9150509250925092565b60008060008060808587031215612ceb578081fd5b612cf786828701612b10565b93506020612d0787828801612b10565b9350506040612d1887828801612c0e565b925050606085013567ffffffffffffffff811115612d34578182fd5b612d4087828801612bce565b91505092959194509250565b60008060408385031215612d5e578182fd5b612d6a84838501612b10565b91506020612c8185828601612b6d565b60008060408385031215612d8c578182fd5b612d9884838501612b10565b91506020612c8185828601612c0e565b600060208284031215612db9578081fd5b612a0183828401612b78565b600060208284031215612dd6578081fd5b612a0183828401612b83565b60008060008060408587031215612df7578384fd5b8385013567ffffffffffffffff811115612e0f578485fd5b612e1b87828801612b8e565b9450945050602085013567ffffffffffffffff811115612e39578283fd5b612e4587828801612b8e565b95989497509550505050565b60008060008060008060008060008060a08b8d031215612e6f578586fd5b858b013567ffffffffffffffff811115612e87578687fd5b612e938d828e01612b8e565b9a509a505060208b013567ffffffffffffffff811115612eb1578687fd5b612ebd8d828e01612b8e565b985098505060408b013567ffffffffffffffff811115612edb578687fd5b612ee78d828e01612b8e565b965096505060608b013567ffffffffffffffff811115612f05578485fd5b612f118d828e01612b26565b945094505060808b013567ffffffffffffffff811115612f2f578283fd5b612f3b8d828e01612b26565b92509250509295989b9194979a5092959850565b600060208284031215612f60578081fd5b8082015167ffffffffffffffff811115612f78578182fd5b6114d884828501612bee565b600060208284031215612f95578081fd5b612a0183828401612c0e565b612faa816140aa565b82525050565b612faa612fbc826140aa565b61417f565b81835260208301925060007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612ff8578081fd5b6020830292506130098385846140c7565b50500190565b801515612faa565b7fffff0000000000000000000000000000000000000000000000000000000000008116612faa565b61304a8284836140c7565b500190565b6000613059825190565b8084526020840193506130708185602086016140d3565b601f01601f19169290920192915050565b600061308b825190565b6130998185602086016140d3565b9290920192915050565b600081546130b0816140ff565b6001821680156130c757600181146130d857613108565b60ff19831686528186019350613108565b60008581526020902060005b83811015613100578154888201526001909101906020016130e4565b505081860193505b50505092915050565b601f8152602081017f456163682072756e6e6572206e6565647320697473206f776e2063616e647900815290505b60200190565b60258152602081017f43616e6479206964732073686f756c642068617665207468652073616d65206c81527f656e677468000000000000000000000000000000000000000000000000000000602082015290505b60400190565b602b8152602081017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581527f74206f6620626f756e647300000000000000000000000000000000000000000060208201529050613199565b60328152602081017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e746572000000000000000000000000000060208201529050613199565b60248152602081017f6f776e6572546f6b656e496e6465786573206d7573742062652061207365717581527f656e63650000000000000000000000000000000000000000000000000000000060208201529050613199565b601c8152602081017f43616e6479206964732073686f756c64206265207468652073616d65000000008152905061313f565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050613199565b601c8152602081017f4552433732313a20746f6b656e20616c7265616479206d696e746564000000008152905061313f565b60458152602081017f54686520676976656e206f776e6572546f6b656e496e646578657320646f206e81527f6f742073746172742066726f6d207468652063757272656e74206f776e65722060208201527f636f756e74000000000000000000000000000000000000000000000000000000604082015290505b60600190565b60148152602081017f746f55696e7431365f6f75744f66426f756e64730000000000000000000000008152905061313f565b60248152602081017f4552433732313a207472616e7366657220746f20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529050613199565b60198152602081017f4552433732313a20617070726f766520746f2063616c6c6572000000000000008152905061313f565b602c8152602081017f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881527f697374656e7420746f6b656e000000000000000000000000000000000000000060208201529050613199565b600e8152602081017f736c6963655f6f766572666c6f770000000000000000000000000000000000008152905061313f565b60318152602081017f596f757220686f6d6520697320746f20736d616c6c20746f2077656c636f6d6581527f20736f206d616e7920647265616d65727300000000000000000000000000000060208201529050613199565b60388152602081017f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060208201529050613199565b602a8152602081017f4552433732313a2062616c616e636520717565727920666f7220746865207a6581527f726f20616464726573730000000000000000000000000000000000000000000060208201529050613199565b601d8152602081017f596f75206861766520746f2070617920746865206261696c20626f6e640000008152905061313f565b60298152602081017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481527f656e7420746f6b656e000000000000000000000000000000000000000000000060208201529050613199565b60328152602081017f596f752063616e206d696e74206279206261746368657320757020746f20323581527f3620746f6b656e7320617420612074696d65000000000000000000000000000060208201529050613199565b60208082527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373910190815261313f565b602c8152602081017f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881527f697374656e7420746f6b656e000000000000000000000000000000000000000060208201529050613199565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815261313f565b60298152602081017f4552433732313a207472616e73666572206f6620746f6b656e2074686174206981527f73206e6f74206f776e000000000000000000000000000000000000000000000060208201529050613199565b602f8152602081017f4552433732314d657461646174613a2055524920717565727920666f72206e6f81527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060208201529050613199565b60218152602081017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6581527f720000000000000000000000000000000000000000000000000000000000000060208201529050613199565b60328152602081017f6f776e6572496e6465786573206d7573742068617665207468652073616d652081527f6c656e67746820617320746f6b656e496473000000000000000000000000000060208201529050613199565b604f8152602081017f596f75722072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e64792c2077686f206b6e6f7773207768617420636f756c64206860208201527f617070656e206f74686572776973650000000000000000000000000000000000604082015290506133dd565b60318152602081017f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f81527f776e6572206e6f7220617070726f76656400000000000000000000000000000060208201529050613199565b60118152602081017f736c6963655f6f75744f66426f756e64730000000000000000000000000000008152905061313f565b602c8152602081017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81527f7574206f6620626f756e6473000000000000000000000000000000000000000060208201529050613199565b60148152602081017f5075626c69632073616c65206e6f74206f70656e0000000000000000000000008152905061313f565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c008152905061313f565b60118152602081017f5769746864726177616c206661696c65640000000000000000000000000000008152905061313f565b60378152602081017f596f752063616e6e6f7420676976652063616e6469657320746f20612072756e81527f6e6572207468617420796f7520646f206e6f74206f776e00000000000000000060208201529050613199565b8054613b848161412c565b90506108908382613b9f565b612faa816140bb565b80612faa565b60ff8116612faa565b613bb381898b61303f565b9050613bc081878961303f565b9050613bcc8186612fb0565b601401613bd98185613b99565b602001613be68184613b99565b602001613bf38183613b99565b60200198975050505050505050565b613c0c8184613081565b9050612a018183613081565b613c2281846130a3565b9050613c2e8183613017565b60020192915050565b613c4181856130a3565b90506114d881838561303f565b919050565b602081016107158284612fa1565b60808101613c6f8287612fa1565b613c7c6020830186612fa1565b613c896040830185613b90565b8181036060830152613c9b818461304f565b9695505050505050565b60608101613cb38288612fa1565b8181036020830152613cc6818688612fc1565b90508181036040830152613cdb818486612fc1565b979650505050505050565b60208101610715828461300f565b60208082528101612a01818461304f565b6020808252810161071581613111565b6020808252810161071581613145565b602080825281016107158161319f565b60208082528101610715816131f7565b602080825281016107158161324f565b60208082528101610715816132a7565b60208082528101610715816132d9565b6020808252810161071581613331565b6020808252810161071581613363565b60208082528101610715816133e3565b6020808252810161071581613415565b602080825281016107158161346d565b602080825281016107158161349f565b60208082528101610715816134f7565b6020808252810161071581613529565b6020808252810161071581613581565b60208082528101610715816135d9565b6020808252810161071581613631565b6020808252810161071581613663565b60208082528101610715816136bb565b6020808252810161071581613713565b6020808252810161071581613743565b602080825281016107158161379b565b60208082528101610715816137cb565b6020808252810161071581613823565b602080825281016107158161387b565b60208082528101610715816138d3565b602080825281016107158161392b565b60208082528101610715816139a9565b6020808252810161071581613a01565b6020808252810161071581613a33565b6020808252810161071581613a8b565b6020808252810161071581613abd565b6020808252810161071581613aef565b6020808252810161071581613b21565b602081016107158284613b90565b602081016107158284613b99565b60408101613f5f8285613b99565b612a016020830184613b79565b602081016107158284613b9f565b6000613f8560405190565b9050613c4e8282614137565b600067ffffffffffffffff821115613fab57613fab6141ee565b601f19601f83011660200192915050565b61ffff8116905061ffff8216915060008261ffff0382111561304a5761304a6141ac565b6000821982111561304a5761304a6141ac565b60ff8116905060ff8216915060008260ff0382111561304a5761304a6141ac565b61ffff9081169082165b915060008261402f5761402f6141c2565b500490565b8161401e565b61ffff8116905061ffff8216915060008161ffff0483118215151615614062576140626141ac565b500290565b6000816000190483118215151615614062576140626141ac565b61ffff9081169082165b915060008282101561409f5761409f6141ac565b500390565b8161408b565b60006001600160a01b038216610715565b600061ffff8216610715565b82818337506000910152565b60005b838110156140ee5781810151838201526020016140d6565b838111156110e55750506000910152565b60028104600182168061411357607f821691505b60208210811415614126576141266141d8565b50919050565b600060ff8216610715565b601f19601f830116810181811067ffffffffffffffff8211171561415d5761415d6141ee565b6040525050565b6000600019821415614178576141786141ac565b5060010190565b60006107158260006107158260601b90565b60ff91821691166000826141a7576141a76141c2565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61420d816140aa565b8114610bf357600080fd5b80151561420d565b7fffffffff00000000000000000000000000000000000000000000000000000000811661420d565b8061420d56fea26469706673582212208b47064164a4f8cc26fdbfbb1ee60ac4a5724e5b78b7b6cede56579d2d3c78fc64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102385760003560e01c80636b318e6e11610138578063b5fcb339116100b0578063d3d6005b1161007f578063e985e9c511610064578063e985e9c514610636578063f2fde38b1461067f578063fac913231461069f57600080fd5b8063d3d6005b14610600578063d7822c991461062057600080fd5b8063b5fcb33914610580578063b88d4fde146105a0578063c074f412146105c0578063c87b56dd146105e057600080fd5b80638da5cb5b1161010757806395d89b41116100ec57806395d89b41146105305780639c51792a14610545578063a22cb4651461056057600080fd5b80638da5cb5b146104f257806395a97a631461051057600080fd5b80636b318e6e1461048757806370a082311461049d578063715018a6146104bd5780638392d804146104d257600080fd5b80631a6949e3116101cb5780633ccfd60b1161019a5780634f6ccce71161017f5780634f6ccce714610427578063511a9605146104475780636352211e1461046757600080fd5b80633ccfd60b146103f257806342842e0e1461040757600080fd5b80631a6949e31461038a57806323b872dd1461039f5780632a133e35146103bf5780632f745c59146103d257600080fd5b8063095ea7b311610207578063095ea7b3146103065780630d77c7561461032857806312b40a9f1461034857806318160ddd1461036857600080fd5b806301ffc9a71461024457806306fdde031461027a57806307c5bde31461029c578063081812fc146102d957600080fd5b3661023f57005b600080fd5b34801561025057600080fd5b5061026461025f366004612da8565b6106bf565b6040516102719190613ce6565b60405180910390f35b34801561028657600080fd5b5061028f61071b565b6040516102719190613cf4565b3480156102a857600080fd5b506102cc6102b7366004612f84565b60066020526000908152604090205460ff1681565b6040516102719190613f6c565b3480156102e557600080fd5b506102f96102f4366004612f84565b6107ad565b6040516102719190613c53565b34801561031257600080fd5b50610326610321366004612d7a565b61080f565b005b34801561033457600080fd5b50610326610343366004612f84565b610895565b34801561035457600080fd5b50610326610363366004612c19565b6108c4565b34801561037457600080fd5b5061037d610927565b6040516102719190613f43565b34801561039657600080fd5b50610264610948565b3480156103ab57600080fd5b506103266103ba366004612c8b565b610960565b6102646103cd366004612de2565b610991565b3480156103de57600080fd5b5061037d6103ed366004612d7a565b610a75565b3480156103fe57600080fd5b50610326610b61565b34801561041357600080fd5b50610326610422366004612c8b565b610bf6565b34801561043357600080fd5b5061037d610442366004612f84565b610c15565b34801561045357600080fd5b50610326610462366004612f84565b610c57565b34801561047357600080fd5b506102f9610482366004612f84565b610c86565b34801561049357600080fd5b5061037d60135481565b3480156104a957600080fd5b5061037d6104b8366004612c19565b610cc0565b3480156104c957600080fd5b50610326610d08565b3480156104de57600080fd5b50600f546102f9906001600160a01b031681565b3480156104fe57600080fd5b50600b546001600160a01b03166102f9565b34801561051c57600080fd5b5061026461052b366004612e51565b610d3e565b34801561053c57600080fd5b5061028f611032565b34801561055157600080fd5b5061037d66b1a2bc2ec5000081565b34801561056c57600080fd5b5061032661057b366004612d4c565b611041565b34801561058c57600080fd5b5061032661059b366004612c19565b611050565b3480156105ac57600080fd5b506103266105bb366004612cd6565b6110b3565b3480156105cc57600080fd5b50600d546102f9906001600160a01b031681565b3480156105ec57600080fd5b5061028f6105fb366004612f84565b6110eb565b34801561060c57600080fd5b5061032661061b366004612c19565b611204565b34801561062c57600080fd5b5061037d60145481565b34801561064257600080fd5b50610264610651366004612c53565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561068b57600080fd5b5061032661069a366004612c19565b611267565b3480156106ab57600080fd5b50600e546102f9906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806107155750610715826112c0565b92915050565b60606000805461072a906140ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610756906140ff565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b5050505050905090565b61ffff81166000908152600260205260408120546001600160a01b03166107ef5760405162461bcd60e51b81526004016107e690613e55565b60405180910390fd5b5061ffff166000908152600460205260409020546001600160a01b031690565b600061081a82610c86565b9050806001600160a01b0316836001600160a01b0316141561084e5760405162461bcd60e51b81526004016107e690613e95565b336001600160a01b038216148061086a575061086a8133610651565b6108865760405162461bcd60e51b81526004016107e690613df5565b61089083836113a3565b505050565b600b546001600160a01b031633146108bf5760405162461bcd60e51b81526004016107e690613e65565b601355565b600b546001600160a01b031633146108ee5760405162461bcd60e51b81526004016107e690613e65565b600d80546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff19928316811790915560108054909216179055565b6000600260098054610938906140ff565b610943929150614034565b905090565b60006014544210158015610943575050601454151590565b61096a3382611421565b6109865760405162461bcd60e51b81526004016107e690613ec5565b6108908383836114e0565b60006002600c5414156109b65760405162461bcd60e51b81526004016107e690613f05565b6002600c556109c3610948565b6109df5760405162461bcd60e51b81526004016107e690613ef5565b3466b1a2bc2ec500006109f3600287614034565b6109fd9190614067565b14610a1a5760405162461bcd60e51b81526004016107e690613e15565b601354610a28600286614034565b610a3133610cc0565b610a3b9190613fe0565b1115610a595760405162461bcd60e51b81526004016107e690613de5565b610a663386868686611656565b50600180600c55949350505050565b6000610a8083610cc0565b8210610a9e5760405162461bcd60e51b81526004016107e690613d25565b6001600160a01b03831660009081526007602052604090208054610b569190610ac6906140ff565b80601f0160208091040260200160405190810160405280929190818152602001828054610af2906140ff565b8015610b3f5780601f10610b1457610100808354040283529160200191610b3f565b820191906000526020600020905b815481529060010190602001808311610b2257829003601f168201915b5050505050836002610b519190614067565b6118f4565b61ffff169392505050565b600b546001600160a01b03163314610b8b5760405162461bcd60e51b81526004016107e690613e65565b604051600090339047908381818185875af1925050503d8060008114610bcd576040519150601f19603f3d011682016040523d82523d6000602084013e610bd2565b606091505b5050905080610bf35760405162461bcd60e51b81526004016107e690613f15565b50565b61089083838361ffff16604051806020016040528060008152506110b3565b6000610c1f610927565b8210610c3d5760405162461bcd60e51b81526004016107e690613ee5565b610c4d60098054610ac6906140ff565b61ffff1692915050565b600b546001600160a01b03163314610c815760405162461bcd60e51b81526004016107e690613e65565b601455565b61ffff81166000908152600260205260408120546001600160a01b0316806107155760405162461bcd60e51b81526004016107e690613e25565b60006001600160a01b038216610ce85760405162461bcd60e51b81526004016107e690613e05565b506001600160a01b031660009081526003602052604090205461ffff1690565b600b546001600160a01b03163314610d325760405162461bcd60e51b81526004016107e690613e65565b610d3c600061192a565b565b60006002600c541415610d635760405162461bcd60e51b81526004016107e690613f05565b6002600c55858414610d875760405162461bcd60e51b81526004016107e690613d15565b610d92866002614067565b8a14610db05760405162461bcd60e51b81526004016107e690613d05565b60005b8a811015610fa357336001600160a01b0316601260009054906101000a90046001600160a01b03166001600160a01b0316636352211e610e2a8f8f8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892506118f4915050565b6040518263ffffffff1660e01b8152600401610e469190613f35565b60206040518083038186803b158015610e5e57600080fd5b505afa158015610e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e969190612c36565b6001600160a01b031614610ebc5760405162461bcd60e51b81526004016107e690613f25565b8787610ec9600284614034565b818110610ee657634e487b7160e01b600052603260045260246000fd5b919091013560f81c90508686610efd600285614034565b818110610f1a57634e487b7160e01b600052603260045260246000fd5b9050602002013560ff1614610f415760405162461bcd60e51b81526004016107e690613d55565b8383610f4e600284614034565b818110610f6b57634e487b7160e01b600052603260045260246000fd5b90506020020135600114610f915760405162461bcd60e51b81526004016107e690613eb5565b610f9c600282613fe0565b9050610db3565b50610fb3338c8c8c8c8c8c611989565b6011546001600160a01b0316636b20c45433878787876040518663ffffffff1660e01b8152600401610fe9959493929190613ca5565b600060405180830381600087803b15801561100357600080fd5b505af1158015611017573d6000803e3d6000fd5b50505050600190506001600c559a9950505050505050505050565b60606001805461072a906140ff565b61104c338383611c7b565b5050565b600b546001600160a01b0316331461107a5760405162461bcd60e51b81526004016107e690613e65565b600e80546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff19928316811790915560118054909216179055565b6110bd3383611421565b6110d95760405162461bcd60e51b81526004016107e690613ec5565b6110e584848484611d1e565b50505050565b60606111128261ffff166000908152600260205260409020546001600160a01b0316151590565b61112e5760405162461bcd60e51b81526004016107e690613e85565b600d546001600160a01b031661115257505060408051602081019091526000815290565b60105461ffff83166000908152600660205260409081902090517f48a621a90000000000000000000000000000000000000000000000000000000081526001600160a01b03909216916348a621a9916111b091869190600401613f51565b60006040518083038186803b1580156111c857600080fd5b505afa1580156111dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107159190810190612f4f565b600b546001600160a01b0316331461122e5760405162461bcd60e51b81526004016107e690613e65565b600f80546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff19928316811790915560128054909216179055565b600b546001600160a01b031633146112915760405162461bcd60e51b81526004016107e690613e65565b6001600160a01b0381166112b75760405162461bcd60e51b81526004016107e690613d65565b610bf38161192a565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061135357507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061071557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610715565b61ffff81166000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385169081179091556113e882610c86565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61ffff81166000908152600260205260408120546001600160a01b031661145a5760405162461bcd60e51b81526004016107e690613dc5565b60006114698361ffff16610c86565b9050806001600160a01b0316846001600160a01b031614806114a85750836001600160a01b031661149d8461ffff166107ad565b6001600160a01b0316145b806114d857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166114f78261ffff16610c86565b6001600160a01b03161461151d5760405162461bcd60e51b81526004016107e690613e75565b6001600160a01b0382166115435760405162461bcd60e51b81526004016107e690613da5565b61154e838383611d51565b6115596000826113a3565b6001600160a01b038316600090815260036020526040812080546001929061158690849061ffff16614081565b82546101009290920a61ffff8181021990931691831602179091556001600160a01b038416600090815260036020526040812080546001945090926115cd91859116613fbc565b82546101009290920a61ffff8181021990931691831602179091558216600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0388811691821790925591519394509092908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b03851661167c5760405162461bcd60e51b81526004016107e690613e45565b610100831061169d5760405162461bcd60e51b81526004016107e690613e35565b600084848484333442446040516020016116be989796959493929190613ba8565b6040516020818303038152906040528051906020012090506116e3868686868661252c565b60005b6116f1600286614034565b81101561182f57600061174187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b51925086915060029050614067565b90506117688161ffff166000908152600260205260409020546001600160a01b0316151590565b156117855760405162461bcd60e51b81526004016107e690613d75565b61ffff81166000818152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038e169081179091558151808401835288851a815285855260069093528184209251835460ff191660ff909116179092555160019690961c959091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4508061182781614164565b9150506116e6565b506001600160a01b0386166000908152600360205260408120805486929061185c90849061ffff16613fbc565b92506101000a81548161ffff021916908361ffff1602179055506118d06000876118bb88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506118f4915050565b604051806020016040528060008152506127e7565b6118ec5760405162461bcd60e51b81526004016107e690613d35565b505050505050565b6000611901826002613fe0565b835110156119215760405162461bcd60e51b81526004016107e690613d95565b50016002015190565b600b80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0387166119af5760405162461bcd60e51b81526004016107e690613e45565b61020085106119d05760405162461bcd60e51b81526004016107e690613e35565b600082828888333442446040516020016119f1989796959493929190613ba8565b604051602081830303815290604052805190602001209050611a16888888888861252c565b60005b611a24600288614034565b811015611bbe576000611a7489898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b51925086915060029050614067565b9050611a9b8161ffff166000908152600260205260409020546001600160a01b0316151590565b15611ab85760405162461bcd60e51b81526004016107e690613d75565b61ffff8116600090815260026020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038e161790558151908101909152806004878786818110611b2057634e487b7160e01b600052603260045260246000fd5b611b319392013560f81c9050614191565b611b43906103fc600088901a16613ff3565b60ff90811690915261ffff83166000818152600660205260408082209451855460ff1916941693909317909355905160019590951c9490916001600160a01b038d16917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45080611bb681614164565b915050611a19565b50611bca600287614014565b6001600160a01b03891660009081526003602052604081208054909190611bf690849061ffff16613fbc565b92506101000a81548161ffff021916908361ffff160217905550611c556000896118bb8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506118f4915050565b611c715760405162461bcd60e51b81526004016107e690613d35565b5050505050505050565b816001600160a01b0316836001600160a01b03161415611cad5760405162461bcd60e51b81526004016107e690613db5565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611d11908590613ce6565b60405180910390a3505050565b611d298484846114e0565b611d35848484846127e7565b6110e55760405162461bcd60e51b81526004016107e690613d35565b6001600160a01b038316611ea057600060098054611d6e906140ff565b61ffff8481166000908152600a6020908152604091829020805461ffff19169385169390931790925551919350611daf925060099160f086901b9101613c18565b60405160208183030381529060405260099080519060200190611dd3929190612a08565b506001600160a01b03831660009081526007602052604081208054611df7906140ff565b905060f01b9050600881604051602001611e12929190613c18565b60405160208183030381529060405260089080519060200190611e36929190612a08565b506001600160a01b0384166000908152600760209081526040918290209151611e66929160f087901b9101613c18565b60408051601f198184030181529181526001600160a01b03861660009081526007602090815291902082516118ec93919290910190612a08565b6001600160a01b0382166122635761ffff8082166000908152600a6020526040902054600980549190921691611f6391611ed9906140ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611f05906140ff565b8015611f525780601f10611f2757610100808354040283529160200191611f52565b820191906000526020600020905b815481529060010190602001808311611f3557829003601f168201915b505050505060008361ffff1661293e565b61203060098054611f73906140ff565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9f906140ff565b8015611fec5780601f10611fc157610100808354040283529160200191611fec565b820191906000526020600020905b815481529060010190602001808311611fcf57829003601f168201915b5050505050836002611ffe9190613fbc565b61ffff1660028561ffff1660098054612016906140ff565b6120219291506140a4565b61202b91906140a4565b61293e565b604051602001612041929190613c02565b60405160208183030381529060405260099080519060200190612065929190612a08565b50600061210060088054612078906140ff565b80601f01602080910402602001604051908101604052809291908181526020018280546120a4906140ff565b80156120f15780601f106120c6576101008083540402835291602001916120f1565b820191906000526020600020905b8154815290600101906020018083116120d457829003601f168201915b50505050508361ffff166118f4565b6001600160a01b0386166000908152600760205260409020805491925061212a91611ed9906140ff565b6001600160a01b038616600090815260076020526040902080546122189190612152906140ff565b80601f016020809104026020016040519081016040528092919081815260200182805461217e906140ff565b80156121cb5780601f106121a0576101008083540402835291602001916121cb565b820191906000526020600020905b8154815290600101906020018083116121ae57829003601f168201915b50505050508360026121dd9190613fbc565b61ffff1660028561ffff16600760008c6001600160a01b03166001600160a01b031681526020019081526020016000208054612016906140ff565b604051602001612229929190613c02565b60408051601f198184030181529181526001600160a01b03871660009081526007602090815291902082516118ec93919290910190612a08565b816001600160a01b0316836001600160a01b0316146108905761ffff8082166000908152600a60205260408120546008805491909316926122a791612078906140ff565b6001600160a01b038616600090815260076020526040902080549192506122d191611ed9906140ff565b6001600160a01b038616600090815260076020526040902080546122f99190612152906140ff565b60405160200161230a929190613c02565b60408051601f198184030181529181526001600160a01b038716600090815260076020908152919020825161234493919290910190612a08565b506001600160a01b03841660009081526007602052604081208054612368906140ff565b905060f01b905060076000866001600160a01b03166001600160a01b031681526020019081526020016000208460f01b6040516020016123a9929190613c18565b60408051601f198184030181529181526001600160a01b03871660009081526007602090815291902082516123e393919290910190612a08565b508060001a60f81b60088461ffff1681546123fd906140ff565b811061241957634e487b7160e01b600052603260045260246000fd5b8154600116156124385790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f0100000000000000000000000000000000000000000000000000000000000000840402179055508060016002811061249157634e487b7160e01b600052603260045260246000fd5b1a60f81b60086124a2856001613fbc565b61ffff1681546124b1906140ff565b81106124cd57634e487b7160e01b600052603260045260246000fd5b8154600116156124ec5790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f010000000000000000000000000000000000000000000000000000000000000084040217905550505050505050565b600061256d83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506118f4915050565b905083821461258e5760405162461bcd60e51b81526004016107e690613ea5565b61259981600261403a565b6001600160a01b0387166000908152600760205260409020805461ffff92909216916125c4906140ff565b9050146125e35760405162461bcd60e51b81526004016107e690613d85565b600883836040516020016125f993929190613c37565b6040516020818303038152906040526008908051906020019061261d929190612a08565b506001600160a01b038616600090815260076020908152604091829020915161264b92918891889101613c37565b60408051601f198184030181529181526001600160a01b038816600090815260076020908152919020825161268593919290910190612a08565b50600060098054612695906140ff565b9050905060005b61ffff81168611156127ac576126b3600282614014565b6126bd9084613fbc565b61ffff1661270586868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505061ffff851690506118f4565b61ffff16146127265760405162461bcd60e51b81526004016107e690613d45565b600061276c88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505061ffff851690506118f4565b90506127788284613fbc565b61ffff9182166000908152600a60205260409020805461ffff1916919092161790556127a5600282613fbc565b905061269c565b50600986866040516020016127c393929190613c37565b60405160208183030381529060405260099080519060200190611c71929190612a08565b60006001600160a01b0384163b15612933576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290612844903390899088908890600401613c61565b602060405180830381600087803b15801561285e57600080fd5b505af192505050801561288e575060408051601f3d908101601f1916820190925261288b91810190612dc5565b60015b6128e8573d8080156128bc576040519150601f19603f3d011682016040523d82523d6000602084013e6128c1565b606091505b5080516128e05760405162461bcd60e51b81526004016107e690613d35565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506114d8565b506001949350505050565b60608161294c81601f613fe0565b101561296a5760405162461bcd60e51b81526004016107e690613dd5565b6129748284613fe0565b845110156129945760405162461bcd60e51b81526004016107e690613ed5565b6060821580156129b357604051915060008252602082016040526129fd565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156129ec5780518352602092830192016129d4565b5050858452601f01601f1916604052505b5090505b9392505050565b828054612a14906140ff565b90600052602060002090601f016020900481019282612a365760008555612a7c565b82601f10612a4f57805160ff1916838001178555612a7c565b82800160010185558215612a7c579182015b82811115612a7c578251825591602001919060010190612a61565b50612a88929150612a8c565b5090565b5b80821115612a885760008155600101612a8d565b6000612ab4612aaf84613f91565b613f7a565b905082815260208101848484011115612acc57600080fd5b612ad78482856140c7565b509392505050565b6000612aed612aaf84613f91565b905082815260208101848484011115612b0557600080fd5b612ad78482856140d3565b803561071581614204565b805161071581614204565b60008083601f840112612b37578182fd5b50813567ffffffffffffffff811115612b4e578182fd5b602083019150836020820283011115612b6657600080fd5b9250929050565b803561071581614218565b803561071581614220565b805161071581614220565b60008083601f840112612b9f578182fd5b50813567ffffffffffffffff811115612bb6578182fd5b602083019150836001820283011115612b6657600080fd5b600082601f830112612bde578081fd5b81356114d8848260208601612aa1565b600082601f830112612bfe578081fd5b81516114d8848260208601612adf565b803561071581614248565b600060208284031215612c2a578081fd5b612a0183828401612b10565b600060208284031215612c47578081fd5b612a0183828401612b1b565b60008060408385031215612c65578081fd5b612c7184828501612b10565b91506020612c8185828601612b10565b9150509250929050565b600080600060608486031215612c9f578081fd5b612cab85828601612b10565b92506020612cbb86828701612b10565b9250506040612ccc86828701612c0e565b9150509250925092565b60008060008060808587031215612ceb578081fd5b612cf786828701612b10565b93506020612d0787828801612b10565b9350506040612d1887828801612c0e565b925050606085013567ffffffffffffffff811115612d34578182fd5b612d4087828801612bce565b91505092959194509250565b60008060408385031215612d5e578182fd5b612d6a84838501612b10565b91506020612c8185828601612b6d565b60008060408385031215612d8c578182fd5b612d9884838501612b10565b91506020612c8185828601612c0e565b600060208284031215612db9578081fd5b612a0183828401612b78565b600060208284031215612dd6578081fd5b612a0183828401612b83565b60008060008060408587031215612df7578384fd5b8385013567ffffffffffffffff811115612e0f578485fd5b612e1b87828801612b8e565b9450945050602085013567ffffffffffffffff811115612e39578283fd5b612e4587828801612b8e565b95989497509550505050565b60008060008060008060008060008060a08b8d031215612e6f578586fd5b858b013567ffffffffffffffff811115612e87578687fd5b612e938d828e01612b8e565b9a509a505060208b013567ffffffffffffffff811115612eb1578687fd5b612ebd8d828e01612b8e565b985098505060408b013567ffffffffffffffff811115612edb578687fd5b612ee78d828e01612b8e565b965096505060608b013567ffffffffffffffff811115612f05578485fd5b612f118d828e01612b26565b945094505060808b013567ffffffffffffffff811115612f2f578283fd5b612f3b8d828e01612b26565b92509250509295989b9194979a5092959850565b600060208284031215612f60578081fd5b8082015167ffffffffffffffff811115612f78578182fd5b6114d884828501612bee565b600060208284031215612f95578081fd5b612a0183828401612c0e565b612faa816140aa565b82525050565b612faa612fbc826140aa565b61417f565b81835260208301925060007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612ff8578081fd5b6020830292506130098385846140c7565b50500190565b801515612faa565b7fffff0000000000000000000000000000000000000000000000000000000000008116612faa565b61304a8284836140c7565b500190565b6000613059825190565b8084526020840193506130708185602086016140d3565b601f01601f19169290920192915050565b600061308b825190565b6130998185602086016140d3565b9290920192915050565b600081546130b0816140ff565b6001821680156130c757600181146130d857613108565b60ff19831686528186019350613108565b60008581526020902060005b83811015613100578154888201526001909101906020016130e4565b505081860193505b50505092915050565b601f8152602081017f456163682072756e6e6572206e6565647320697473206f776e2063616e647900815290505b60200190565b60258152602081017f43616e6479206964732073686f756c642068617665207468652073616d65206c81527f656e677468000000000000000000000000000000000000000000000000000000602082015290505b60400190565b602b8152602081017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581527f74206f6620626f756e647300000000000000000000000000000000000000000060208201529050613199565b60328152602081017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e746572000000000000000000000000000060208201529050613199565b60248152602081017f6f776e6572546f6b656e496e6465786573206d7573742062652061207365717581527f656e63650000000000000000000000000000000000000000000000000000000060208201529050613199565b601c8152602081017f43616e6479206964732073686f756c64206265207468652073616d65000000008152905061313f565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050613199565b601c8152602081017f4552433732313a20746f6b656e20616c7265616479206d696e746564000000008152905061313f565b60458152602081017f54686520676976656e206f776e6572546f6b656e496e646578657320646f206e81527f6f742073746172742066726f6d207468652063757272656e74206f776e65722060208201527f636f756e74000000000000000000000000000000000000000000000000000000604082015290505b60600190565b60148152602081017f746f55696e7431365f6f75744f66426f756e64730000000000000000000000008152905061313f565b60248152602081017f4552433732313a207472616e7366657220746f20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529050613199565b60198152602081017f4552433732313a20617070726f766520746f2063616c6c6572000000000000008152905061313f565b602c8152602081017f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881527f697374656e7420746f6b656e000000000000000000000000000000000000000060208201529050613199565b600e8152602081017f736c6963655f6f766572666c6f770000000000000000000000000000000000008152905061313f565b60318152602081017f596f757220686f6d6520697320746f20736d616c6c20746f2077656c636f6d6581527f20736f206d616e7920647265616d65727300000000000000000000000000000060208201529050613199565b60388152602081017f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060208201529050613199565b602a8152602081017f4552433732313a2062616c616e636520717565727920666f7220746865207a6581527f726f20616464726573730000000000000000000000000000000000000000000060208201529050613199565b601d8152602081017f596f75206861766520746f2070617920746865206261696c20626f6e640000008152905061313f565b60298152602081017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481527f656e7420746f6b656e000000000000000000000000000000000000000000000060208201529050613199565b60328152602081017f596f752063616e206d696e74206279206261746368657320757020746f20323581527f3620746f6b656e7320617420612074696d65000000000000000000000000000060208201529050613199565b60208082527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373910190815261313f565b602c8152602081017f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881527f697374656e7420746f6b656e000000000000000000000000000000000000000060208201529050613199565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815261313f565b60298152602081017f4552433732313a207472616e73666572206f6620746f6b656e2074686174206981527f73206e6f74206f776e000000000000000000000000000000000000000000000060208201529050613199565b602f8152602081017f4552433732314d657461646174613a2055524920717565727920666f72206e6f81527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060208201529050613199565b60218152602081017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6581527f720000000000000000000000000000000000000000000000000000000000000060208201529050613199565b60328152602081017f6f776e6572496e6465786573206d7573742068617665207468652073616d652081527f6c656e67746820617320746f6b656e496473000000000000000000000000000060208201529050613199565b604f8152602081017f596f75722072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e64792c2077686f206b6e6f7773207768617420636f756c64206860208201527f617070656e206f74686572776973650000000000000000000000000000000000604082015290506133dd565b60318152602081017f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f81527f776e6572206e6f7220617070726f76656400000000000000000000000000000060208201529050613199565b60118152602081017f736c6963655f6f75744f66426f756e64730000000000000000000000000000008152905061313f565b602c8152602081017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81527f7574206f6620626f756e6473000000000000000000000000000000000000000060208201529050613199565b60148152602081017f5075626c69632073616c65206e6f74206f70656e0000000000000000000000008152905061313f565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c008152905061313f565b60118152602081017f5769746864726177616c206661696c65640000000000000000000000000000008152905061313f565b60378152602081017f596f752063616e6e6f7420676976652063616e6469657320746f20612072756e81527f6e6572207468617420796f7520646f206e6f74206f776e00000000000000000060208201529050613199565b8054613b848161412c565b90506108908382613b9f565b612faa816140bb565b80612faa565b60ff8116612faa565b613bb381898b61303f565b9050613bc081878961303f565b9050613bcc8186612fb0565b601401613bd98185613b99565b602001613be68184613b99565b602001613bf38183613b99565b60200198975050505050505050565b613c0c8184613081565b9050612a018183613081565b613c2281846130a3565b9050613c2e8183613017565b60020192915050565b613c4181856130a3565b90506114d881838561303f565b919050565b602081016107158284612fa1565b60808101613c6f8287612fa1565b613c7c6020830186612fa1565b613c896040830185613b90565b8181036060830152613c9b818461304f565b9695505050505050565b60608101613cb38288612fa1565b8181036020830152613cc6818688612fc1565b90508181036040830152613cdb818486612fc1565b979650505050505050565b60208101610715828461300f565b60208082528101612a01818461304f565b6020808252810161071581613111565b6020808252810161071581613145565b602080825281016107158161319f565b60208082528101610715816131f7565b602080825281016107158161324f565b60208082528101610715816132a7565b60208082528101610715816132d9565b6020808252810161071581613331565b6020808252810161071581613363565b60208082528101610715816133e3565b6020808252810161071581613415565b602080825281016107158161346d565b602080825281016107158161349f565b60208082528101610715816134f7565b6020808252810161071581613529565b6020808252810161071581613581565b60208082528101610715816135d9565b6020808252810161071581613631565b6020808252810161071581613663565b60208082528101610715816136bb565b6020808252810161071581613713565b6020808252810161071581613743565b602080825281016107158161379b565b60208082528101610715816137cb565b6020808252810161071581613823565b602080825281016107158161387b565b60208082528101610715816138d3565b602080825281016107158161392b565b60208082528101610715816139a9565b6020808252810161071581613a01565b6020808252810161071581613a33565b6020808252810161071581613a8b565b6020808252810161071581613abd565b6020808252810161071581613aef565b6020808252810161071581613b21565b602081016107158284613b90565b602081016107158284613b99565b60408101613f5f8285613b99565b612a016020830184613b79565b602081016107158284613b9f565b6000613f8560405190565b9050613c4e8282614137565b600067ffffffffffffffff821115613fab57613fab6141ee565b601f19601f83011660200192915050565b61ffff8116905061ffff8216915060008261ffff0382111561304a5761304a6141ac565b6000821982111561304a5761304a6141ac565b60ff8116905060ff8216915060008260ff0382111561304a5761304a6141ac565b61ffff9081169082165b915060008261402f5761402f6141c2565b500490565b8161401e565b61ffff8116905061ffff8216915060008161ffff0483118215151615614062576140626141ac565b500290565b6000816000190483118215151615614062576140626141ac565b61ffff9081169082165b915060008282101561409f5761409f6141ac565b500390565b8161408b565b60006001600160a01b038216610715565b600061ffff8216610715565b82818337506000910152565b60005b838110156140ee5781810151838201526020016140d6565b838111156110e55750506000910152565b60028104600182168061411357607f821691505b60208210811415614126576141266141d8565b50919050565b600060ff8216610715565b601f19601f830116810181811067ffffffffffffffff8211171561415d5761415d6141ee565b6040525050565b6000600019821415614178576141786141ac565b5060010190565b60006107158260006107158260601b90565b60ff91821691166000826141a7576141a76141c2565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61420d816140aa565b8114610bf357600080fd5b80151561420d565b7fffffffff00000000000000000000000000000000000000000000000000000000811661420d565b8061420d56fea26469706673582212208b47064164a4f8cc26fdbfbb1ee60ac4a5724e5b78b7b6cede56579d2d3c78fc64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13026,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 13028,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 13032,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 13036,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 13040,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 13046,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 13051,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "dreamers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(ChainDreamer)4557_storage)"
      },
      {
        "astId": 14148,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 14150,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes_storage"
      },
      {
        "astId": 14152,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes_storage"
      },
      {
        "astId": 14156,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint16,t_uint16)"
      },
      {
        "astId": 225,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 425,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_status",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4174,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "renderingContractAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 4176,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "candyShopAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 4178,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "chainRunnersAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 4181,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "renderer",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IDreamersRenderer)7813"
      },
      {
        "astId": 4184,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "candyShop",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(ICandyShop)7761"
      },
      {
        "astId": 4187,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "chainRunners",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IChainRunners)7778"
      },
      {
        "astId": 4189,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "maxDreamersMintPublicSale",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4194,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "publicSaleStartTimestamp",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICandyShop)7761": {
        "encoding": "inplace",
        "label": "contract ICandyShop",
        "numberOfBytes": "20"
      },
      "t_contract(IChainRunners)7778": {
        "encoding": "inplace",
        "label": "contract IChainRunners",
        "numberOfBytes": "20"
      },
      "t_contract(IDreamersRenderer)7813": {
        "encoding": "inplace",
        "label": "contract IDreamersRenderer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_struct(ChainDreamer)4557_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ChainDreamersTypes.ChainDreamer)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainDreamer)4557_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChainDreamer)4557_storage": {
        "encoding": "inplace",
        "label": "struct ChainDreamersTypes.ChainDreamer",
        "members": [
          {
            "astId": 4556,
            "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
            "label": "candy",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
