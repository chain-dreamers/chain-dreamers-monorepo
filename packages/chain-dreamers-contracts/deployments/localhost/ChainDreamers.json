{
  "address": "0x6F6f570F45833E249e27022648a26F4076F48f78",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_NUMBER_OF_TOKENS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_PUBLIC_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candyShopAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainRunnersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dreamersCandies",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        }
      ],
      "name": "flipProxyState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenExists",
      "outputs": [
        {
          "internalType": "bool[10000]",
          "name": "",
          "type": "bool[10000]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "looksrare",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplacesApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDreamersMintPublicSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        }
      ],
      "name": "mintBatchPublicSale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "candyIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "candyAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatchRunnersAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "opensea",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candyShopContractAddress",
          "type": "address"
        }
      ],
      "name": "setCandyShopAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_chainRunnersContractAddress",
          "type": "address"
        }
      ],
      "name": "setChainRunnersContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "looksrare_",
          "type": "address"
        }
      ],
      "name": "setLooksrare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDreamersMintPublicSale",
          "type": "uint256"
        }
      ],
      "name": "setMaxDreamersMintPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "opensea_",
          "type": "address"
        }
      ],
      "name": "setOpensea",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_renderingContractAddress",
          "type": "address"
        }
      ],
      "name": "setRenderingContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleMarketplacesApproved",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfa0cb85b73faf67b9d9ac2e2f40c0094084e1e7b1e187bb4e5fc84dcb85d082c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x6F6f570F45833E249e27022648a26F4076F48f78",
    "transactionIndex": 0,
    "gasUsed": "4552471",
    "logsBloom": "0x
    "blockHash": "0x59654dae6be72ca377db275b5a10a3c3af1b3c2e82238ed90492a32134876f67",
    "transactionHash": "0xfa0cb85b73faf67b9d9ac2e2f40c0094084e1e7b1e187bb4e5fc84dcb85d082c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14122031,
        "transactionHash": "0xfa0cb85b73faf67b9d9ac2e2f40c0094084e1e7b1e187bb4e5fc84dcb85d082c",
        "address": "0x6F6f570F45833E249e27022648a26F4076F48f78",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x59654dae6be72ca377db275b5a10a3c3af1b3c2e82238ed90492a32134876f67"
      }
    ],
    "blockNumber": 14122031,
    "cumulativeGasUsed": "4552471",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Chain Dreamers",
    "DRE"
  ],
  "numDeployments": 1,
  "solcInputHash": "3ea32118be274f37c08dc4f7a992c429",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_OF_TOKENS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PUBLIC_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candyShopAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainRunnersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dreamersCandies\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"flipProxyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenExists\",\"outputs\":[{\"internalType\":\"bool[10000]\",\"name\":\"\",\"type\":\"bool[10000]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"looksrare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplacesApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDreamersMintPublicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"}],\"name\":\"mintBatchPublicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"candyIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"candyAmounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatchRunnersAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opensea\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candyShopContractAddress\",\"type\":\"address\"}],\"name\":\"setCandyShopAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainRunnersContractAddress\",\"type\":\"address\"}],\"name\":\"setChainRunnersContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"looksrare_\",\"type\":\"address\"}],\"name\":\"setLooksrare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDreamersMintPublicSale\",\"type\":\"uint256\"}],\"name\":\"setMaxDreamersMintPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opensea_\",\"type\":\"address\"}],\"name\":\"setOpensea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_renderingContractAddress\",\"type\":\"address\"}],\"name\":\"setRenderingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMarketplacesApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"approve(address,uint256,uint256)\":{\"details\":\"Approve \\\"to\\\" to manage token Id\",\"params\":{\"to\":\"address The address which will manage the token Id\",\"tokenId\":\"uint256 The token Id to manage\",\"tokenIndex\":\"uint256 The index of the token in the owner's list\"}},\"balanceOf(address)\":{\"details\":\"There are two bytes per tokenId\",\"params\":{\"owner\":\"address The address we retrieve the balance for\"},\"returns\":{\"_0\":\"uint256 The number of tokens owned by the address\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getOwnerIndex(address)\":{\"details\":\"Returns the index of owner in the internal array of owners. Revert if not found.\",\"params\":{\"owner\":\"address The address we retrieve the index for\"}},\"getTokenExists()\":{\"details\":\"Returns the array of bool telling if a token exists or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Modified for opensea and looksrare pre-approve so users can make truly gas less sales.\"},\"mintBatchRunnersAccess(bytes,uint256[],uint256[])\":{\"details\":\"This mint function wraps the safeMintBatch to:      1) check that the minter owns the runner 2) use the candies 3) burn the candies\",\"params\":{\"candyAmounts\":\"should be an array of 1\",\"candyIds\":\"the same indexes as above but as a uint8 array\",\"tokenIds\":\"a bytes interpreted as an array of uint16\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good      reason to call this function on chain.\",\"params\":{\"tokenId\":\"uint265 A given token id\"},\"returns\":{\"_0\":\"address The owner of the token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,uint256,address,uint256)\":{\"details\":\"Transfer token with minimal computing since all the required data to check is given\",\"params\":{\"from\":\"address The address which you want to transfer the token from\",\"fromIndex\":\"uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\",\"to\":\"address The address which you want to transfer the token to\",\"tokenIndex\":\"uint256 The index of the token to transfer in the from's token list.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\",\"params\":{\"_approved\":\"Whether to add or remove `operator` as an operator.\",\"operator\":\"The address of the operator to add or remove.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"opensea\":{\"details\":\"Copied from \\\\@naomsa's contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"flipProxyState(address)\":{\"notice\":\"Approve the communication and interaction with cross-collection interactions.\"},\"looksrare()\":{\"notice\":\"LooksRare marketplace transfer manager.\"},\"marketplacesApproved()\":{\"notice\":\"Check if marketplaces pre-approve is enabled.\"},\"opensea()\":{\"notice\":\"OpenSea proxy registry.\"},\"setLooksrare(address)\":{\"notice\":\"Set looksrare to `looksrare_`.\"},\"setOpensea(address)\":{\"notice\":\"Set opensea to `opensea_`.\"},\"toggleMarketplacesApproved()\":{\"notice\":\"Toggle pre-approve feature state for sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dreamers/ChainDreamers.sol\":\"ChainDreamers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dreamers/ChainDreamers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {BytesLib} from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport {ERC721Enumerable, ERC721} from \\\"../tokens/ERC721Enumerable.sol\\\";\\nimport \\\"../interfaces/IDreamersRenderer.sol\\\";\\nimport \\\"../interfaces/ICandyShop.sol\\\";\\nimport \\\"../interfaces/IChainRunners.sol\\\";\\n\\ncontract OpenSeaProxyRegistry {\\n    mapping(address => address) public proxies;\\n}\\n\\ncontract ChainDreamers is ERC721Enumerable, Ownable, ReentrancyGuard {\\n    // Linked contracts\\n    address public renderingContractAddress;\\n    address public candyShopAddress;\\n    address public chainRunnersAddress;\\n    IDreamersRenderer renderer;\\n    ICandyShop candyShop;\\n    IChainRunners chainRunners;\\n\\n    uint8[MAX_NUMBER_OF_TOKENS] public dreamersCandies;\\n    uint8 private constant candyMask = 252; // \\\"11111100\\\" binary string, last 2 bits kept for candyId\\n    /// @dev Copied from \\\\@naomsa's contract\\n    /// @notice OpenSea proxy registry.\\n    address public opensea;\\n    /// @notice LooksRare marketplace transfer manager.\\n    address public looksrare;\\n    /// @notice Check if marketplaces pre-approve is enabled.\\n    bool public marketplacesApproved = true;\\n\\n    mapping(address => bool) proxyToApproved;\\n\\n    /// @notice Set opensea to `opensea_`.\\n    function setOpensea(address opensea_) external onlyOwner {\\n        opensea = opensea_;\\n    }\\n\\n    /// @notice Set looksrare to `looksrare_`.\\n    function setLooksrare(address looksrare_) external onlyOwner {\\n        looksrare = looksrare_;\\n    }\\n\\n    /// @notice Toggle pre-approve feature state for sender.\\n    function toggleMarketplacesApproved() external onlyOwner {\\n        marketplacesApproved = !marketplacesApproved;\\n    }\\n\\n    /// @notice Approve the communication and interaction with cross-collection interactions.\\n    function flipProxyState(address proxyAddress) public onlyOwner {\\n        proxyToApproved[proxyAddress] = !proxyToApproved[proxyAddress];\\n    }\\n\\n    /// @dev Modified for opensea and looksrare pre-approve so users can make truly gas less sales.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (!marketplacesApproved)\\n            return super.isApprovedForAll(owner, operator);\\n\\n        return\\n            operator == OpenSeaProxyRegistry(opensea).proxies(owner) ||\\n            operator == looksrare ||\\n            proxyToApproved[operator] ||\\n            super.isApprovedForAll(owner, operator);\\n    }\\n\\n    // Constants\\n    uint256 public maxDreamersMintPublicSale;\\n    uint256 public constant MINT_PUBLIC_PRICE = 0.05 ether;\\n\\n    // State variables\\n    uint256 public publicSaleStartTimestamp;\\n\\n    function setPublicSaleTimestamp(uint256 timestamp) external onlyOwner {\\n        publicSaleStartTimestamp = timestamp;\\n    }\\n\\n    function isPublicSaleOpen() public view returns (bool) {\\n        return\\n            block.timestamp > publicSaleStartTimestamp &&\\n            publicSaleStartTimestamp != 0;\\n    }\\n\\n    modifier whenPublicSaleActive() {\\n        require(isPublicSaleOpen(), \\\"Public sale not open\\\");\\n        _;\\n    }\\n\\n    function setRenderingContractAddress(address _renderingContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        renderingContractAddress = _renderingContractAddress;\\n        renderer = IDreamersRenderer(renderingContractAddress);\\n    }\\n\\n    function setCandyShopAddress(address _candyShopContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        candyShopAddress = _candyShopContractAddress;\\n        candyShop = ICandyShop(candyShopAddress);\\n    }\\n\\n    function setMaxDreamersMintPublicSale(uint256 _maxDreamersMintPublicSale)\\n        public\\n        onlyOwner\\n    {\\n        maxDreamersMintPublicSale = _maxDreamersMintPublicSale;\\n    }\\n\\n    function setChainRunnersContractAddress(\\n        address _chainRunnersContractAddress\\n    ) public onlyOwner {\\n        chainRunnersAddress = _chainRunnersContractAddress;\\n        chainRunners = IChainRunners(_chainRunnersContractAddress);\\n    }\\n\\n    constructor(string memory name_, string memory symbol_)\\n        ERC721(name_, symbol_)\\n    {}\\n\\n    /// @dev This mint function wraps the safeMintBatch to:\\n    ///      1) check that the minter owns the runner 2) use the candies 3) burn the candies\\n    /// @param tokenIds a bytes interpreted as an array of uint16\\n    /// @param candyIds the same indexes as above but as a uint8 array\\n    /// @param candyAmounts should be an array of 1\\n    function mintBatchRunnersAccess(\\n        bytes calldata tokenIds,\\n        uint256[] calldata candyIds,\\n        uint256[] calldata candyAmounts\\n    ) public nonReentrant returns (bool) {\\n        require(\\n            tokenIds.length == candyIds.length * 2,\\n            \\\"Each runner needs one and only one candy\\\"\\n        );\\n\\n        safeMintBatch(_msgSender(), tokenIds);\\n\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                tokenIds,\\n                msg.sender,\\n                candyIds,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n        for (uint256 i = 0; i < candyIds.length; i++) {\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i * 2);\\n            // ownerOf uses a simple mapping in OZ's ERC721 so should be cheap\\n            require(\\n                chainRunners.ownerOf(tokenId) == _msgSender(),\\n                \\\"You cannot give candies to a runner that you do not own\\\"\\n            );\\n            require(\\n                candyAmounts[i] == 1,\\n                \\\"Your runner needs one and only one candy, who knows what could happen otherwise\\\"\\n            );\\n            dreamersCandies[tokenId] =\\n                (uint8(candies[i % 32]) & candyMask) +\\n                (uint8(candyIds[i]) % 4);\\n            if (i % 32 == 31) {\\n                candies = keccak256(abi.encodePacked(candies));\\n            }\\n        }\\n\\n        candyShop.burnBatch(_msgSender(), candyIds, candyAmounts);\\n        return true;\\n    }\\n\\n    function mintBatchPublicSale(bytes calldata tokenIds)\\n        public\\n        payable\\n        nonReentrant\\n        whenPublicSaleActive\\n        returns (bool)\\n    {\\n        require(\\n            (tokenIds.length / 2) * MINT_PUBLIC_PRICE == msg.value,\\n            \\\"You have to pay the bail bond\\\"\\n        );\\n        require(\\n            ERC721.balanceOf(_msgSender()) + tokenIds.length / 2 <=\\n                maxDreamersMintPublicSale,\\n            \\\"Your home is to small to welcome so many dreamers\\\"\\n        );\\n        safeMintBatch(_msgSender(), tokenIds);\\n\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                tokenIds,\\n                msg.sender,\\n                msg.value,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n        for (uint256 i = 0; i < tokenIds.length; i += 2) {\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i);\\n            dreamersCandies[tokenId] = uint8(candies[i / 2]);\\n        }\\n\\n        return true;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(uint16(_tokenId)),\\n            \\\"ERC721: URI query for nonexistent token\\\"\\n        );\\n\\n        if (renderingContractAddress == address(0)) {\\n            return \\\"\\\";\\n        }\\n\\n        return renderer.tokenURI(_tokenId, dreamersCandies[_tokenId]);\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = _msgSender().call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa59e2f4cc6631d686aed2a7796962a016b58012425c53e0ae4f028cc9167003b\",\"license\":\"MIT\"},\"contracts/interfaces/ICandyShop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICandyShop {\\n    function burnBatch(\\n        address from,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5149dbb72dc6f0f71424aac31612102da5860753e8e1d973aabe6e448aa2baa6\",\"license\":\"MIT\"},\"contracts/interfaces/IChainRunners.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IChainRunners {\\n    function getDna(uint256 _tokenId) external view returns (uint256);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x2ba2de325b98dfe751091f49497b5cc7c9bfb0d3d0f337b3990dda2cc86d3cef\",\"license\":\"MIT\"},\"contracts/interfaces/IDreamersRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IDreamersRenderer {\\n    function tokenURI(uint256 tokenId, uint8 candy)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x391be7de798d2fb8c8c6dcb46a565d5a02ac7c7c3d1f6c051e112de908ce57f2\",\"license\":\"MIT\"},\"contracts/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token optimized for batch minting\\n * @notice a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data\\n *      We use the uint16 / bytes2 tokenId\\n */\\nabstract contract ERC721 is IERC721, IERC721Metadata, Context, ERC165 {\\n    using Address for address;\\n\\n    // Mapping from address to tokenIds. This is the single source of truth for the data\\n    mapping(address => bytes) internal _tokensByOwner;\\n\\n    // Because mapping in solidity are not real hash tables, one needs to keep track of the keys.\\n    // One address is 20 bytes\\n    bytes internal owners;\\n\\n    // Number of tokens\\n    uint16 public constant MAX_NUMBER_OF_TOKENS = 10_000;\\n\\n    // Bool array to store if the token is minted. To save on gas for token lookup in _tokensByOwner.\\n    bool[MAX_NUMBER_OF_TOKENS] internal tokenExists;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint16 => address) internal _tokenApprovals;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev There are two bytes per tokenId\\n     * @param owner address The address we retrieve the balance for\\n     * @return uint256 The number of tokens owned by the address\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return _tokensByOwner[owner].length / 2;\\n    }\\n\\n    function _balanceOf(uint256 ownerIndex) internal view returns (uint256) {\\n        require(ownerIndex < owners.length, \\\"ERC721: ownerIndex out of bound\\\");\\n        return balanceOf(BytesLib.toAddress(owners, ownerIndex));\\n    }\\n\\n    /// @dev Returns the index of owner in the internal array of owners. Revert if not found.\\n    /// @param owner address The address we retrieve the index for\\n    function getOwnerIndex(address owner) public view returns (uint256) {\\n        uint256 index = 0;\\n        while (index < owners.length) {\\n            if (BytesLib.toAddress(owners, index) == owner) {\\n                return index / 20;\\n            }\\n            index += 20;\\n        }\\n        revert(\\\"ERC721: Owner not found\\\");\\n    }\\n\\n    /// @dev Returns the array of bool telling if a token exists or not.\\n    function getTokenExists()\\n        external\\n        view\\n        returns (bool[MAX_NUMBER_OF_TOKENS] memory)\\n    {\\n        return tokenExists;\\n    }\\n\\n    /**\\n     * @param tokenId uint16 A given token id\\n     * @return bool True if the token exists, false otherwise\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenExists[tokenId];\\n    }\\n\\n    /**\\n     * @dev This is copied from OpenZeppelin's implementation\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev This is the core unsafe implementation of a transfer.\\n    /// @param from address The address which you want to transfer the token from\\n    /// @param fromIndex uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\\n    /// @param to address The address which you want to transfer the token to\\n    /// @param tokenIndex uint256 The index of the token to transfer in the from's token list.\\n    function _transfer(\\n        address from,\\n        uint256 fromIndex,\\n        address to,\\n        uint256 tokenIndex\\n    ) private {\\n        require(\\n            BytesLib.toAddress(owners, fromIndex * 20) == from,\\n            \\\"ERC721: transfer from address is invalid\\\"\\n        );\\n        if (_tokensByOwner[to].length == 0) {\\n            owners = bytes.concat(owners, bytes20(to));\\n        }\\n        bytes memory tokenId = BytesLib.slice(\\n            _tokensByOwner[from],\\n            tokenIndex,\\n            tokenIndex + 2\\n        );\\n        if (_tokensByOwner[from].length == 2) {\\n            owners = bytes.concat(\\n                BytesLib.slice(owners, 0, fromIndex * 20),\\n                BytesLib.slice(\\n                    owners,\\n                    (fromIndex + 1) * 20,\\n                    owners.length - (fromIndex + 1) * 20\\n                )\\n            );\\n            delete _tokensByOwner[from];\\n        } else {\\n            _tokensByOwner[from] = bytes.concat(\\n                BytesLib.slice(_tokensByOwner[from], 0, tokenIndex),\\n                BytesLib.slice(\\n                    _tokensByOwner[from],\\n                    tokenIndex + 2,\\n                    _tokensByOwner[from].length - tokenIndex - 2\\n                )\\n            );\\n        }\\n        _tokensByOwner[to] = bytes.concat(_tokensByOwner[to], tokenId);\\n        emit Transfer(from, to, BytesLib.toUint16(tokenId, 0));\\n    }\\n\\n    /// @dev Transfer token with minimal computing since all the required data to check is given\\n    /// @param from address The address which you want to transfer the token from\\n    /// @param fromIndex uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\\n    /// @param to address The address which you want to transfer the token to\\n    /// @param tokenIndex uint256 The index of the token to transfer in the from's token list.\\n    function safeTransferFrom(\\n        address from,\\n        uint256 fromIndex,\\n        address to,\\n        uint256 tokenIndex\\n    ) external {\\n        require(from != address(0), \\\"ERC721: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721: to cannot be the zero address\\\");\\n        require(\\n            tokenIndex < _tokensByOwner[from].length / 2,\\n            \\\"ERC721: token index out of range\\\"\\n        );\\n        uint16 tokenId = BytesLib.toUint16(\\n            _tokensByOwner[from],\\n            tokenIndex * 2\\n        );\\n        require(\\n            _tokenApprovals[tokenId] == msg.sender || from == msg.sender,\\n            \\\"ERC721: caller is neither approved nor owner\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        _checkOnERC721Received(from, to, tokenId, \\\"\\\");\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev This is the core unsafe implementation of a mint.\\n     * @param to address The receiver of the tokens\\n     * @param tokenIds bytes The token ids to mint\\n     */\\n    function _mintBatch(address to, bytes calldata tokenIds) private {\\n        require(tokenIds.length > 0, \\\"ERC721: cannot mint with no token Ids\\\");\\n        require(\\n            tokenIds.length % 2 == 0,\\n            \\\"ERC721: tokenIds should be bytes of uint16\\\"\\n        );\\n        if (_tokensByOwner[to].length == 0) {\\n            owners = bytes.concat(owners, bytes20(to));\\n        }\\n        for (uint256 i = 0; i < tokenIds.length; i += 2) {\\n            require(\\n                !tokenExists[BytesLib.toUint16(tokenIds, i)],\\n                \\\"ERC721: token already exists\\\"\\n            );\\n            tokenExists[BytesLib.toUint16(tokenIds, i)] = true;\\n            emit Transfer(address(0), to, BytesLib.toUint16(tokenIds, i));\\n        }\\n        _tokensByOwner[to] = bytes.concat(_tokensByOwner[to], tokenIds);\\n    }\\n\\n    /// @dev Add a batch of token Ids given as a bytes array to the sender\\n    /// @param to address minting token to this address\\n    /// @param tokenIds bytes a bytes of tokenIds as bytes2 (uint16)\\n    function safeMintBatch(address to, bytes calldata tokenIds)\\n        internal\\n        virtual\\n    {\\n        _mintBatch(to, tokenIds);\\n        _checkOnERC721Received(\\n            address(0),\\n            to,\\n            BytesLib.toUint16(tokenIds, 0),\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /// @dev Approve \\\"to\\\" to manage token Id\\n    /// @param to address The address which will manage the token Id\\n    /// @param tokenId uint256 The token Id to manage\\n    /// @param tokenIndex uint256 The index of the token in the owner's list\\n    function approve(\\n        address to,\\n        uint256 tokenId,\\n        uint256 tokenIndex\\n    ) external {\\n        if (_tokenApprovals[uint16(tokenId)] != msg.sender) {\\n            // if sender is not approved, they need to be the owner\\n            require(\\n                tokenIndex * 2 < _tokensByOwner[msg.sender].length,\\n                \\\"ERC721: token index out of range\\\"\\n            );\\n            require(\\n                BytesLib.toUint16(_tokensByOwner[msg.sender], tokenIndex * 2) ==\\n                    tokenId,\\n                \\\"ERC721: caller is neither approved nor owner\\\"\\n            );\\n            emit Approval(msg.sender, to, tokenId);\\n        }\\n        _tokenApprovals[uint16(tokenId)] = to;\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        require(_exists(tokenId), \\\"ERC721: token does not exist\\\");\\n        return _tokenApprovals[uint16(tokenId)];\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     * @param operator The address of the operator to add or remove.\\n     * @param _approved Whether to add or remove `operator` as an operator.\\n     */\\n    function setApprovalForAll(address operator, bool _approved)\\n        external\\n        override\\n    {\\n        require(\\n            operator != msg.sender,\\n            \\\"ERC721: cannot approve caller as operator\\\"\\n        );\\n        bytes memory tokens = _tokensByOwner[msg.sender];\\n        for (uint256 i = 0; i < tokens.length; i += 2) {\\n            _tokenApprovals[BytesLib.toUint16(tokens, i)] = _approved\\n                ? operator\\n                : address(0);\\n        }\\n\\n        emit ApprovalForAll(msg.sender, operator, _approved);\\n    }\\n\\n    /**\\n     * @dev Returns whether `operator` is an approved operator for the caller.\\n     * @param owner The address of the owner to check.\\n     * @param operator The address of the operator to check.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        bytes memory tokens = _tokensByOwner[owner];\\n        for (uint256 i = 0; i < tokens.length; i += 2) {\\n            if (_tokenApprovals[BytesLib.toUint16(tokens, i)] != operator) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////////\\n    // Functions that should not be used but here for compatibility with ERC721\\n    // These are gassy.\\n    ///////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override {\\n        require(from != address(0), \\\"ERC721: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721: to cannot be the zero address\\\");\\n        require(\\n            _tokenApprovals[uint16(tokenId)] == msg.sender ||\\n                from == msg.sender,\\n            \\\"ERC721: caller is not approved for all tokens\\\"\\n        );\\n        uint256 tokenIndex = 0;\\n        while (\\n            BytesLib.toUint16(_tokensByOwner[from], tokenIndex) != tokenId &&\\n            tokenIndex < _tokensByOwner[from].length\\n        ) {\\n            tokenIndex += 2;\\n        }\\n        require(\\n            tokenIndex < _tokensByOwner[from].length,\\n            \\\"ERC721: from does not own the token\\\"\\n        );\\n\\n        uint256 fromIndex;\\n        for (fromIndex = 0; fromIndex < owners.length; fromIndex += 20) {\\n            if (BytesLib.toAddress(owners, fromIndex) == from) {\\n                break;\\n            }\\n        }\\n        require(\\n            BytesLib.toAddress(owners, fromIndex) == from,\\n            \\\"ERC721: from is not in owners list\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        safeTransferFrom(from, to, tokenId, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override {\\n        require(from != address(0), \\\"ERC721: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721: to cannot be the zero address\\\");\\n        require(\\n            _tokenApprovals[uint16(tokenId)] == msg.sender ||\\n                from == msg.sender,\\n            \\\"ERC721: caller is not approved for all tokens\\\"\\n        );\\n        uint256 tokenIndex = 0;\\n        while (\\n            BytesLib.toUint16(_tokensByOwner[from], tokenIndex) != tokenId &&\\n            tokenIndex < _tokensByOwner[from].length\\n        ) {\\n            tokenIndex += 2;\\n        }\\n        require(\\n            tokenIndex < _tokensByOwner[from].length,\\n            \\\"ERC721: from does not own the token\\\"\\n        );\\n\\n        uint256 fromIndex;\\n        for (fromIndex = 0; fromIndex < owners.length; fromIndex += 20) {\\n            if (BytesLib.toAddress(owners, fromIndex) == from) {\\n                break;\\n            }\\n        }\\n        require(\\n            BytesLib.toAddress(owners, fromIndex) == from,\\n            \\\"ERC721: from is not in owners list\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev For each owner, we go through all their tokens and check if the sought token is in the list. This lookup\\n     *      is gassy but we do not expect to pay them often as we provide other mean of doing the transfers.\\n     * @param tokenId uint16 A given token id\\n     * @return address The owner of the token, might be 0x0 if not found\\n     */\\n    function _ownerOf(uint256 tokenId) private view returns (address) {\\n        address owner = address(0);\\n        for (uint256 i = 0; i < owners.length; i += 20) {\\n            address currentOwner = BytesLib.toAddress(owners, i);\\n            for (\\n                uint256 j = 0;\\n                j < _tokensByOwner[currentOwner].length;\\n                j += 2\\n            ) {\\n                if (\\n                    BytesLib.toUint16(_tokensByOwner[currentOwner], j) ==\\n                    tokenId\\n                ) {\\n                    owner = currentOwner;\\n                    break;\\n                }\\n            }\\n            if (owner != address(0)) {\\n                break;\\n            }\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good\\n     *      reason to call this function on chain.\\n     * @param tokenId uint265 A given token id\\n     * @return address The owner of the token.\\n     */\\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: owner query for nonexistent token\\\");\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external override {\\n        address owner = _ownerOf(tokenId);\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: approve query for nonexistent token\\\"\\n        );\\n        require(\\n            _tokenApprovals[uint16(tokenId)] == msg.sender ||\\n                owner == msg.sender,\\n            \\\"ERC721: caller is not the owner nor an approved operator for the token\\\"\\n        );\\n        _tokenApprovals[uint16(tokenId)] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x6f3d9161e1a2345edec32e2bd1bd62fb992ad7d9f59ae7cb106d20771dba25e9\",\"license\":\"MIT\"},\"contracts/tokens/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC721} from \\\"./ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token optimized for batch minting with enumerable interface\\n * @notice a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data\\n *      We use the uint16 / bytes2 tokenId\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    function totalSupply() external view override returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < owners.length; i += 20) {\\n            total += _balanceOf(i);\\n        }\\n        return total;\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        override\\n        returns (uint256 tokenId)\\n    {\\n        require(\\n            index * 2 < _tokensByOwner[owner].length,\\n            \\\"ERC721Enumerable: index out of range\\\"\\n        );\\n        return BytesLib.toUint16(_tokensByOwner[owner], index * 2);\\n    }\\n\\n    function tokenByIndex(uint256 index)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 ownerIndex = 0;\\n        uint256 count;\\n        while (count <= index) {\\n            count += _balanceOf(ownerIndex);\\n            ownerIndex += 20;\\n        }\\n        ownerIndex -= 20;\\n        count -= _balanceOf(ownerIndex);\\n        return\\n            BytesLib.toUint16(\\n                _tokensByOwner[BytesLib.toAddress(owners, ownerIndex)],\\n                (index - count) * 2\\n            );\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC721)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xb7d84da5beaff9ce02a65b9f46dd0ea7d5d77462aec310e58ed79788f434cb87\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6080604052610280805460ff60a01b1916600160a01b1790553480156200002557600080fd5b50604051620052f2380380620052f28339810160408190526200004891620002de565b815182908290620000629061013c906020850190620000fb565b508051620000799061013d906020840190620000fb565b5050506200009662000090620000a460201b60201c565b620000a8565b5050600161013f55620003a1565b3390565b61013e80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001099062000370565b90600052602060002090601f0160209004810192826200012d576000855562000178565b82601f106200014857805160ff191683800117855562000178565b8280016001018555821562000178579182015b82811115620001785782518255916020019190600101906200015b565b50620001869291506200018a565b5090565b5b808211156200018657600081556001016200018b565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b0381118282101715620001df57620001df620001a1565b6040525050565b6000620001f260405190565b9050620002008282620001b7565b919050565b60006001600160401b03821115620002215762000221620001a1565b601f19601f83011660200192915050565b60005b838110156200024f57818101518382015260200162000235565b838111156200025f576000848401525b50505050565b60006200027c620002768462000205565b620001e6565b905082815260208101848484011115620002995762000299600080fd5b620002a684828562000232565b509392505050565b600082601f830112620002c457620002c4600080fd5b8151620002d684826020860162000265565b949350505050565b60008060408385031215620002f657620002f6600080fd5b82516001600160401b03811115620003115762000311600080fd5b6200031f85828601620002ae565b602085015190935090506001600160401b03811115620003425762000342600080fd5b6200035085828601620002ae565b9150509250929050565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200038557607f821691505b602082108114156200039b576200039b6200035a565b50919050565b614f4180620003b16000396000f3fe60806040526004361061030c5760003560e01c80636b318e6e1161019a578063b776c8a6116100e1578063d7822c991161008a578063f4b9942411610064578063f4b994241461089b578063f73c814b146108ae578063fac91323146108ce57600080fd5b8063d7822c9914610844578063e985e9c51461085b578063f2fde38b1461087b57600080fd5b8063c87b56dd116100bb578063c87b56dd146107e4578063cb95f06914610804578063d3d6005b1461082457600080fd5b8063b776c8a614610783578063b88d4fde146107a3578063c074f412146107c357600080fd5b806395d89b4111610143578063a22cb4651161011d578063a22cb46514610722578063a8e90b5714610742578063b5fcb3391461076357600080fd5b806395d89b41146106d05780639913fc63146106e55780639c51792a1461070757600080fd5b80638392d804116101745780638392d8041461067057806389c8af83146106915780638da5cb5b146106b157600080fd5b80636b318e6e1461062457806370a082311461063b578063715018a61461065b57600080fd5b806323b872dd1161025e57806342842e0e11610207578063511ed382116101e1578063511ed382146105b6578063633574db146105d75780636352211e1461060457600080fd5b806342842e0e146105565780634f6ccce714610576578063511a96051461059657600080fd5b806333c12e171161023857806333c12e171461050c5780633ccfd60b14610521578063426a84931461053657600080fd5b806323b872dd146104ac57806325174f0e146104cc5780632f745c59146104ec57600080fd5b8063095ea7b3116102c057806318160ddd1161029a57806318160ddd146104555780631a6949e3146104775780631e8858fb1461048c57600080fd5b8063095ea7b3146103f35780630d77c7561461041557806312b40a9f1461043557600080fd5b8063026ae102116102f1578063026ae1021461037157806306fdde03146103a4578063081812fc146103c657600080fd5b806301ffc9a7146103185780630216e3041461034e57600080fd5b3661031357005b600080fd5b34801561032457600080fd5b506103386103333660046136ee565b6108ef565b6040516103459190613719565b60405180910390f35b34801561035a57600080fd5b5061036461271081565b6040516103459190613731565b34801561037d57600080fd5b50610280546103389074010000000000000000000000000000000000000000900460ff1681565b3480156103b057600080fd5b506103b961094b565b604051610345919061379d565b3480156103d257600080fd5b506103e66103e13660046137bf565b6109de565b60405161034591906137fa565b3480156103ff57600080fd5b5061041361040e36600461381c565b610a2f565b005b34801561042157600080fd5b506104136104303660046137bf565b610b20565b34801561044157600080fd5b50610413610450366004613859565b610b51565b34801561046157600080fd5b5061046a610bb7565b6040516103459190613880565b34801561048357600080fd5b50610338610bff565b34801561049857600080fd5b506104136104a7366004613859565b610c1a565b3480156104b857600080fd5b506104136104c736600461388e565b610c75565b3480156104d857600080fd5b5061046a6104e7366004613859565b610fc0565b3480156104f857600080fd5b5061046a61050736600461381c565b61103f565b34801561051857600080fd5b5061041361114f565b34801561052d57600080fd5b506104136111c8565b34801561054257600080fd5b506104136105513660046138de565b61125e565b34801561056257600080fd5b5061041361057136600461388e565b611381565b34801561058257600080fd5b5061046a6105913660046137bf565b6113a1565b3480156105a257600080fd5b506104136105b13660046137bf565b61155c565b3480156105c257600080fd5b5061027f546103e6906001600160a01b031681565b3480156105e357600080fd5b506105f76105f23660046137bf565b61158d565b604051610345919061391c565b34801561061057600080fd5b506103e661061f3660046137bf565b6115b9565b34801561063057600080fd5b5061046a6102825481565b34801561064757600080fd5b5061046a610656366004613859565b6115e9565b34801561066757600080fd5b5061041361161b565b34801561067c57600080fd5b50610142546103e6906001600160a01b031681565b34801561069d57600080fd5b506104136106ac36600461392a565b611652565b3480156106bd57600080fd5b5061013e546001600160a01b03166103e6565b3480156106dc57600080fd5b506103b96117e0565b3480156106f157600080fd5b506106fa6117f0565b60405161034591906139d8565b34801561071357600080fd5b5061046a66b1a2bc2ec5000081565b34801561072e57600080fd5b5061041361073d3660046139fb565b61184d565b34801561074e57600080fd5b50610280546103e6906001600160a01b031681565b34801561076f57600080fd5b5061041361077e366004613859565b6119db565b34801561078f57600080fd5b5061041361079e366004613859565b611a41565b3480156107af57600080fd5b506104136107be366004613b29565b611a9c565b3480156107cf57600080fd5b50610140546103e6906001600160a01b031681565b3480156107f057600080fd5b506103b96107ff3660046137bf565b611ced565b34801561081057600080fd5b5061033861081f366004613c39565b611dec565b34801561083057600080fd5b5061041361083f366004613859565b612131565b34801561085057600080fd5b5061046a6102835481565b34801561086757600080fd5b50610338610876366004613ce6565b612197565b34801561088757600080fd5b50610413610896366004613859565b6122c9565b6103386108a9366004613d19565b612323565b3480156108ba57600080fd5b506104136108c9366004613859565b6124fb565b3480156108da57600080fd5b50610141546103e6906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d63000000000000000000000000000000000000000000000000000000001480610945575061094582612550565b92915050565b606061013c805461095b90613d77565b80601f016020809104026020016040519081016040528092919081815260200182805461098790613d77565b80156109d45780601f106109a9576101008083540402835291602001916109d4565b820191906000526020600020905b8154815290600101906020018083116109b757829003601f168201915b5050505050905090565b60006109e982612633565b610a0e5760405162461bcd60e51b8152600401610a0590613dd0565b60405180910390fd5b5061ffff16600090815261013b60205260409020546001600160a01b031690565b6000610a3a82612665565b90506001600160a01b038116610a625760405162461bcd60e51b8152600401610a0590613e3a565b61ffff8216600090815261013b60205260409020546001600160a01b0316331480610a9557506001600160a01b03811633145b610ab15760405162461bcd60e51b8152600401610a0590613eca565b61ffff8216600090815261013b6020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61013e546001600160a01b03163314610b4b5760405162461bcd60e51b8152600401610a0590613f0a565b61028255565b61013e546001600160a01b03163314610b7c5760405162461bcd60e51b8152600401610a0590613f0a565b61014080546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101438054909216179055565b600080805b60018054610bc990613d77565b9050811015610bf957610bdb81612740565b610be59083613f30565b9150610bf2601482613f30565b9050610bbc565b50919050565b60006102835442118015610c1557506102835415155b905090565b61013e546001600160a01b03163314610c455760405162461bcd60e51b8152600401610a0590613f0a565b610280805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038316610c9b5760405162461bcd60e51b8152600401610a0590613fa0565b6001600160a01b038216610cc15760405162461bcd60e51b8152600401610a0590614008565b61ffff8116600090815261013b60205260409020546001600160a01b0316331480610cf457506001600160a01b03831633145b610d105760405162461bcd60e51b8152600401610a0590614070565b60005b6001600160a01b038416600090815260208190526040902080548391610dc091610d3c90613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6890613d77565b8015610db55780601f10610d8a57610100808354040283529160200191610db5565b820191906000526020600020905b815481529060010190602001808311610d9857829003601f168201915b505050505083612806565b61ffff1614158015610df557506001600160a01b03841660009081526020819052604090208054610df090613d77565b905081105b15610e0c57610e05600282613f30565b9050610d13565b6001600160a01b03841660009081526020819052604090208054610e2f90613d77565b90508110610e4f5760405162461bcd60e51b8152600401610a05906140d8565b60005b60018054610e5f90613d77565b9050811015610f2c57846001600160a01b0316610f0660018054610e8290613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054610eae90613d77565b8015610efb5780601f10610ed057610100808354040283529160200191610efb565b820191906000526020600020905b815481529060010190602001808311610ede57829003601f168201915b50505050508361283c565b6001600160a01b03161415610f1a57610f2c565b610f25601482613f30565b9050610e52565b846001600160a01b0316610f4660018054610e8290613d77565b6001600160a01b031614610f6c5760405162461bcd60e51b8152600401610a0590614140565b610f7885828685612882565b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b6000805b60018054610fd190613d77565b905081101561102757826001600160a01b0316610ff460018054610e8290613d77565b6001600160a01b031614156110155761100e601482614166565b9392505050565b611020601482613f30565b9050610fc4565b60405162461bcd60e51b8152600401610a05906141ac565b6001600160a01b0382166000908152602081905260408120805461106290613d77565b905061106f8360026141bc565b1061108c5760405162461bcd60e51b8152600401610a0590614233565b6001600160a01b0383166000908152602081905260409020805461114491906110b490613d77565b80601f01602080910402602001604051908101604052809291908181526020018280546110e090613d77565b801561112d5780601f106111025761010080835404028352916020019161112d565b820191906000526020600020905b81548152906001019060200180831161111057829003601f168201915b505050505083600261113f91906141bc565b612806565b61ffff169392505050565b61013e546001600160a01b0316331461117a5760405162461bcd60e51b8152600401610a0590613f0a565b61028080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff8116740100000000000000000000000000000000000000009182900460ff1615909102179055565b61013e546001600160a01b031633146111f35760405162461bcd60e51b8152600401610a0590613f0a565b604051600090339047908381818185875af1925050503d8060008114611235576040519150601f19603f3d011682016040523d82523d6000602084013e61123a565b606091505b505090508061125b5760405162461bcd60e51b8152600401610a0590614275565b50565b61ffff8216600090815261013b60205260409020546001600160a01b0316331461134057336000908152602081905260409020805461129c90613d77565b90506112a98260026141bc565b106112c65760405162461bcd60e51b8152600401610a05906142b5565b336000908152602081905260409020805483916112e6916110b490613d77565b61ffff16146113075760405162461bcd60e51b8152600401610a059061431d565b60405182906001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590600090a45b5061ffff16600090815261013b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61139c83838360405180602001604052806000815250611a9c565b505050565b600080805b8381116113d4576113b682612740565b6113c09082613f30565b90506113cd601483613f30565b91506113a6565b6113df60148361432d565b91506113ea82612740565b6113f4908261432d565b90506115506000806114906001805461140c90613d77565b80601f016020809104026020016040519081016040528092919081815260200182805461143890613d77565b80156114855780601f1061145a57610100808354040283529160200191611485565b820191906000526020600020905b81548152906001019060200180831161146857829003601f168201915b50505050508661283c565b6001600160a01b03166001600160a01b0316815260200190815260200160002080546114bb90613d77565b80601f01602080910402602001604051908101604052809291908181526020018280546114e790613d77565b80156115345780601f1061150957610100808354040283529160200191611534565b820191906000526020600020905b81548152906001019060200180831161151757829003601f168201915b50505050508286611545919061432d565b61113f9060026141bc565b61ffff16949350505050565b61013e546001600160a01b031633146115875760405162461bcd60e51b8152600401610a0590613f0a565b61028355565b61014681612710811061159f57600080fd5b60209182820401919006915054906101000a900460ff1681565b60006115c482612633565b6115e05760405162461bcd60e51b8152600401610a059061439c565b61094582612665565b6001600160a01b038116600090815260208190526040812080546002919061161090613d77565b610945929150614166565b61013e546001600160a01b031633146116465760405162461bcd60e51b8152600401610a0590613f0a565b6116506000612f12565b565b6001600160a01b0384166116785760405162461bcd60e51b8152600401610a0590613fa0565b6001600160a01b03821661169e5760405162461bcd60e51b8152600401610a0590614008565b6001600160a01b03841660009081526020819052604090208054600291906116c590613d77565b6116d0929150614166565b81106116ee5760405162461bcd60e51b8152600401610a05906142b5565b6001600160a01b0384166000908152602081905260408120805461171691906110b490613d77565b61ffff8116600090815261013b60205260409020549091506001600160a01b031633148061174c57506001600160a01b03851633145b6117685760405162461bcd60e51b8152600401610a059061431d565b61177485858585612882565b61179385848361ffff1660405180602001604052806000815250612f72565b508061ffff16836001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b606061013d805461095b90613d77565b6117f86135c4565b604080516204e2008101918290529060029061271090826000855b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116118135790505050505050905090565b6001600160a01b0382163314156118765760405162461bcd60e51b8152600401610a0590614404565b336000908152602081905260408120805461189090613d77565b80601f01602080910402602001604051908101604052809291908181526020018280546118bc90613d77565b80156119095780601f106118de57610100808354040283529160200191611909565b820191906000526020600020905b8154815290600101906020018083116118ec57829003601f168201915b5050505050905060005b815181101561198a578261192857600061192a565b835b61013b60006119398585612806565b61ffff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611983600282613f30565b9050611913565b50826001600160a01b0316336001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31846040516119ce9190613719565b60405180910390a3505050565b61013e546001600160a01b03163314611a065760405162461bcd60e51b8152600401610a0590613f0a565b61014180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101448054909216179055565b61013e546001600160a01b03163314611a6c5760405162461bcd60e51b8152600401610a0590613f0a565b61027f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038416611ac25760405162461bcd60e51b8152600401610a0590613fa0565b6001600160a01b038316611ae85760405162461bcd60e51b8152600401610a0590614008565b61ffff8216600090815261013b60205260409020546001600160a01b0316331480611b1b57506001600160a01b03841633145b611b375760405162461bcd60e51b8152600401610a0590614070565b60005b6001600160a01b038516600090815260208190526040902080548491611b6391610d3c90613d77565b61ffff1614158015611b9857506001600160a01b03851660009081526020819052604090208054611b9390613d77565b905081105b15611baf57611ba8600282613f30565b9050611b3a565b6001600160a01b03851660009081526020819052604090208054611bd290613d77565b90508110611bf25760405162461bcd60e51b8152600401610a05906140d8565b60005b60018054611c0290613d77565b9050811015611c4b57856001600160a01b0316611c2560018054610e8290613d77565b6001600160a01b03161415611c3957611c4b565b611c44601482613f30565b9050611bf5565b856001600160a01b0316611c6560018054610e8290613d77565b6001600160a01b031614611c8b5760405162461bcd60e51b8152600401610a0590614140565b611c9786828785612882565b611ca386868686612f72565b5083856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6060611cfc8261ffff16612633565b611d185760405162461bcd60e51b8152600401610a059061446c565b610140546001600160a01b0316611d3d57505060408051602081019091526000815290565b610143546001600160a01b0316635cc518ba83610146816127108110611d6557611d6561447c565b602091828204019190069054906101000a900460ff166040518363ffffffff1660e01b8152600401611d98929190614492565b60006040518083038186803b158015611db057600080fd5b505afa158015611dc4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109459190810190614505565b6000600261013f541415611e125760405162461bcd60e51b8152600401610a0590614572565b600261013f819055611e259085906141bc565b8614611e435760405162461bcd60e51b8152600401610a05906145da565b611e4e3388886130ca565b600087873388884244604051602001611e6d979695949392919061466d565b60405160208183030381529060405280519060200120905060005b858110156120b2576000611ed98a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061113f9250869150600290506141bc565b610145546040517f6352211e00000000000000000000000000000000000000000000000000000000815291925033916001600160a01b0390911690636352211e90611f289085906004016146d2565b60206040518083038186803b158015611f4057600080fd5b505afa158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7891906146eb565b6001600160a01b031614611f9e5760405162461bcd60e51b8152600401610a0590614764565b858583818110611fb057611fb061447c565b90506020020135600114611fd65760405162461bcd60e51b8152600401610a05906147f2565b6004888884818110611fea57611fea61447c565b90506020020135611ffb9190614802565b60fc84612009602086614821565b602081106120195761201961447c565b612027939291901a16614827565b6101468261ffff1661271081106120405761204061447c565b602091828204019190066101000a81548160ff021916908360ff16021790555060208261206d9190614821565b601f141561209f57826040516020016120869190614848565b6040516020818303038152906040528051906020012092505b50806120aa8161485a565b915050611e88565b50610144546001600160a01b0316636b20c45433888888886040518663ffffffff1660e01b81526004016120ea959493929190614881565b600060405180830381600087803b15801561210457600080fd5b505af1158015612118573d6000803e3d6000fd5b505050506001915050600161013f559695505050505050565b61013e546001600160a01b0316331461215c5760405162461bcd60e51b8152600401610a0590613f0a565b61014280546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101458054909216179055565b6102805460009074010000000000000000000000000000000000000000900460ff166121ce576121c78383613139565b9050610945565b61027f546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c4552791906122189086906004016137fa565b60206040518083038186803b15801561223057600080fd5b505afa158015612244573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226891906146eb565b6001600160a01b0316826001600160a01b031614806122955750610280546001600160a01b038381169116145b806122b957506001600160a01b0382166000908152610281602052604090205460ff165b8061100e575061100e8383613139565b61013e546001600160a01b031633146122f45760405162461bcd60e51b8152600401610a0590613f0a565b6001600160a01b03811661231a5760405162461bcd60e51b8152600401610a059061491a565b61125b81612f12565b6000600261013f5414156123495760405162461bcd60e51b8152600401610a0590614572565b600261013f55612357610bff565b6123735760405162461bcd60e51b8152600401610a059061495c565b3466b1a2bc2ec50000612387600285614166565b61239191906141bc565b146123ae5760405162461bcd60e51b8152600401610a059061499e565b610282546123bd600284614166565b6123c6336115e9565b6123d09190613f30565b11156123ee5760405162461bcd60e51b8152600401610a0590614a06565b6123f93384846130ca565b600083833334424460405160200161241696959493929190614a16565b60405160208183030381529060405280519060200120905060005b838110156124e957600061247c86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250612806915050565b90508261248a600284614166565b6020811061249a5761249a61447c565b1a61014661ffff831661271081106124b4576124b461447c565b602091828204019190066101000a81548160ff021916908360ff160217905550506002816124e29190613f30565b9050612431565b506001915050600161013f5592915050565b61013e546001600160a01b031633146125265760405162461bcd60e51b8152600401610a0590613f0a565b6001600160a01b0316600090815261028160205260409020805460ff19811660ff90911615179055565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806125e357507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061094557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610945565b600060028261271081106126495761264961447c565b602081049091015460ff601f9092166101000a90041692915050565b600080805b6001805461267790613d77565b905081101561273957600061269260018054610e8290613d77565b905060005b6001600160a01b038216600090815260208190526040902080546126ba90613d77565b9050811015612710576001600160a01b0382166000908152602081905260409020805487916126ec91610d3c90613d77565b61ffff1614156126fe57819350612710565b612709600282613f30565b9050612697565b506001600160a01b038316156127265750612739565b50612732601482613f30565b905061266a565b5092915050565b60006001805461274f90613d77565b9050821061276f5760405162461bcd60e51b8152600401610a0590614a93565b6109456106566001805461278290613d77565b80601f01602080910402602001604051908101604052809291908181526020018280546127ae90613d77565b80156127fb5780601f106127d0576101008083540402835291602001916127fb565b820191906000526020600020905b8154815290600101906020018083116127de57829003601f168201915b50505050508461283c565b6000612813826002613f30565b835110156128335760405162461bcd60e51b8152600401610a0590614ad5565b50016002015190565b6000612849826014613f30565b835110156128695760405162461bcd60e51b8152600401610a0590614b17565b5001602001516c01000000000000000000000000900490565b836001600160a01b031661292c6001805461289c90613d77565b80601f01602080910402602001604051908101604052809291908181526020018280546128c890613d77565b80156129155780601f106128ea57610100808354040283529160200191612915565b820191906000526020600020905b8154815290600101906020018083116128f857829003601f168201915b505050505085601461292791906141bc565b61283c565b6001600160a01b0316146129525760405162461bcd60e51b8152600401610a0590614b7f565b6001600160a01b0382166000908152602081905260409020805461297590613d77565b151590506129ba5760018260601b604051602001612994929190614c25565b604051602081830303815290604052600190805190602001906129b89291906135e5565b505b6001600160a01b03841660009081526020819052604081208054612a7391906129e290613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054612a0e90613d77565b8015612a5b5780601f10612a3057610100808354040283529160200191612a5b565b820191906000526020600020905b815481529060010190602001808311612a3e57829003601f168201915b505050505083846002612a6e9190613f30565b613244565b6001600160a01b0386166000908152602081905260409020805491925090612a9a90613d77565b905060021415612c7157612b4160018054612ab490613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054612ae090613d77565b8015612b2d5780601f10612b0257610100808354040283529160200191612b2d565b820191906000526020600020905b815481529060010190602001808311612b1057829003601f168201915b50505050506000866014612a6e91906141bc565b612c1560018054612b5190613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054612b7d90613d77565b8015612bca5780601f10612b9f57610100808354040283529160200191612bca565b820191906000526020600020905b815481529060010190602001808311612bad57829003601f168201915b5050505050866001612bdc9190613f30565b612be79060146141bc565b612bf2886001613f30565b612bfd9060146141bc565b60018054612c0a90613d77565b612a6e92915061432d565b604051602001612c26929190614c66565b60405160208183030381529060405260019080519060200190612c4a9291906135e5565b506001600160a01b0385166000908152602081905260408120612c6c91613669565b612e5a565b6001600160a01b03851660009081526020819052604090208054612d1f9190612c9990613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054612cc590613d77565b8015612d125780601f10612ce757610100808354040283529160200191612d12565b820191906000526020600020905b815481529060010190602001808311612cf557829003601f168201915b5050505050600084613244565b6001600160a01b03861660009081526020819052604090208054612e0f9190612d4790613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054612d7390613d77565b8015612dc05780601f10612d9557610100808354040283529160200191612dc0565b820191906000526020600020905b815481529060010190602001808311612da357829003601f168201915b5050505050846002612dd29190613f30565b6001600160a01b038916600090815260208190526040902080546002918891612dfa90613d77565b612e0592915061432d565b612a6e919061432d565b604051602001612e20929190614c66565b60408051601f198184030181529181526001600160a01b038716600090815260208181529190208251612e58939192909101906135e5565b505b6001600160a01b038316600090815260208181526040918290209151612e839291849101614c7c565b60408051601f198184030181529181526001600160a01b038516600090815260208181529190208251612ebb939192909101906135e5565b50612ec7816000612806565b61ffff16836001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b61013e80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b156130be576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290612fcf903390899088908890600401614c86565b602060405180830381600087803b158015612fe957600080fd5b505af1925050508015613019575060408051601f3d908101601f1916820190925261301691810190614cd5565b60015b613073573d808015613047576040519150601f19603f3d011682016040523d82523d6000602084013e61304c565b606091505b50805161306b5760405162461bcd60e51b8152600401610a0590614d4e565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506130c2565b5060015b949350505050565b6130d583838361330c565b61313360008461311a85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250612806915050565b61ffff1660405180602001604052806000815250612f72565b50505050565b6001600160a01b0382166000908152602081905260408120805482919061315f90613d77565b80601f016020809104026020016040519081016040528092919081815260200182805461318b90613d77565b80156131d85780601f106131ad576101008083540402835291602001916131d8565b820191906000526020600020905b8154815290600101906020018083116131bb57829003601f168201915b5050505050905060005b81518110156130be57836001600160a01b031661013b60006132048585612806565b61ffff1681526020810191909152604001600020546001600160a01b03161461323257600092505050610945565b61323d600282613f30565b90506131e2565b60608161325281601f613f30565b10156132705760405162461bcd60e51b8152600401610a0590614d90565b61327a8284613f30565b8451101561329a5760405162461bcd60e51b8152600401610a0590614dd2565b6060821580156132b95760405191506000825260208201604052613303565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156132f25780518352602092830192016132da565b5050858452601f01601f1916604052505b50949350505050565b806133295760405162461bcd60e51b8152600401610a0590614e3a565b613334600282614821565b156133515760405162461bcd60e51b8152600401610a0590614ea2565b6001600160a01b0383166000908152602081905260409020805461337490613d77565b151590506133b95760018360601b604051602001613393929190614c25565b604051602081830303815290604052600190805190602001906133b79291906135e5565b505b60005b8181101561356057600261340784848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250612806915050565b61ffff16612710811061341c5761341c61447c565b602081049091015460ff601f9092166101000a9004161561344f5760405162461bcd60e51b8152600401610a0590614ee4565b6001600261349485858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250612806915050565b61ffff1661271081106134a9576134a961447c565b602091828204019190066101000a81548160ff02191690831515021790555061350983838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250612806915050565b61ffff16846001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613559600282613f30565b90506133bc565b506001600160a01b03831660009081526020818152604091829020915161358c92918591859101614ef4565b60408051601f198184030181529181526001600160a01b038516600090815260208181529190208251613133939192909101906135e5565b604051806204e2000160405280612710906020820280368337509192915050565b8280546135f190613d77565b90600052602060002090601f0160209004810192826136135760008555613659565b82601f1061362c57805160ff1916838001178555613659565b82800160010185558215613659579182015b8281111561365957825182559160200191906001019061363e565b5061366592915061369f565b5090565b50805461367590613d77565b6000825580601f10613685575050565b601f01602090049060005260206000209081019061125b91905b5b8082111561366557600081556001016136a0565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b811461125b57600080fd5b8035610945816136b4565b60006020828403121561370357613703600080fd5b60006130c284846136e3565b8015155b82525050565b60208101610945828461370f565b61ffff8116613713565b602081016109458284613727565b60005b8381101561375a578181015183820152602001613742565b838111156131335750506000910152565b6000613775825190565b80845260208401935061378c81856020860161373f565b601f01601f19169290920192915050565b6020808252810161100e818461376b565b806136d8565b8035610945816137ae565b6000602082840312156137d4576137d4600080fd5b60006130c284846137b4565b60006001600160a01b038216610945565b613713816137e0565b6020810161094582846137f1565b6136d8816137e0565b803561094581613808565b6000806040838503121561383257613832600080fd5b600061383e8585613811565b925050602061384f858286016137b4565b9150509250929050565b60006020828403121561386e5761386e600080fd5b60006130c28484613811565b80613713565b60208101610945828461387a565b6000806000606084860312156138a6576138a6600080fd5b60006138b28686613811565b93505060206138c386828701613811565b92505060406138d4868287016137b4565b9150509250925092565b6000806000606084860312156138f6576138f6600080fd5b60006139028686613811565b93505060206138c3868287016137b4565b60ff8116613713565b602081016109458284613913565b6000806000806080858703121561394357613943600080fd5b600061394f8787613811565b9450506020613960878288016137b4565b935050604061397187828801613811565b9250506060613982878288016137b4565b91505092959194509250565b613998828261370f565b5060200190565b60200190565b6127108160005b828110156139d15781516139c0868261398e565b9550506020820191506001016139ac565b5050505050565b6204e200810161094582846139a5565b8015156136d8565b8035610945816139e8565b60008060408385031215613a1157613a11600080fd5b6000613a1d8585613811565b925050602061384f858286016139f0565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715613a6a57613a6a613a2e565b6040525050565b6000613a7c60405190565b9050613a888282613a44565b919050565b600067ffffffffffffffff821115613aa757613aa7613a2e565b601f19601f83011660200192915050565b82818337506000910152565b6000613ad7613ad284613a8d565b613a71565b905082815260208101848484011115613af257613af2600080fd5b613afd848285613ab8565b509392505050565b600082601f830112613b1957613b19600080fd5b81356130c2848260208601613ac4565b60008060008060808587031215613b4257613b42600080fd5b6000613b4e8787613811565b9450506020613b5f87828801613811565b9350506040613b70878288016137b4565b925050606085013567ffffffffffffffff811115613b9057613b90600080fd5b61398287828801613b05565b60008083601f840112613bb157613bb1600080fd5b50813567ffffffffffffffff811115613bcc57613bcc600080fd5b602083019150836001820283011115613be757613be7600080fd5b9250929050565b60008083601f840112613c0357613c03600080fd5b50813567ffffffffffffffff811115613c1e57613c1e600080fd5b602083019150836020820283011115613be757613be7600080fd5b60008060008060008060608789031215613c5557613c55600080fd5b863567ffffffffffffffff811115613c6f57613c6f600080fd5b613c7b89828a01613b9c565b9650965050602087013567ffffffffffffffff811115613c9d57613c9d600080fd5b613ca989828a01613bee565b9450945050604087013567ffffffffffffffff811115613ccb57613ccb600080fd5b613cd789828a01613bee565b92509250509295509295509295565b60008060408385031215613cfc57613cfc600080fd5b6000613d088585613811565b925050602061384f85828601613811565b60008060208385031215613d2f57613d2f600080fd5b823567ffffffffffffffff811115613d4957613d49600080fd5b613d5585828601613b9c565b92509250509250929050565b634e487b7160e01b600052602260045260246000fd5b600281046001821680613d8b57607f821691505b60208210811415610bf957610bf9613d61565b601c8152602081017f4552433732313a20746f6b656e20646f6573206e6f74206578697374000000008152905061399f565b6020808252810161094581613d9e565b602b8152602081017f4552433732313a20617070726f766520717565727920666f72206e6f6e65786981527f7374656e7420746f6b656e000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161094581613de0565b60468152602081017f4552433732313a2063616c6c6572206973206e6f7420746865206f776e65722081527f6e6f7220616e20617070726f766564206f70657261746f7220666f722074686560208201527f20746f6b656e0000000000000000000000000000000000000000000000000000604082015290505b60600190565b6020808252810161094581613e4a565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815261399f565b6020808252810161094581613eda565b634e487b7160e01b600052601160045260246000fd5b60008219821115613f4357613f43613f1a565b500190565b60278152602081017f4552433732313a2066726f6d2063616e6e6f7420626520746865207a65726f2081527f616464726573730000000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581613f48565b60258152602081017f4552433732313a20746f2063616e6e6f7420626520746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581613fb0565b602d8152602081017f4552433732313a2063616c6c6572206973206e6f7420617070726f766564206681527f6f7220616c6c20746f6b656e730000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614018565b60238152602081017f4552433732313a2066726f6d20646f6573206e6f74206f776e2074686520746f81527f6b656e000000000000000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614080565b60228152602081017f4552433732313a2066726f6d206973206e6f7420696e206f776e657273206c6981527f737400000000000000000000000000000000000000000000000000000000000060208201529050613e34565b60208082528101610945816140e8565b634e487b7160e01b600052601260045260246000fd5b60008261417557614175614150565b500490565b60178152602081017f4552433732313a204f776e6572206e6f7420666f756e640000000000000000008152905061399f565b602080825281016109458161417a565b60008160001904831182151516156141d6576141d6613f1a565b500290565b60248152602081017f455243373231456e756d657261626c653a20696e646578206f7574206f66207281527f616e67650000000000000000000000000000000000000000000000000000000060208201529050613e34565b60208082528101610945816141db565b60118152602081017f5769746864726177616c206661696c65640000000000000000000000000000008152905061399f565b6020808252810161094581614243565b60208082527f4552433732313a20746f6b656e20696e646578206f7574206f662072616e6765910190815261399f565b6020808252810161094581614285565b602c8152602081017f4552433732313a2063616c6c6572206973206e65697468657220617070726f7681527f6564206e6f72206f776e6572000000000000000000000000000000000000000060208201529050613e34565b60208082528101610945816142c5565b60008282101561433f5761433f613f1a565b500390565b60298152602081017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481527f656e7420746f6b656e000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614344565b60298152602081017f4552433732313a2063616e6e6f7420617070726f76652063616c6c657220617381527f206f70657261746f72000000000000000000000000000000000000000000000060208201529050613e34565b60208082528101610945816143ac565b60278152602081017f4552433732313a2055524920717565727920666f72206e6f6e6578697374656e81527f7420746f6b656e0000000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614414565b634e487b7160e01b600052603260045260246000fd5b604081016144a0828561387a565b61100e6020830184613913565b60006144bb613ad284613a8d565b9050828152602081018484840111156144d6576144d6600080fd5b613afd84828561373f565b600082601f8301126144f5576144f5600080fd5b81516130c28482602086016144ad565b60006020828403121561451a5761451a600080fd5b815167ffffffffffffffff81111561453457614534600080fd5b6130c2848285016144e1565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c008152905061399f565b6020808252810161094581614540565b60288152602081017f456163682072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e647900000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614582565b613f43828483613ab8565b60006109458260601b90565b6000610945826145f5565b613713614618826137e0565b614601565b825b925060007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561465357614653600080fd5b602083029250614664838584613ab8565b50500190565b90565b61467881888a6145ea565b9050614684818761460c565b60140161469281858761461d565b905061469e818461387a565b6020016146ab818361387a565b602001979650505050505050565b600061094561466a61ffff841681565b613713816146b9565b6020810161094582846146c9565b805161094581613808565b60006020828403121561470057614700600080fd5b60006130c284846146e0565b60378152602081017f596f752063616e6e6f7420676976652063616e6469657320746f20612072756e81527f6e6572207468617420796f7520646f206e6f74206f776e00000000000000000060208201529050613e34565b602080825281016109458161470c565b604f8152602081017f596f75722072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e64792c2077686f206b6e6f7773207768617420636f756c64206860208201527f617070656e206f7468657277697365000000000000000000000000000000000060408201529050613ec4565b6020808252810161094581614774565b60ff9081169082165b915060008261481c5761481c614150565b500690565b8161480b565b60ff8116905060ff8216915060008260ff03821115613f4357613f43613f1a565b614852818361387a565b602001919050565b600060001982141561486e5761486e613f1a565b5060010190565b8183526020830161461f565b6060810161488f82886137f1565b81810360208301526148a2818688614875565b905081810360408301526148b7818486614875565b979650505050505050565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050613e34565b60208082528101610945816148c2565b60148152602081017f5075626c69632073616c65206e6f74206f70656e0000000000000000000000008152905061399f565b602080825281016109458161492a565b601d8152602081017f596f75206861766520746f2070617920746865206261696c20626f6e640000008152905061399f565b602080825281016109458161496c565b60318152602081017f596f757220686f6d6520697320746f20736d616c6c20746f2077656c636f6d6581527f20736f206d616e7920647265616d65727300000000000000000000000000000060208201529050613e34565b60208082528101610945816149ae565b614a218187896145ea565b9050614a2d818661460c565b601401614a3a818561387a565b602001614a47818461387a565b602001614a54818361387a565b6020019695505050505050565b601f8152602081017f4552433732313a206f776e6572496e646578206f7574206f6620626f756e64008152905061399f565b6020808252810161094581614a61565b60148152602081017f746f55696e7431365f6f75744f66426f756e64730000000000000000000000008152905061399f565b6020808252810161094581614aa3565b60158152602081017f746f416464726573735f6f75744f66426f756e647300000000000000000000008152905061399f565b6020808252810161094581614ae5565b60288152602081017f4552433732313a207472616e736665722066726f6d206164647265737320697381527f20696e76616c696400000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614b27565b60008154614b9c81613d77565b600182168015614bb35760018114614bc457614bf4565b60ff19831686528186019350614bf4565b60008581526020902060005b83811015614bec57815488820152600190910190602001614bd0565b505081860193505b50505092915050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116613713565b614c2f8184614b8f565b9050614c3b8183614bfd565b60140192915050565b6000614c4e825190565b614c5c81856020860161373f565b9290920192915050565b614c708184614c44565b905061100e8183614c44565b614c708184614b8f565b60808101614c9482876137f1565b614ca160208301866137f1565b614cae604083018561387a565b8181036060830152614cc0818461376b565b9695505050505050565b8051610945816136b4565b600060208284031215614cea57614cea600080fd5b60006130c28484614cca565b60328152602081017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e746572000000000000000000000000000060208201529050613e34565b6020808252810161094581614cf6565b600e8152602081017f736c6963655f6f766572666c6f770000000000000000000000000000000000008152905061399f565b6020808252810161094581614d5e565b60118152602081017f736c6963655f6f75744f66426f756e64730000000000000000000000000000008152905061399f565b6020808252810161094581614da0565b60258152602081017f4552433732313a2063616e6e6f74206d696e742077697468206e6f20746f6b6581527f6e2049647300000000000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614de2565b602a8152602081017f4552433732313a20746f6b656e4964732073686f756c6420626520627974657381527f206f662075696e7431360000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614e4a565b601c8152602081017f4552433732313a20746f6b656e20616c726561647920657869737473000000008152905061399f565b6020808252810161094581614eb2565b614efe8185614b8f565b90506130c28183856145ea56fea2646970667358221220d320dca15bdf6d1ceb2239df904ec5fbabe303a1da219e98b1c12c9e9d3fe5c264736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061030c5760003560e01c80636b318e6e1161019a578063b776c8a6116100e1578063d7822c991161008a578063f4b9942411610064578063f4b994241461089b578063f73c814b146108ae578063fac91323146108ce57600080fd5b8063d7822c9914610844578063e985e9c51461085b578063f2fde38b1461087b57600080fd5b8063c87b56dd116100bb578063c87b56dd146107e4578063cb95f06914610804578063d3d6005b1461082457600080fd5b8063b776c8a614610783578063b88d4fde146107a3578063c074f412146107c357600080fd5b806395d89b4111610143578063a22cb4651161011d578063a22cb46514610722578063a8e90b5714610742578063b5fcb3391461076357600080fd5b806395d89b41146106d05780639913fc63146106e55780639c51792a1461070757600080fd5b80638392d804116101745780638392d8041461067057806389c8af83146106915780638da5cb5b146106b157600080fd5b80636b318e6e1461062457806370a082311461063b578063715018a61461065b57600080fd5b806323b872dd1161025e57806342842e0e11610207578063511ed382116101e1578063511ed382146105b6578063633574db146105d75780636352211e1461060457600080fd5b806342842e0e146105565780634f6ccce714610576578063511a96051461059657600080fd5b806333c12e171161023857806333c12e171461050c5780633ccfd60b14610521578063426a84931461053657600080fd5b806323b872dd146104ac57806325174f0e146104cc5780632f745c59146104ec57600080fd5b8063095ea7b3116102c057806318160ddd1161029a57806318160ddd146104555780631a6949e3146104775780631e8858fb1461048c57600080fd5b8063095ea7b3146103f35780630d77c7561461041557806312b40a9f1461043557600080fd5b8063026ae102116102f1578063026ae1021461037157806306fdde03146103a4578063081812fc146103c657600080fd5b806301ffc9a7146103185780630216e3041461034e57600080fd5b3661031357005b600080fd5b34801561032457600080fd5b506103386103333660046136ee565b6108ef565b6040516103459190613719565b60405180910390f35b34801561035a57600080fd5b5061036461271081565b6040516103459190613731565b34801561037d57600080fd5b50610280546103389074010000000000000000000000000000000000000000900460ff1681565b3480156103b057600080fd5b506103b961094b565b604051610345919061379d565b3480156103d257600080fd5b506103e66103e13660046137bf565b6109de565b60405161034591906137fa565b3480156103ff57600080fd5b5061041361040e36600461381c565b610a2f565b005b34801561042157600080fd5b506104136104303660046137bf565b610b20565b34801561044157600080fd5b50610413610450366004613859565b610b51565b34801561046157600080fd5b5061046a610bb7565b6040516103459190613880565b34801561048357600080fd5b50610338610bff565b34801561049857600080fd5b506104136104a7366004613859565b610c1a565b3480156104b857600080fd5b506104136104c736600461388e565b610c75565b3480156104d857600080fd5b5061046a6104e7366004613859565b610fc0565b3480156104f857600080fd5b5061046a61050736600461381c565b61103f565b34801561051857600080fd5b5061041361114f565b34801561052d57600080fd5b506104136111c8565b34801561054257600080fd5b506104136105513660046138de565b61125e565b34801561056257600080fd5b5061041361057136600461388e565b611381565b34801561058257600080fd5b5061046a6105913660046137bf565b6113a1565b3480156105a257600080fd5b506104136105b13660046137bf565b61155c565b3480156105c257600080fd5b5061027f546103e6906001600160a01b031681565b3480156105e357600080fd5b506105f76105f23660046137bf565b61158d565b604051610345919061391c565b34801561061057600080fd5b506103e661061f3660046137bf565b6115b9565b34801561063057600080fd5b5061046a6102825481565b34801561064757600080fd5b5061046a610656366004613859565b6115e9565b34801561066757600080fd5b5061041361161b565b34801561067c57600080fd5b50610142546103e6906001600160a01b031681565b34801561069d57600080fd5b506104136106ac36600461392a565b611652565b3480156106bd57600080fd5b5061013e546001600160a01b03166103e6565b3480156106dc57600080fd5b506103b96117e0565b3480156106f157600080fd5b506106fa6117f0565b60405161034591906139d8565b34801561071357600080fd5b5061046a66b1a2bc2ec5000081565b34801561072e57600080fd5b5061041361073d3660046139fb565b61184d565b34801561074e57600080fd5b50610280546103e6906001600160a01b031681565b34801561076f57600080fd5b5061041361077e366004613859565b6119db565b34801561078f57600080fd5b5061041361079e366004613859565b611a41565b3480156107af57600080fd5b506104136107be366004613b29565b611a9c565b3480156107cf57600080fd5b50610140546103e6906001600160a01b031681565b3480156107f057600080fd5b506103b96107ff3660046137bf565b611ced565b34801561081057600080fd5b5061033861081f366004613c39565b611dec565b34801561083057600080fd5b5061041361083f366004613859565b612131565b34801561085057600080fd5b5061046a6102835481565b34801561086757600080fd5b50610338610876366004613ce6565b612197565b34801561088757600080fd5b50610413610896366004613859565b6122c9565b6103386108a9366004613d19565b612323565b3480156108ba57600080fd5b506104136108c9366004613859565b6124fb565b3480156108da57600080fd5b50610141546103e6906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d63000000000000000000000000000000000000000000000000000000001480610945575061094582612550565b92915050565b606061013c805461095b90613d77565b80601f016020809104026020016040519081016040528092919081815260200182805461098790613d77565b80156109d45780601f106109a9576101008083540402835291602001916109d4565b820191906000526020600020905b8154815290600101906020018083116109b757829003601f168201915b5050505050905090565b60006109e982612633565b610a0e5760405162461bcd60e51b8152600401610a0590613dd0565b60405180910390fd5b5061ffff16600090815261013b60205260409020546001600160a01b031690565b6000610a3a82612665565b90506001600160a01b038116610a625760405162461bcd60e51b8152600401610a0590613e3a565b61ffff8216600090815261013b60205260409020546001600160a01b0316331480610a9557506001600160a01b03811633145b610ab15760405162461bcd60e51b8152600401610a0590613eca565b61ffff8216600090815261013b6020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61013e546001600160a01b03163314610b4b5760405162461bcd60e51b8152600401610a0590613f0a565b61028255565b61013e546001600160a01b03163314610b7c5760405162461bcd60e51b8152600401610a0590613f0a565b61014080546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101438054909216179055565b600080805b60018054610bc990613d77565b9050811015610bf957610bdb81612740565b610be59083613f30565b9150610bf2601482613f30565b9050610bbc565b50919050565b60006102835442118015610c1557506102835415155b905090565b61013e546001600160a01b03163314610c455760405162461bcd60e51b8152600401610a0590613f0a565b610280805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038316610c9b5760405162461bcd60e51b8152600401610a0590613fa0565b6001600160a01b038216610cc15760405162461bcd60e51b8152600401610a0590614008565b61ffff8116600090815261013b60205260409020546001600160a01b0316331480610cf457506001600160a01b03831633145b610d105760405162461bcd60e51b8152600401610a0590614070565b60005b6001600160a01b038416600090815260208190526040902080548391610dc091610d3c90613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6890613d77565b8015610db55780601f10610d8a57610100808354040283529160200191610db5565b820191906000526020600020905b815481529060010190602001808311610d9857829003601f168201915b505050505083612806565b61ffff1614158015610df557506001600160a01b03841660009081526020819052604090208054610df090613d77565b905081105b15610e0c57610e05600282613f30565b9050610d13565b6001600160a01b03841660009081526020819052604090208054610e2f90613d77565b90508110610e4f5760405162461bcd60e51b8152600401610a05906140d8565b60005b60018054610e5f90613d77565b9050811015610f2c57846001600160a01b0316610f0660018054610e8290613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054610eae90613d77565b8015610efb5780601f10610ed057610100808354040283529160200191610efb565b820191906000526020600020905b815481529060010190602001808311610ede57829003601f168201915b50505050508361283c565b6001600160a01b03161415610f1a57610f2c565b610f25601482613f30565b9050610e52565b846001600160a01b0316610f4660018054610e8290613d77565b6001600160a01b031614610f6c5760405162461bcd60e51b8152600401610a0590614140565b610f7885828685612882565b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b6000805b60018054610fd190613d77565b905081101561102757826001600160a01b0316610ff460018054610e8290613d77565b6001600160a01b031614156110155761100e601482614166565b9392505050565b611020601482613f30565b9050610fc4565b60405162461bcd60e51b8152600401610a05906141ac565b6001600160a01b0382166000908152602081905260408120805461106290613d77565b905061106f8360026141bc565b1061108c5760405162461bcd60e51b8152600401610a0590614233565b6001600160a01b0383166000908152602081905260409020805461114491906110b490613d77565b80601f01602080910402602001604051908101604052809291908181526020018280546110e090613d77565b801561112d5780601f106111025761010080835404028352916020019161112d565b820191906000526020600020905b81548152906001019060200180831161111057829003601f168201915b505050505083600261113f91906141bc565b612806565b61ffff169392505050565b61013e546001600160a01b0316331461117a5760405162461bcd60e51b8152600401610a0590613f0a565b61028080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff8116740100000000000000000000000000000000000000009182900460ff1615909102179055565b61013e546001600160a01b031633146111f35760405162461bcd60e51b8152600401610a0590613f0a565b604051600090339047908381818185875af1925050503d8060008114611235576040519150601f19603f3d011682016040523d82523d6000602084013e61123a565b606091505b505090508061125b5760405162461bcd60e51b8152600401610a0590614275565b50565b61ffff8216600090815261013b60205260409020546001600160a01b0316331461134057336000908152602081905260409020805461129c90613d77565b90506112a98260026141bc565b106112c65760405162461bcd60e51b8152600401610a05906142b5565b336000908152602081905260409020805483916112e6916110b490613d77565b61ffff16146113075760405162461bcd60e51b8152600401610a059061431d565b60405182906001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590600090a45b5061ffff16600090815261013b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61139c83838360405180602001604052806000815250611a9c565b505050565b600080805b8381116113d4576113b682612740565b6113c09082613f30565b90506113cd601483613f30565b91506113a6565b6113df60148361432d565b91506113ea82612740565b6113f4908261432d565b90506115506000806114906001805461140c90613d77565b80601f016020809104026020016040519081016040528092919081815260200182805461143890613d77565b80156114855780601f1061145a57610100808354040283529160200191611485565b820191906000526020600020905b81548152906001019060200180831161146857829003601f168201915b50505050508661283c565b6001600160a01b03166001600160a01b0316815260200190815260200160002080546114bb90613d77565b80601f01602080910402602001604051908101604052809291908181526020018280546114e790613d77565b80156115345780601f1061150957610100808354040283529160200191611534565b820191906000526020600020905b81548152906001019060200180831161151757829003601f168201915b50505050508286611545919061432d565b61113f9060026141bc565b61ffff16949350505050565b61013e546001600160a01b031633146115875760405162461bcd60e51b8152600401610a0590613f0a565b61028355565b61014681612710811061159f57600080fd5b60209182820401919006915054906101000a900460ff1681565b60006115c482612633565b6115e05760405162461bcd60e51b8152600401610a059061439c565b61094582612665565b6001600160a01b038116600090815260208190526040812080546002919061161090613d77565b610945929150614166565b61013e546001600160a01b031633146116465760405162461bcd60e51b8152600401610a0590613f0a565b6116506000612f12565b565b6001600160a01b0384166116785760405162461bcd60e51b8152600401610a0590613fa0565b6001600160a01b03821661169e5760405162461bcd60e51b8152600401610a0590614008565b6001600160a01b03841660009081526020819052604090208054600291906116c590613d77565b6116d0929150614166565b81106116ee5760405162461bcd60e51b8152600401610a05906142b5565b6001600160a01b0384166000908152602081905260408120805461171691906110b490613d77565b61ffff8116600090815261013b60205260409020549091506001600160a01b031633148061174c57506001600160a01b03851633145b6117685760405162461bcd60e51b8152600401610a059061431d565b61177485858585612882565b61179385848361ffff1660405180602001604052806000815250612f72565b508061ffff16836001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b606061013d805461095b90613d77565b6117f86135c4565b604080516204e2008101918290529060029061271090826000855b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116118135790505050505050905090565b6001600160a01b0382163314156118765760405162461bcd60e51b8152600401610a0590614404565b336000908152602081905260408120805461189090613d77565b80601f01602080910402602001604051908101604052809291908181526020018280546118bc90613d77565b80156119095780601f106118de57610100808354040283529160200191611909565b820191906000526020600020905b8154815290600101906020018083116118ec57829003601f168201915b5050505050905060005b815181101561198a578261192857600061192a565b835b61013b60006119398585612806565b61ffff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611983600282613f30565b9050611913565b50826001600160a01b0316336001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31846040516119ce9190613719565b60405180910390a3505050565b61013e546001600160a01b03163314611a065760405162461bcd60e51b8152600401610a0590613f0a565b61014180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101448054909216179055565b61013e546001600160a01b03163314611a6c5760405162461bcd60e51b8152600401610a0590613f0a565b61027f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038416611ac25760405162461bcd60e51b8152600401610a0590613fa0565b6001600160a01b038316611ae85760405162461bcd60e51b8152600401610a0590614008565b61ffff8216600090815261013b60205260409020546001600160a01b0316331480611b1b57506001600160a01b03841633145b611b375760405162461bcd60e51b8152600401610a0590614070565b60005b6001600160a01b038516600090815260208190526040902080548491611b6391610d3c90613d77565b61ffff1614158015611b9857506001600160a01b03851660009081526020819052604090208054611b9390613d77565b905081105b15611baf57611ba8600282613f30565b9050611b3a565b6001600160a01b03851660009081526020819052604090208054611bd290613d77565b90508110611bf25760405162461bcd60e51b8152600401610a05906140d8565b60005b60018054611c0290613d77565b9050811015611c4b57856001600160a01b0316611c2560018054610e8290613d77565b6001600160a01b03161415611c3957611c4b565b611c44601482613f30565b9050611bf5565b856001600160a01b0316611c6560018054610e8290613d77565b6001600160a01b031614611c8b5760405162461bcd60e51b8152600401610a0590614140565b611c9786828785612882565b611ca386868686612f72565b5083856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6060611cfc8261ffff16612633565b611d185760405162461bcd60e51b8152600401610a059061446c565b610140546001600160a01b0316611d3d57505060408051602081019091526000815290565b610143546001600160a01b0316635cc518ba83610146816127108110611d6557611d6561447c565b602091828204019190069054906101000a900460ff166040518363ffffffff1660e01b8152600401611d98929190614492565b60006040518083038186803b158015611db057600080fd5b505afa158015611dc4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109459190810190614505565b6000600261013f541415611e125760405162461bcd60e51b8152600401610a0590614572565b600261013f819055611e259085906141bc565b8614611e435760405162461bcd60e51b8152600401610a05906145da565b611e4e3388886130ca565b600087873388884244604051602001611e6d979695949392919061466d565b60405160208183030381529060405280519060200120905060005b858110156120b2576000611ed98a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061113f9250869150600290506141bc565b610145546040517f6352211e00000000000000000000000000000000000000000000000000000000815291925033916001600160a01b0390911690636352211e90611f289085906004016146d2565b60206040518083038186803b158015611f4057600080fd5b505afa158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7891906146eb565b6001600160a01b031614611f9e5760405162461bcd60e51b8152600401610a0590614764565b858583818110611fb057611fb061447c565b90506020020135600114611fd65760405162461bcd60e51b8152600401610a05906147f2565b6004888884818110611fea57611fea61447c565b90506020020135611ffb9190614802565b60fc84612009602086614821565b602081106120195761201961447c565b612027939291901a16614827565b6101468261ffff1661271081106120405761204061447c565b602091828204019190066101000a81548160ff021916908360ff16021790555060208261206d9190614821565b601f141561209f57826040516020016120869190614848565b6040516020818303038152906040528051906020012092505b50806120aa8161485a565b915050611e88565b50610144546001600160a01b0316636b20c45433888888886040518663ffffffff1660e01b81526004016120ea959493929190614881565b600060405180830381600087803b15801561210457600080fd5b505af1158015612118573d6000803e3d6000fd5b505050506001915050600161013f559695505050505050565b61013e546001600160a01b0316331461215c5760405162461bcd60e51b8152600401610a0590613f0a565b61014280546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101458054909216179055565b6102805460009074010000000000000000000000000000000000000000900460ff166121ce576121c78383613139565b9050610945565b61027f546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c4552791906122189086906004016137fa565b60206040518083038186803b15801561223057600080fd5b505afa158015612244573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226891906146eb565b6001600160a01b0316826001600160a01b031614806122955750610280546001600160a01b038381169116145b806122b957506001600160a01b0382166000908152610281602052604090205460ff165b8061100e575061100e8383613139565b61013e546001600160a01b031633146122f45760405162461bcd60e51b8152600401610a0590613f0a565b6001600160a01b03811661231a5760405162461bcd60e51b8152600401610a059061491a565b61125b81612f12565b6000600261013f5414156123495760405162461bcd60e51b8152600401610a0590614572565b600261013f55612357610bff565b6123735760405162461bcd60e51b8152600401610a059061495c565b3466b1a2bc2ec50000612387600285614166565b61239191906141bc565b146123ae5760405162461bcd60e51b8152600401610a059061499e565b610282546123bd600284614166565b6123c6336115e9565b6123d09190613f30565b11156123ee5760405162461bcd60e51b8152600401610a0590614a06565b6123f93384846130ca565b600083833334424460405160200161241696959493929190614a16565b60405160208183030381529060405280519060200120905060005b838110156124e957600061247c86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250612806915050565b90508261248a600284614166565b6020811061249a5761249a61447c565b1a61014661ffff831661271081106124b4576124b461447c565b602091828204019190066101000a81548160ff021916908360ff160217905550506002816124e29190613f30565b9050612431565b506001915050600161013f5592915050565b61013e546001600160a01b031633146125265760405162461bcd60e51b8152600401610a0590613f0a565b6001600160a01b0316600090815261028160205260409020805460ff19811660ff90911615179055565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806125e357507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061094557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610945565b600060028261271081106126495761264961447c565b602081049091015460ff601f9092166101000a90041692915050565b600080805b6001805461267790613d77565b905081101561273957600061269260018054610e8290613d77565b905060005b6001600160a01b038216600090815260208190526040902080546126ba90613d77565b9050811015612710576001600160a01b0382166000908152602081905260409020805487916126ec91610d3c90613d77565b61ffff1614156126fe57819350612710565b612709600282613f30565b9050612697565b506001600160a01b038316156127265750612739565b50612732601482613f30565b905061266a565b5092915050565b60006001805461274f90613d77565b9050821061276f5760405162461bcd60e51b8152600401610a0590614a93565b6109456106566001805461278290613d77565b80601f01602080910402602001604051908101604052809291908181526020018280546127ae90613d77565b80156127fb5780601f106127d0576101008083540402835291602001916127fb565b820191906000526020600020905b8154815290600101906020018083116127de57829003601f168201915b50505050508461283c565b6000612813826002613f30565b835110156128335760405162461bcd60e51b8152600401610a0590614ad5565b50016002015190565b6000612849826014613f30565b835110156128695760405162461bcd60e51b8152600401610a0590614b17565b5001602001516c01000000000000000000000000900490565b836001600160a01b031661292c6001805461289c90613d77565b80601f01602080910402602001604051908101604052809291908181526020018280546128c890613d77565b80156129155780601f106128ea57610100808354040283529160200191612915565b820191906000526020600020905b8154815290600101906020018083116128f857829003601f168201915b505050505085601461292791906141bc565b61283c565b6001600160a01b0316146129525760405162461bcd60e51b8152600401610a0590614b7f565b6001600160a01b0382166000908152602081905260409020805461297590613d77565b151590506129ba5760018260601b604051602001612994929190614c25565b604051602081830303815290604052600190805190602001906129b89291906135e5565b505b6001600160a01b03841660009081526020819052604081208054612a7391906129e290613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054612a0e90613d77565b8015612a5b5780601f10612a3057610100808354040283529160200191612a5b565b820191906000526020600020905b815481529060010190602001808311612a3e57829003601f168201915b505050505083846002612a6e9190613f30565b613244565b6001600160a01b0386166000908152602081905260409020805491925090612a9a90613d77565b905060021415612c7157612b4160018054612ab490613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054612ae090613d77565b8015612b2d5780601f10612b0257610100808354040283529160200191612b2d565b820191906000526020600020905b815481529060010190602001808311612b1057829003601f168201915b50505050506000866014612a6e91906141bc565b612c1560018054612b5190613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054612b7d90613d77565b8015612bca5780601f10612b9f57610100808354040283529160200191612bca565b820191906000526020600020905b815481529060010190602001808311612bad57829003601f168201915b5050505050866001612bdc9190613f30565b612be79060146141bc565b612bf2886001613f30565b612bfd9060146141bc565b60018054612c0a90613d77565b612a6e92915061432d565b604051602001612c26929190614c66565b60405160208183030381529060405260019080519060200190612c4a9291906135e5565b506001600160a01b0385166000908152602081905260408120612c6c91613669565b612e5a565b6001600160a01b03851660009081526020819052604090208054612d1f9190612c9990613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054612cc590613d77565b8015612d125780601f10612ce757610100808354040283529160200191612d12565b820191906000526020600020905b815481529060010190602001808311612cf557829003601f168201915b5050505050600084613244565b6001600160a01b03861660009081526020819052604090208054612e0f9190612d4790613d77565b80601f0160208091040260200160405190810160405280929190818152602001828054612d7390613d77565b8015612dc05780601f10612d9557610100808354040283529160200191612dc0565b820191906000526020600020905b815481529060010190602001808311612da357829003601f168201915b5050505050846002612dd29190613f30565b6001600160a01b038916600090815260208190526040902080546002918891612dfa90613d77565b612e0592915061432d565b612a6e919061432d565b604051602001612e20929190614c66565b60408051601f198184030181529181526001600160a01b038716600090815260208181529190208251612e58939192909101906135e5565b505b6001600160a01b038316600090815260208181526040918290209151612e839291849101614c7c565b60408051601f198184030181529181526001600160a01b038516600090815260208181529190208251612ebb939192909101906135e5565b50612ec7816000612806565b61ffff16836001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b61013e80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b156130be576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290612fcf903390899088908890600401614c86565b602060405180830381600087803b158015612fe957600080fd5b505af1925050508015613019575060408051601f3d908101601f1916820190925261301691810190614cd5565b60015b613073573d808015613047576040519150601f19603f3d011682016040523d82523d6000602084013e61304c565b606091505b50805161306b5760405162461bcd60e51b8152600401610a0590614d4e565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506130c2565b5060015b949350505050565b6130d583838361330c565b61313360008461311a85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250612806915050565b61ffff1660405180602001604052806000815250612f72565b50505050565b6001600160a01b0382166000908152602081905260408120805482919061315f90613d77565b80601f016020809104026020016040519081016040528092919081815260200182805461318b90613d77565b80156131d85780601f106131ad576101008083540402835291602001916131d8565b820191906000526020600020905b8154815290600101906020018083116131bb57829003601f168201915b5050505050905060005b81518110156130be57836001600160a01b031661013b60006132048585612806565b61ffff1681526020810191909152604001600020546001600160a01b03161461323257600092505050610945565b61323d600282613f30565b90506131e2565b60608161325281601f613f30565b10156132705760405162461bcd60e51b8152600401610a0590614d90565b61327a8284613f30565b8451101561329a5760405162461bcd60e51b8152600401610a0590614dd2565b6060821580156132b95760405191506000825260208201604052613303565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156132f25780518352602092830192016132da565b5050858452601f01601f1916604052505b50949350505050565b806133295760405162461bcd60e51b8152600401610a0590614e3a565b613334600282614821565b156133515760405162461bcd60e51b8152600401610a0590614ea2565b6001600160a01b0383166000908152602081905260409020805461337490613d77565b151590506133b95760018360601b604051602001613393929190614c25565b604051602081830303815290604052600190805190602001906133b79291906135e5565b505b60005b8181101561356057600261340784848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250612806915050565b61ffff16612710811061341c5761341c61447c565b602081049091015460ff601f9092166101000a9004161561344f5760405162461bcd60e51b8152600401610a0590614ee4565b6001600261349485858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250612806915050565b61ffff1661271081106134a9576134a961447c565b602091828204019190066101000a81548160ff02191690831515021790555061350983838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250612806915050565b61ffff16846001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613559600282613f30565b90506133bc565b506001600160a01b03831660009081526020818152604091829020915161358c92918591859101614ef4565b60408051601f198184030181529181526001600160a01b038516600090815260208181529190208251613133939192909101906135e5565b604051806204e2000160405280612710906020820280368337509192915050565b8280546135f190613d77565b90600052602060002090601f0160209004810192826136135760008555613659565b82601f1061362c57805160ff1916838001178555613659565b82800160010185558215613659579182015b8281111561365957825182559160200191906001019061363e565b5061366592915061369f565b5090565b50805461367590613d77565b6000825580601f10613685575050565b601f01602090049060005260206000209081019061125b91905b5b8082111561366557600081556001016136a0565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b811461125b57600080fd5b8035610945816136b4565b60006020828403121561370357613703600080fd5b60006130c284846136e3565b8015155b82525050565b60208101610945828461370f565b61ffff8116613713565b602081016109458284613727565b60005b8381101561375a578181015183820152602001613742565b838111156131335750506000910152565b6000613775825190565b80845260208401935061378c81856020860161373f565b601f01601f19169290920192915050565b6020808252810161100e818461376b565b806136d8565b8035610945816137ae565b6000602082840312156137d4576137d4600080fd5b60006130c284846137b4565b60006001600160a01b038216610945565b613713816137e0565b6020810161094582846137f1565b6136d8816137e0565b803561094581613808565b6000806040838503121561383257613832600080fd5b600061383e8585613811565b925050602061384f858286016137b4565b9150509250929050565b60006020828403121561386e5761386e600080fd5b60006130c28484613811565b80613713565b60208101610945828461387a565b6000806000606084860312156138a6576138a6600080fd5b60006138b28686613811565b93505060206138c386828701613811565b92505060406138d4868287016137b4565b9150509250925092565b6000806000606084860312156138f6576138f6600080fd5b60006139028686613811565b93505060206138c3868287016137b4565b60ff8116613713565b602081016109458284613913565b6000806000806080858703121561394357613943600080fd5b600061394f8787613811565b9450506020613960878288016137b4565b935050604061397187828801613811565b9250506060613982878288016137b4565b91505092959194509250565b613998828261370f565b5060200190565b60200190565b6127108160005b828110156139d15781516139c0868261398e565b9550506020820191506001016139ac565b5050505050565b6204e200810161094582846139a5565b8015156136d8565b8035610945816139e8565b60008060408385031215613a1157613a11600080fd5b6000613a1d8585613811565b925050602061384f858286016139f0565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715613a6a57613a6a613a2e565b6040525050565b6000613a7c60405190565b9050613a888282613a44565b919050565b600067ffffffffffffffff821115613aa757613aa7613a2e565b601f19601f83011660200192915050565b82818337506000910152565b6000613ad7613ad284613a8d565b613a71565b905082815260208101848484011115613af257613af2600080fd5b613afd848285613ab8565b509392505050565b600082601f830112613b1957613b19600080fd5b81356130c2848260208601613ac4565b60008060008060808587031215613b4257613b42600080fd5b6000613b4e8787613811565b9450506020613b5f87828801613811565b9350506040613b70878288016137b4565b925050606085013567ffffffffffffffff811115613b9057613b90600080fd5b61398287828801613b05565b60008083601f840112613bb157613bb1600080fd5b50813567ffffffffffffffff811115613bcc57613bcc600080fd5b602083019150836001820283011115613be757613be7600080fd5b9250929050565b60008083601f840112613c0357613c03600080fd5b50813567ffffffffffffffff811115613c1e57613c1e600080fd5b602083019150836020820283011115613be757613be7600080fd5b60008060008060008060608789031215613c5557613c55600080fd5b863567ffffffffffffffff811115613c6f57613c6f600080fd5b613c7b89828a01613b9c565b9650965050602087013567ffffffffffffffff811115613c9d57613c9d600080fd5b613ca989828a01613bee565b9450945050604087013567ffffffffffffffff811115613ccb57613ccb600080fd5b613cd789828a01613bee565b92509250509295509295509295565b60008060408385031215613cfc57613cfc600080fd5b6000613d088585613811565b925050602061384f85828601613811565b60008060208385031215613d2f57613d2f600080fd5b823567ffffffffffffffff811115613d4957613d49600080fd5b613d5585828601613b9c565b92509250509250929050565b634e487b7160e01b600052602260045260246000fd5b600281046001821680613d8b57607f821691505b60208210811415610bf957610bf9613d61565b601c8152602081017f4552433732313a20746f6b656e20646f6573206e6f74206578697374000000008152905061399f565b6020808252810161094581613d9e565b602b8152602081017f4552433732313a20617070726f766520717565727920666f72206e6f6e65786981527f7374656e7420746f6b656e000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161094581613de0565b60468152602081017f4552433732313a2063616c6c6572206973206e6f7420746865206f776e65722081527f6e6f7220616e20617070726f766564206f70657261746f7220666f722074686560208201527f20746f6b656e0000000000000000000000000000000000000000000000000000604082015290505b60600190565b6020808252810161094581613e4a565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815261399f565b6020808252810161094581613eda565b634e487b7160e01b600052601160045260246000fd5b60008219821115613f4357613f43613f1a565b500190565b60278152602081017f4552433732313a2066726f6d2063616e6e6f7420626520746865207a65726f2081527f616464726573730000000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581613f48565b60258152602081017f4552433732313a20746f2063616e6e6f7420626520746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581613fb0565b602d8152602081017f4552433732313a2063616c6c6572206973206e6f7420617070726f766564206681527f6f7220616c6c20746f6b656e730000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614018565b60238152602081017f4552433732313a2066726f6d20646f6573206e6f74206f776e2074686520746f81527f6b656e000000000000000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614080565b60228152602081017f4552433732313a2066726f6d206973206e6f7420696e206f776e657273206c6981527f737400000000000000000000000000000000000000000000000000000000000060208201529050613e34565b60208082528101610945816140e8565b634e487b7160e01b600052601260045260246000fd5b60008261417557614175614150565b500490565b60178152602081017f4552433732313a204f776e6572206e6f7420666f756e640000000000000000008152905061399f565b602080825281016109458161417a565b60008160001904831182151516156141d6576141d6613f1a565b500290565b60248152602081017f455243373231456e756d657261626c653a20696e646578206f7574206f66207281527f616e67650000000000000000000000000000000000000000000000000000000060208201529050613e34565b60208082528101610945816141db565b60118152602081017f5769746864726177616c206661696c65640000000000000000000000000000008152905061399f565b6020808252810161094581614243565b60208082527f4552433732313a20746f6b656e20696e646578206f7574206f662072616e6765910190815261399f565b6020808252810161094581614285565b602c8152602081017f4552433732313a2063616c6c6572206973206e65697468657220617070726f7681527f6564206e6f72206f776e6572000000000000000000000000000000000000000060208201529050613e34565b60208082528101610945816142c5565b60008282101561433f5761433f613f1a565b500390565b60298152602081017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481527f656e7420746f6b656e000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614344565b60298152602081017f4552433732313a2063616e6e6f7420617070726f76652063616c6c657220617381527f206f70657261746f72000000000000000000000000000000000000000000000060208201529050613e34565b60208082528101610945816143ac565b60278152602081017f4552433732313a2055524920717565727920666f72206e6f6e6578697374656e81527f7420746f6b656e0000000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614414565b634e487b7160e01b600052603260045260246000fd5b604081016144a0828561387a565b61100e6020830184613913565b60006144bb613ad284613a8d565b9050828152602081018484840111156144d6576144d6600080fd5b613afd84828561373f565b600082601f8301126144f5576144f5600080fd5b81516130c28482602086016144ad565b60006020828403121561451a5761451a600080fd5b815167ffffffffffffffff81111561453457614534600080fd5b6130c2848285016144e1565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c008152905061399f565b6020808252810161094581614540565b60288152602081017f456163682072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e647900000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614582565b613f43828483613ab8565b60006109458260601b90565b6000610945826145f5565b613713614618826137e0565b614601565b825b925060007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561465357614653600080fd5b602083029250614664838584613ab8565b50500190565b90565b61467881888a6145ea565b9050614684818761460c565b60140161469281858761461d565b905061469e818461387a565b6020016146ab818361387a565b602001979650505050505050565b600061094561466a61ffff841681565b613713816146b9565b6020810161094582846146c9565b805161094581613808565b60006020828403121561470057614700600080fd5b60006130c284846146e0565b60378152602081017f596f752063616e6e6f7420676976652063616e6469657320746f20612072756e81527f6e6572207468617420796f7520646f206e6f74206f776e00000000000000000060208201529050613e34565b602080825281016109458161470c565b604f8152602081017f596f75722072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e64792c2077686f206b6e6f7773207768617420636f756c64206860208201527f617070656e206f7468657277697365000000000000000000000000000000000060408201529050613ec4565b6020808252810161094581614774565b60ff9081169082165b915060008261481c5761481c614150565b500690565b8161480b565b60ff8116905060ff8216915060008260ff03821115613f4357613f43613f1a565b614852818361387a565b602001919050565b600060001982141561486e5761486e613f1a565b5060010190565b8183526020830161461f565b6060810161488f82886137f1565b81810360208301526148a2818688614875565b905081810360408301526148b7818486614875565b979650505050505050565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050613e34565b60208082528101610945816148c2565b60148152602081017f5075626c69632073616c65206e6f74206f70656e0000000000000000000000008152905061399f565b602080825281016109458161492a565b601d8152602081017f596f75206861766520746f2070617920746865206261696c20626f6e640000008152905061399f565b602080825281016109458161496c565b60318152602081017f596f757220686f6d6520697320746f20736d616c6c20746f2077656c636f6d6581527f20736f206d616e7920647265616d65727300000000000000000000000000000060208201529050613e34565b60208082528101610945816149ae565b614a218187896145ea565b9050614a2d818661460c565b601401614a3a818561387a565b602001614a47818461387a565b602001614a54818361387a565b6020019695505050505050565b601f8152602081017f4552433732313a206f776e6572496e646578206f7574206f6620626f756e64008152905061399f565b6020808252810161094581614a61565b60148152602081017f746f55696e7431365f6f75744f66426f756e64730000000000000000000000008152905061399f565b6020808252810161094581614aa3565b60158152602081017f746f416464726573735f6f75744f66426f756e647300000000000000000000008152905061399f565b6020808252810161094581614ae5565b60288152602081017f4552433732313a207472616e736665722066726f6d206164647265737320697381527f20696e76616c696400000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614b27565b60008154614b9c81613d77565b600182168015614bb35760018114614bc457614bf4565b60ff19831686528186019350614bf4565b60008581526020902060005b83811015614bec57815488820152600190910190602001614bd0565b505081860193505b50505092915050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116613713565b614c2f8184614b8f565b9050614c3b8183614bfd565b60140192915050565b6000614c4e825190565b614c5c81856020860161373f565b9290920192915050565b614c708184614c44565b905061100e8183614c44565b614c708184614b8f565b60808101614c9482876137f1565b614ca160208301866137f1565b614cae604083018561387a565b8181036060830152614cc0818461376b565b9695505050505050565b8051610945816136b4565b600060208284031215614cea57614cea600080fd5b60006130c28484614cca565b60328152602081017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e746572000000000000000000000000000060208201529050613e34565b6020808252810161094581614cf6565b600e8152602081017f736c6963655f6f766572666c6f770000000000000000000000000000000000008152905061399f565b6020808252810161094581614d5e565b60118152602081017f736c6963655f6f75744f66426f756e64730000000000000000000000000000008152905061399f565b6020808252810161094581614da0565b60258152602081017f4552433732313a2063616e6e6f74206d696e742077697468206e6f20746f6b6581527f6e2049647300000000000000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614de2565b602a8152602081017f4552433732313a20746f6b656e4964732073686f756c6420626520627974657381527f206f662075696e7431360000000000000000000000000000000000000000000060208201529050613e34565b6020808252810161094581614e4a565b601c8152602081017f4552433732313a20746f6b656e20616c726561647920657869737473000000008152905061399f565b6020808252810161094581614eb2565b614efe8185614b8f565b90506130c28183856145ea56fea2646970667358221220d320dca15bdf6d1ceb2239df904ec5fbabe303a1da219e98b1c12c9e9d3fe5c264736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "approve(address,uint256,uint256)": {
        "details": "Approve \"to\" to manage token Id",
        "params": {
          "to": "address The address which will manage the token Id",
          "tokenId": "uint256 The token Id to manage",
          "tokenIndex": "uint256 The index of the token in the owner's list"
        }
      },
      "balanceOf(address)": {
        "details": "There are two bytes per tokenId",
        "params": {
          "owner": "address The address we retrieve the balance for"
        },
        "returns": {
          "_0": "uint256 The number of tokens owned by the address"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getOwnerIndex(address)": {
        "details": "Returns the index of owner in the internal array of owners. Revert if not found.",
        "params": {
          "owner": "address The address we retrieve the index for"
        }
      },
      "getTokenExists()": {
        "details": "Returns the array of bool telling if a token exists or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "Modified for opensea and looksrare pre-approve so users can make truly gas less sales."
      },
      "mintBatchRunnersAccess(bytes,uint256[],uint256[])": {
        "details": "This mint function wraps the safeMintBatch to:      1) check that the minter owns the runner 2) use the candies 3) burn the candies",
        "params": {
          "candyAmounts": "should be an array of 1",
          "candyIds": "the same indexes as above but as a uint8 array",
          "tokenIds": "a bytes interpreted as an array of uint16"
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good      reason to call this function on chain.",
        "params": {
          "tokenId": "uint265 A given token id"
        },
        "returns": {
          "_0": "address The owner of the token."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,uint256,address,uint256)": {
        "details": "Transfer token with minimal computing since all the required data to check is given",
        "params": {
          "from": "address The address which you want to transfer the token from",
          "fromIndex": "uint256 The index of \"from\" in the owners bytes. This is to avoid a search in the array.",
          "to": "address The address which you want to transfer the token to",
          "tokenIndex": "uint256 The index of the token to transfer in the from's token list."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.",
        "params": {
          "_approved": "Whether to add or remove `operator` as an operator.",
          "operator": "The address of the operator to add or remove."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenByIndex(uint256)": {
        "details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
      },
      "totalSupply()": {
        "details": "Returns the total amount of tokens stored by the contract."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "opensea": {
        "details": "Copied from \\@naomsa's contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "flipProxyState(address)": {
        "notice": "Approve the communication and interaction with cross-collection interactions."
      },
      "looksrare()": {
        "notice": "LooksRare marketplace transfer manager."
      },
      "marketplacesApproved()": {
        "notice": "Check if marketplaces pre-approve is enabled."
      },
      "opensea()": {
        "notice": "OpenSea proxy registry."
      },
      "setLooksrare(address)": {
        "notice": "Set looksrare to `looksrare_`."
      },
      "setOpensea(address)": {
        "notice": "Set opensea to `opensea_`."
      },
      "toggleMarketplacesApproved()": {
        "notice": "Toggle pre-approve feature state for sender."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13224,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_tokensByOwner",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 13226,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "owners",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      },
      {
        "astId": 13233,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "tokenExists",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bool)10000_storage"
      },
      {
        "astId": 13237,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "315",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 13239,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_name",
        "offset": 0,
        "slot": "316",
        "type": "t_string_storage"
      },
      {
        "astId": 13241,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_symbol",
        "offset": 0,
        "slot": "317",
        "type": "t_string_storage"
      },
      {
        "astId": 225,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_owner",
        "offset": 0,
        "slot": "318",
        "type": "t_address"
      },
      {
        "astId": 425,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_status",
        "offset": 0,
        "slot": "319",
        "type": "t_uint256"
      },
      {
        "astId": 4183,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "renderingContractAddress",
        "offset": 0,
        "slot": "320",
        "type": "t_address"
      },
      {
        "astId": 4185,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "candyShopAddress",
        "offset": 0,
        "slot": "321",
        "type": "t_address"
      },
      {
        "astId": 4187,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "chainRunnersAddress",
        "offset": 0,
        "slot": "322",
        "type": "t_address"
      },
      {
        "astId": 4190,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "renderer",
        "offset": 0,
        "slot": "323",
        "type": "t_contract(IDreamersRenderer)8013"
      },
      {
        "astId": 4193,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "candyShop",
        "offset": 0,
        "slot": "324",
        "type": "t_contract(ICandyShop)7963"
      },
      {
        "astId": 4196,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "chainRunners",
        "offset": 0,
        "slot": "325",
        "type": "t_contract(IChainRunners)7980"
      },
      {
        "astId": 4200,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "dreamersCandies",
        "offset": 0,
        "slot": "326",
        "type": "t_array(t_uint8)10000_storage"
      },
      {
        "astId": 4206,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "opensea",
        "offset": 0,
        "slot": "639",
        "type": "t_address"
      },
      {
        "astId": 4209,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "looksrare",
        "offset": 0,
        "slot": "640",
        "type": "t_address"
      },
      {
        "astId": 4213,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "marketplacesApproved",
        "offset": 20,
        "slot": "640",
        "type": "t_bool"
      },
      {
        "astId": 4217,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "proxyToApproved",
        "offset": 0,
        "slot": "641",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4319,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "maxDreamersMintPublicSale",
        "offset": 0,
        "slot": "642",
        "type": "t_uint256"
      },
      {
        "astId": 4324,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "publicSaleStartTimestamp",
        "offset": 0,
        "slot": "643",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)10000_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[10000]",
        "numberOfBytes": "10016"
      },
      "t_array(t_uint8)10000_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[10000]",
        "numberOfBytes": "10016"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICandyShop)7963": {
        "encoding": "inplace",
        "label": "contract ICandyShop",
        "numberOfBytes": "20"
      },
      "t_contract(IChainRunners)7980": {
        "encoding": "inplace",
        "label": "contract IChainRunners",
        "numberOfBytes": "20"
      },
      "t_contract(IDreamersRenderer)8013": {
        "encoding": "inplace",
        "label": "contract IDreamersRenderer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}