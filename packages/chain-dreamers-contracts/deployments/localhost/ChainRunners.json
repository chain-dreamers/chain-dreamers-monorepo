{
  "address": "0xd6e1afe5cA8D00A2EFC01B89997abE2De47fdfAf",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dna",
          "type": "uint256"
        }
      ],
      "name": "GenerateRunner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "toEarlyAccessList",
          "type": "address[]"
        }
      ],
      "name": "addToEarlyAccessList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "allocateFounderMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "seed",
          "type": "string"
        }
      ],
      "name": "checkHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_runnerZeroHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_runnerZeroDNA",
          "type": "uint256"
        }
      ],
      "name": "configureRunnerZero",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "earlyAccessMintedCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyAccessStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "founderMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDna",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getRemainingEarlyAccessMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getRemainingFounderMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEarlyAccessOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOnEarlyAccessList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "mintEarlyAccess",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "mintPublicSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "seed",
          "type": "string"
        }
      ],
      "name": "mintRunnerZero",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "toRemove",
          "type": "address[]"
        }
      ],
      "name": "removeFromEarlyAccessList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setEarlyAccessTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_renderingContractAddress",
          "type": "address"
        }
      ],
      "name": "setRenderingContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "tokenURIForSeed",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe6710418ac6f84b020b6f479414db4236e6862421cff47294ef59a66a8ed9d5c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xd6e1afe5cA8D00A2EFC01B89997abE2De47fdfAf",
    "transactionIndex": 0,
    "gasUsed": "3114464",
    "logsBloom": "0x
    "blockHash": "0x02866cec865c2b72112e9b57ef2a86f5c95d82aa7ff1b541af92d9e8b8f64869",
    "transactionHash": "0xe6710418ac6f84b020b6f479414db4236e6862421cff47294ef59a66a8ed9d5c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14109014,
        "transactionHash": "0xe6710418ac6f84b020b6f479414db4236e6862421cff47294ef59a66a8ed9d5c",
        "address": "0xd6e1afe5cA8D00A2EFC01B89997abE2De47fdfAf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x02866cec865c2b72112e9b57ef2a86f5c95d82aa7ff1b541af92d9e8b8f64869"
      }
    ],
    "blockNumber": 14109014,
    "cumulativeGasUsed": "3114464",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6f841e104422a730b31d7866c8b41a45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dna\",\"type\":\"uint256\"}],\"name\":\"GenerateRunner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toEarlyAccessList\",\"type\":\"address[]\"}],\"name\":\"addToEarlyAccessList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"allocateFounderMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"}],\"name\":\"checkHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_runnerZeroHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_runnerZeroDNA\",\"type\":\"uint256\"}],\"name\":\"configureRunnerZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyAccessMintedCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyAccessStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"founderMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDna\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getRemainingEarlyAccessMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getRemainingFounderMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEarlyAccessOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOnEarlyAccessList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"mintEarlyAccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"mintPublicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"}],\"name\":\"mintRunnerZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toRemove\",\"type\":\"address[]\"}],\"name\":\"removeFromEarlyAccessList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setEarlyAccessTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_renderingContractAddress\",\"type\":\"address\"}],\"name\":\"setRenderingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"tokenURIForSeed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/runners/ChainRunners.sol\":\"ChainRunners\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/runners/ChainRunners.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./ChainRunnersTypes.sol\\\";\\nimport \\\"./IChainRunnersRenderer.sol\\\";\\n\\n/*\\n               ::::                                                                                                                                                  :::#%=\\n               @*==+-                                                                                                                                               ++==*=.\\n               #+=#=++..                                                                                                                                        ..=*=*+-#:\\n                :=+++++++=====================================:    .===============================================. .=========================================++++++++=\\n                 .%-+%##+=--==================================+=..=+-=============================================-+*+======================================---+##+=#-.\\n                   -+++@@%++++@@@%+++++++++++++++++++++++++++%#++++++%#+++#@@@#+++++++++@@%++++++++++++++++++++@#+.=+*@*+*@@@@*+++++++++++++++++++++++%@@@#+++#@@+++=\\n                    -*-#%@@%%%=*%@%*++=++=+==+=++=++=+=++=++==#@%#%#+++=+=*@%*+=+==+=+++%*++==+=++=+==+=++=+=++@%%#%#++++*@%#++=++=++=++=+=++=++=+=+*%%*==*%@@@*:%=\\n                     :@:+@@@@@@*+++%@@*+===========+*=========#@@========+#%==========*@========##*#*+=======*@##*======#@#+=======*#*============+#%++#@@%#@@#++=.\\n                      .*+=%@%*%@%##++@@%#=-==-=--==*%=========*%==--=--=-====--=--=-=##=--=-=--%%%%%+=-=--=-=*%=--=--=-=#%=--=----=#%=--=-=--=-+%#+==#%@@*#%@=++.\\n                        +%.#@@###%@@@@@%*---------#@%########@%*---------------------##---------------------##---------%%*--------@@#---------+#@=#@@#+==@@%*++-\\n                        .:*+*%@#+=*%@@@*=-------=#%#=-------=%*---------=*#*--------#+=--------===--------=#%*-------=#%*-------==@%#--------=%@@%#*+=-+#%*+*:.\\n       ====================%*.@@%#==+##%@*=----------------+@#+---------@@*-------=*@+---------@@*--------=@+--------+@=--------*@@+-------+#@@%#==---+#@.*%====================\\n     :*=--==================-:=#@@%*===+*@%+=============%%%@=========*%@*========+@+=--=====+%@+==========@+========+@========*%@@+======%%%**+=---=%@#=:-====================-#-\\n       +++**%@@@#*****************@#*=---=##%@@@@@@@@@@@@@#**@@@@****************%@@*+++@#***********#@************************************+=------=*@#*********************@#+=+:\\n        .-##=*@@%*----------------+%@%=---===+%@@@@@@@*+++---%#++----------------=*@@*+++=-----------=+#=------------------------------------------+%+--------------------+#@-=@\\n         :%:#%#####+=-=-*@@+--=-==-=*@=--=-==-=*@@#*=-==-=-+@===-==-=-=++==-=-==--=@%===-==----+-==-==--+*+-==-==---=*@@@@@@%#===-=-=+%@%-==-=-==-#@%=-==-==--+#@@@@@@@@@@@@*+++\\n        =*=#@#=----==-=-=++=--=-==-=*@=--=-==-=*@@+-=-==-==+@===-=--=-*@@*=-=-==--+@=--=-==--+#@-==-==---+%-==-==---=+++#@@@#--==-=-=++++-=--=-===#%+=-==-==---=++++++++@@@%.#*\\n        +#:@%*===================++%#=========%@%=========#%=========+#@%+=======#%==========*@#=========*%=========+*+%@@@+========+*==========+@@%+**+================*%#*=+=\\n       *++#@*+=++++++*#%*+++++=+++*%%++++=++++%%*=+++++++##*=++++=++=%@@++++=++=+#%++++=++++#%@=+++++++=*#*+++++++=#%@@@@@*++=++++=#%@*+++=++=+++@#*****=+++++++=+++++*%@@+:=+=\\n    :=*=#%#@@@@#%@@@%#@@#++++++++++%%*+++++++++++++++++**@*+++++++++*%#++++++++=*##++++++++*%@%+++++++++##+++++++++#%%%%%%++++**#@@@@@**+++++++++++++++++=*%@@@%#@@@@#%@@@%#@++*:.\\n    #*:@#=-+%#+:=*@*=-+@%#++++++++#%@@#*++++++++++++++#%@#*++++++++*@@#+++++++++@#++++++++*@@#+++++++++##*+++++++++++++++++###@@@@++*@@#+++++++++++++++++++*@@#=:+#%+--+@*=-+%*.@=\\n    ++=#%#+%@@%=#%@%#+%%#++++++*#@@@%###**************@@@++++++++**#@##*********#*********#@@#++++++***@#******%@%#*++**#@@@%##+==+++=*#**********%%*++++++++#%#=%@@%+*%@%*+%#*=*-\\n     .-*+===========*@@+++++*%%%@@@++***************+.%%*++++#%%%@@%=:=******************--@@#+++*%%@#==+***--*@%*++*%@@*===+**=--   -************++@%%#++++++#@@@*==========*+-\\n        =*******##.#%#++++*%@@@%+==+=             *#-%@%**%%###*====**-               -@:*@@##@###*==+**-.-#=+@@#*@##*==+***=                     =+=##%@*+++++*%@@#.#%******:\\n               ++++%#+++*#@@@@+++==.              **-@@@%+++++++===-                 -+++#@@+++++++==:  :+++%@@+++++++==:                          .=++++@%##++++@@%++++\\n             :%:*%%****%@@%+==*-                .%==*====**+...                      #*.#+==***....    #+=#%+==****:.                                ..-*=*%@%#++*#%@=+%.\\n            -+++#%+#%@@@#++===                  .@*++===-                            #%++===           %#+++===                                          =+++%@%##**@@*.@:\\n          .%-=%@##@@%*==++                                                                                                                                 .*==+#@@%*%@%=*=.\\n         .+++#@@@@@*++==.                                                                                                                                    -==++#@@@@@@=+%\\n       .=*=%@@%%%#=*=.                                                                                                                                          .*+=%@@@@%+-#.\\n       @=-@@@%:++++.                                                                                                                                              -+++**@@#+*=:\\n    .-+=*#%%++*::.                                                                                                                                                  :+**=#%@#==#\\n    #*:@*+++=:                                                                                                                                                          =+++@*++=:\\n  :*-=*=++..                                                                                                                                                             .=*=#*.%=\\n +#.=+++:                                                                                                                                                                   ++++:+#\\n*+=#-::                                                                                                                                                                      .::*+=*\\n\\n*/\\n\\ncontract ChainRunners is ERC721Enumerable, Ownable, ReentrancyGuard {\\n    mapping(uint256 => ChainRunnersTypes.ChainRunner) runners;\\n\\n    address public renderingContractAddress;\\n\\n    event GenerateRunner(uint256 indexed tokenId, uint256 dna);\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    Counters.Counter private _reservedTokenIds;\\n\\n    uint256 private constant MAX_RUNNERS = 10000;\\n    uint256 private constant FOUNDERS_RESERVE_AMOUNT = 85;\\n    uint256 private constant MAX_PUBLIC_RUNNERS =\\n        MAX_RUNNERS - FOUNDERS_RESERVE_AMOUNT;\\n    uint256 private constant MINT_PRICE = 0.05 ether;\\n    uint256 private constant MAX_PER_ADDRESS = 10;\\n\\n    uint256 private constant MAX_PER_EARLY_ACCESS_ADDRESS = 5;\\n\\n    uint256 private runnerZeroHash;\\n    uint256 private runnerZeroDNA;\\n\\n    uint256 public earlyAccessStartTimestamp;\\n    uint256 public publicSaleStartTimestamp;\\n\\n    mapping(address => bool) public isOnEarlyAccessList;\\n    mapping(address => uint256) public earlyAccessMintedCounts;\\n    mapping(address => uint256) private founderMintCountsRemaining;\\n\\n    constructor() ERC721(\\\"Chain Runners\\\", \\\"RUN\\\") {}\\n\\n    modifier whenPublicSaleActive() {\\n        require(isPublicSaleOpen(), \\\"Public sale not open\\\");\\n        _;\\n    }\\n\\n    modifier whenEarlyAccessActive() {\\n        require(isEarlyAccessOpen(), \\\"Early access not open\\\");\\n        _;\\n    }\\n\\n    function setRenderingContractAddress(address _renderingContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        renderingContractAddress = _renderingContractAddress;\\n    }\\n\\n    function mintPublicSale(uint256 _count)\\n        external\\n        payable\\n        nonReentrant\\n        whenPublicSaleActive\\n        returns (uint256, uint256)\\n    {\\n        require(\\n            _count > 0 && _count <= MAX_PER_ADDRESS,\\n            \\\"Invalid Runner count\\\"\\n        );\\n        require(\\n            _tokenIds.current() + _count <= MAX_PUBLIC_RUNNERS,\\n            \\\"All Runners have been minted\\\"\\n        );\\n        require(\\n            _count * MINT_PRICE == msg.value,\\n            \\\"Incorrect amount of ether sent\\\"\\n        );\\n\\n        uint256 firstMintedId = _tokenIds.current() + 1;\\n\\n        for (uint256 i = 0; i < _count; i++) {\\n            _tokenIds.increment();\\n            mint(_tokenIds.current());\\n        }\\n\\n        return (firstMintedId, _count);\\n    }\\n\\n    function mintEarlyAccess(uint256 _count)\\n        external\\n        payable\\n        nonReentrant\\n        whenEarlyAccessActive\\n        returns (uint256, uint256)\\n    {\\n        require(_count != 0, \\\"Invalid Runner count\\\");\\n        require(\\n            isOnEarlyAccessList[msg.sender],\\n            \\\"Address not on Early Access list\\\"\\n        );\\n        require(\\n            _tokenIds.current() + _count <= MAX_PUBLIC_RUNNERS,\\n            \\\"All Runners have been minted\\\"\\n        );\\n        require(\\n            _count * MINT_PRICE == msg.value,\\n            \\\"Incorrect amount of ether sent\\\"\\n        );\\n\\n        uint256 userMintedAmount = earlyAccessMintedCounts[msg.sender] + _count;\\n        require(\\n            userMintedAmount <= MAX_PER_EARLY_ACCESS_ADDRESS,\\n            \\\"Max Early Access count per address exceeded\\\"\\n        );\\n\\n        uint256 firstMintedId = _tokenIds.current() + 1;\\n        for (uint256 i = 0; i < _count; i++) {\\n            _tokenIds.increment();\\n            mint(_tokenIds.current());\\n        }\\n        earlyAccessMintedCounts[msg.sender] = userMintedAmount;\\n        return (firstMintedId, _count);\\n    }\\n\\n    function allocateFounderMint(address _addr, uint256 _count)\\n        public\\n        onlyOwner\\n        nonReentrant\\n    {\\n        founderMintCountsRemaining[_addr] = _count;\\n    }\\n\\n    function founderMint(uint256 _count)\\n        public\\n        nonReentrant\\n        returns (uint256, uint256)\\n    {\\n        require(\\n            _count > 0 && _count <= MAX_PER_ADDRESS,\\n            \\\"Invalid Runner count\\\"\\n        );\\n        require(\\n            _reservedTokenIds.current() + _count <= FOUNDERS_RESERVE_AMOUNT,\\n            \\\"All reserved Runners have been minted\\\"\\n        );\\n        require(\\n            founderMintCountsRemaining[msg.sender] >= _count,\\n            \\\"You cannot mint this many reserved Runners\\\"\\n        );\\n\\n        uint256 firstMintedId = MAX_PUBLIC_RUNNERS + _tokenIds.current() + 1;\\n        for (uint256 i = 0; i < _count; i++) {\\n            _reservedTokenIds.increment();\\n            mint(MAX_PUBLIC_RUNNERS + _reservedTokenIds.current());\\n        }\\n        founderMintCountsRemaining[msg.sender] -= _count;\\n        return (firstMintedId, _count);\\n    }\\n\\n    function mint(uint256 tokenId) public {\\n        ChainRunnersTypes.ChainRunner memory runner;\\n        runner.dna = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    tokenId,\\n                    msg.sender,\\n                    block.difficulty,\\n                    block.timestamp\\n                )\\n            )\\n        );\\n\\n        _safeMint(msg.sender, tokenId);\\n        runners[tokenId] = runner;\\n    }\\n\\n    function getRemainingEarlyAccessMints(address _addr)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (!isOnEarlyAccessList[_addr]) {\\n            return 0;\\n        }\\n        return MAX_PER_EARLY_ACCESS_ADDRESS - earlyAccessMintedCounts[_addr];\\n    }\\n\\n    function getRemainingFounderMints(address _addr)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return founderMintCountsRemaining[_addr];\\n    }\\n\\n    function isPublicSaleOpen() public view returns (bool) {\\n        return\\n            block.timestamp >= publicSaleStartTimestamp &&\\n            publicSaleStartTimestamp != 0;\\n    }\\n\\n    function isEarlyAccessOpen() public view returns (bool) {\\n        return\\n            !isPublicSaleOpen() &&\\n            block.timestamp >= earlyAccessStartTimestamp &&\\n            earlyAccessStartTimestamp != 0;\\n    }\\n\\n    function addToEarlyAccessList(address[] memory toEarlyAccessList)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < toEarlyAccessList.length; i++) {\\n            isOnEarlyAccessList[toEarlyAccessList[i]] = true;\\n        }\\n    }\\n\\n    function removeFromEarlyAccessList(address[] memory toRemove)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < toRemove.length; i++) {\\n            isOnEarlyAccessList[toRemove[i]] = false;\\n        }\\n    }\\n\\n    function setPublicSaleTimestamp(uint256 timestamp) external onlyOwner {\\n        publicSaleStartTimestamp = timestamp;\\n    }\\n\\n    function setEarlyAccessTimestamp(uint256 timestamp) external onlyOwner {\\n        earlyAccessStartTimestamp = timestamp;\\n    }\\n\\n    function checkHash(string memory seed) public pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(seed)));\\n    }\\n\\n    function configureRunnerZero(\\n        uint256 _runnerZeroHash,\\n        uint256 _runnerZeroDNA\\n    ) external onlyOwner {\\n        require(runnerZeroHash == 0, \\\"Runner Zero has already been configured\\\");\\n        runnerZeroHash = _runnerZeroHash;\\n        runnerZeroDNA = _runnerZeroDNA;\\n    }\\n\\n    function mintRunnerZero(string memory seed) external {\\n        require(runnerZeroHash != 0, \\\"Runner Zero has not been configured\\\");\\n        require(!_exists(0), \\\"Runner Zero has already been minted\\\");\\n        require(checkHash(seed) == runnerZeroHash, \\\"Incorrect seed\\\");\\n\\n        ChainRunnersTypes.ChainRunner memory runner;\\n        runner.dna = runnerZeroDNA;\\n\\n        _safeMint(msg.sender, 0);\\n        runners[0] = runner;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(_tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        if (renderingContractAddress == address(0)) {\\n            return \\\"\\\";\\n        }\\n\\n        IChainRunnersRenderer renderer = IChainRunnersRenderer(\\n            renderingContractAddress\\n        );\\n        return renderer.tokenURI(_tokenId, runners[_tokenId]);\\n    }\\n\\n    function tokenURIForSeed(uint256 _tokenId, uint256 seed)\\n        public\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(_tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        if (renderingContractAddress == address(0)) {\\n            return \\\"\\\";\\n        }\\n\\n        ChainRunnersTypes.ChainRunner memory runner;\\n        runner.dna = seed;\\n\\n        IChainRunnersRenderer renderer = IChainRunnersRenderer(\\n            renderingContractAddress\\n        );\\n        return renderer.tokenURI(_tokenId, runner);\\n    }\\n\\n    function getDna(uint256 _tokenId) public view returns (uint256) {\\n        return runners[_tokenId].dna;\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3aebfc9611c438854206d647efcdca1112c387a1c7bb859e1cb49ad019920564\",\"license\":\"MIT\"},\"contracts/runners/ChainRunnersTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ChainRunnersTypes {\\n    struct ChainRunner {\\n        uint256 dna;\\n    }\\n}\\n\",\"keccak256\":\"0x23138eda8cc0771fb40ad9e98601581e327c2254662109dea962f856d719a941\",\"license\":\"MIT\"},\"contracts/runners/IChainRunnersRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ChainRunnersTypes.sol\\\";\\n\\ninterface IChainRunnersRenderer {\\n    function tokenURI(\\n        uint256 tokenId,\\n        ChainRunnersTypes.ChainRunner memory runnerData\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x78bbc4ab581c5cee7562c299639fe821d2e21f89823c7c8402d34e8d4a664438\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080518082018252600d81526c436861696e2052756e6e65727360981b602080830191825283518085019094526003845262292aa760e91b9084015281519192916200006291600091620000f6565b50805162000078906001906020840190620000f6565b505050620000956200008f620000a060201b60201c565b620000a4565b6001600b55620001e3565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200010490620001b2565b90600052602060002090601f01602090048101928262000128576000855562000173565b82601f106200014357805160ff191683800117855562000173565b8280016001018555821562000173579182015b828111156200017357825182559160200191906001019062000156565b506200018192915062000185565b5090565b5b8082111562000181576000815560010162000186565b634e487b7160e01b600052602260045260246000fd5b600281046001821680620001c757607f821691505b60208210811415620001dd57620001dd6200019c565b50919050565b6135ca80620001f36000396000f3fe6080604052600436106102eb5760003560e01c80637de46b6911610184578063b88d4fde116100d6578063e670f7cd1161008a578063f252460111610064578063f252460114610836578063f2fde38b1461086c578063f42202e81461088c57600080fd5b8063e670f7cd146107ad578063e69c8a91146107cd578063e985e9c5146107ed57600080fd5b8063c074f412116100bb578063c074f41214610757578063c87b56dd14610777578063d7822c991461079757600080fd5b8063b88d4fde14610717578063bb49ec7e1461073757600080fd5b8063a08cdf6611610138578063a22cb46511610112578063a22cb465146106a7578063ac5fcdee146106c7578063b1acb346146106f757600080fd5b8063a08cdf6614610647578063a13c038314610674578063a1e5995b1461069457600080fd5b806395d89b411161016957806395d89b41146105fc5780639676763014610611578063a0712d681461062757600080fd5b80637de46b69146105be5780638da5cb5b146105de57600080fd5b8063422627c31161023d5780636352211e116101f157806370a08231116101cb57806370a0823114610569578063715018a6146105895780637dd0dbb51461059e57600080fd5b80636352211e146105095780636dcec528146105295780636e642aba1461054957600080fd5b80634f6ccce7116102225780634f6ccce7146104a8578063511a9605146104c85780635a5e5d58146104e857600080fd5b8063422627c31461045b57806342842e0e1461048857600080fd5b806312b40a9f1161029f57806323b872dd1161027957806323b872dd146104065780632f745c59146104265780633ccfd60b1461044657600080fd5b806312b40a9f146103b357806318160ddd146103d35780631a6949e3146103f157600080fd5b8063081812fc116102d0578063081812fc1461034f578063095ea7b31461037c5780630d0090ef1461039e57600080fd5b806301ffc9a7146102f757806306fdde031461032d57600080fd5b366102f257005b600080fd5b34801561030357600080fd5b5061031761031236600461221b565b6108ac565b6040516103249190612246565b60405180910390f35b34801561033957600080fd5b50610342610908565b60405161032491906122b2565b34801561035b57600080fd5b5061036f61036a3660046122d4565b61099a565b604051610324919061230f565b34801561038857600080fd5b5061039c610397366004612331565b6109f3565b005b3480156103aa57600080fd5b50610317610a79565b3480156103bf57600080fd5b5061039c6103ce36600461236e565b610aa4565b3480156103df57600080fd5b506008545b6040516103249190612395565b3480156103fd57600080fd5b50610317610afd565b34801561041257600080fd5b5061039c6104213660046123a3565b610b15565b34801561043257600080fd5b506103e4610441366004612331565b610b46565b34801561045257600080fd5b5061039c610b98565b34801561046757600080fd5b506103e46104763660046122d4565b6000908152600c602052604090205490565b34801561049457600080fd5b5061039c6104a33660046123a3565b610c2d565b3480156104b457600080fd5b506103e46104c33660046122d4565b610c48565b3480156104d457600080fd5b5061039c6104e33660046122d4565b610c96565b6104fb6104f63660046122d4565b610cc5565b6040516103249291906123f3565b34801561051557600080fd5b5061036f6105243660046122d4565b610e0a565b34801561053557600080fd5b5061039c610544366004612513565b610e3f565b34801561055557600080fd5b506103e461056436600461236e565b610ed5565b34801561057557600080fd5b506103e461058436600461236e565b610f21565b34801561059557600080fd5b5061039c610f65565b3480156105aa57600080fd5b5061039c6105b9366004612331565b610f9b565b3480156105ca57600080fd5b5061039c6105d93660046122d4565b611009565b3480156105ea57600080fd5b50600a546001600160a01b031661036f565b34801561060857600080fd5b50610342611038565b34801561061d57600080fd5b506103e460125481565b34801561063357600080fd5b5061039c6106423660046122d4565b611047565b34801561065357600080fd5b506103e461066236600461236e565b60156020526000908152604090205481565b34801561068057600080fd5b5061039c61068f36600461254e565b6110a6565b6104fb6106a23660046122d4565b6110fb565b3480156106b357600080fd5b5061039c6106c2366004612583565b6112b0565b3480156106d357600080fd5b506103176106e236600461236e565b60146020526000908152604090205460ff1681565b34801561070357600080fd5b5061039c610712366004612513565b6112bb565b34801561072357600080fd5b5061039c61073236600461264d565b61134d565b34801561074357600080fd5b5061039c6107523660046126cc565b611385565b34801561076357600080fd5b50600d5461036f906001600160a01b031681565b34801561078357600080fd5b506103426107923660046122d4565b611468565b3480156107a357600080fd5b506103e460135481565b3480156107b957600080fd5b506103e46107c83660046126cc565b611578565b3480156107d957600080fd5b506103426107e836600461254e565b6115a9565b3480156107f957600080fd5b50610317610808366004612707565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561084257600080fd5b506103e461085136600461236e565b6001600160a01b031660009081526016602052604090205490565b34801561087857600080fd5b5061039c61088736600461236e565b6116bb565b34801561089857600080fd5b506104fb6108a73660046122d4565b611714565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061090257506109028261187b565b92915050565b60606000805461091790612750565b80601f016020809104026020016040519081016040528092919081815260200182805461094390612750565b80156109905780601f1061096557610100808354040283529160200191610990565b820191906000526020600020905b81548152906001019060200180831161097357829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166109d75760405162461bcd60e51b81526004016109ce906127d7565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006109fe82610e0a565b9050806001600160a01b0316836001600160a01b03161415610a325760405162461bcd60e51b81526004016109ce9061283f565b336001600160a01b0382161480610a4e5750610a4e8133610808565b610a6a5760405162461bcd60e51b81526004016109ce906128a7565b610a74838361195e565b505050565b6000610a83610afd565b158015610a9257506012544210155b8015610a9f575060125415155b905090565b600a546001600160a01b03163314610ace5760405162461bcd60e51b81526004016109ce906128e9565b600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006013544210158015610a9f575050601354151590565b610b1f33826119d9565b610b3b5760405162461bcd60e51b81526004016109ce90612951565b610a74838383611a8b565b6000610b5183610f21565b8210610b6f5760405162461bcd60e51b81526004016109ce906129b9565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b03163314610bc25760405162461bcd60e51b81526004016109ce906128e9565b604051600090339047908381818185875af1925050503d8060008114610c04576040519150601f19603f3d011682016040523d82523d6000602084013e610c09565b606091505b5050905080610c2a5760405162461bcd60e51b81526004016109ce906129fb565b50565b610a748383836040518060200160405280600081525061134d565b6000610c5360085490565b8210610c715760405162461bcd60e51b81526004016109ce90612a63565b60088281548110610c8457610c84612a73565b90600052602060002001549050919050565b600a546001600160a01b03163314610cc05760405162461bcd60e51b81526004016109ce906128e9565b601355565b6000806002600b541415610ceb5760405162461bcd60e51b81526004016109ce90612abb565b6002600b55610cf8610afd565b610d145760405162461bcd60e51b81526004016109ce90612afd565b600083118015610d255750600a8311155b610d415760405162461bcd60e51b81526004016109ce90612b3f565b610d4e6055612710612b65565b83610d58600e5490565b610d629190612b7c565b1115610d805760405162461bcd60e51b81526004016109ce90612bc6565b34610d9266b1a2bc2ec5000085612bd6565b14610daf5760405162461bcd60e51b81526004016109ce90612c27565b6000610dba600e5490565b610dc5906001612b7c565b905060005b84811015610dfe57610de0600e80546001019055565b610dec610642600e5490565b80610df681612c37565b915050610dca565b506001600b5593915050565b6000818152600260205260408120546001600160a01b0316806109025760405162461bcd60e51b81526004016109ce90612caa565b600a546001600160a01b03163314610e695760405162461bcd60e51b81526004016109ce906128e9565b60005b8151811015610ed157600160146000848481518110610e8d57610e8d612a73565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610ec981612c37565b915050610e6c565b5050565b6001600160a01b03811660009081526014602052604081205460ff16610efd57506000919050565b6001600160a01b038216600090815260156020526040902054610902906005612b65565b60006001600160a01b038216610f495760405162461bcd60e51b81526004016109ce90612d12565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314610f8f5760405162461bcd60e51b81526004016109ce906128e9565b610f996000611bc5565b565b600a546001600160a01b03163314610fc55760405162461bcd60e51b81526004016109ce906128e9565b6002600b541415610fe85760405162461bcd60e51b81526004016109ce90612abb565b6001600160a01b039091166000908152601660205260409020556001600b55565b600a546001600160a01b031633146110335760405162461bcd60e51b81526004016109ce906128e9565b601255565b60606001805461091790612750565b6040805160208101909152600081528133444260405160200161106d9493929190612d4a565b60408051601f19818403018152919052805160209091012081526110913383611c24565b6000918252600c602052604090912090519055565b600a546001600160a01b031633146110d05760405162461bcd60e51b81526004016109ce906128e9565b601054156110f05760405162461bcd60e51b81526004016109ce90612dde565b601091909155601155565b6000806002600b5414156111215760405162461bcd60e51b81526004016109ce90612abb565b6002600b5561112e610a79565b61114a5760405162461bcd60e51b81526004016109ce90612e20565b826111675760405162461bcd60e51b81526004016109ce90612b3f565b3360009081526014602052604090205460ff166111965760405162461bcd60e51b81526004016109ce90612e60565b6111a36055612710612b65565b836111ad600e5490565b6111b79190612b7c565b11156111d55760405162461bcd60e51b81526004016109ce90612bc6565b346111e766b1a2bc2ec5000085612bd6565b146112045760405162461bcd60e51b81526004016109ce90612c27565b3360009081526015602052604081205461121f908590612b7c565b905060058111156112425760405162461bcd60e51b81526004016109ce90612ec8565b600061124d600e5490565b611258906001612b7c565b905060005b8581101561129157611273600e80546001019055565b61127f610642600e5490565b8061128981612c37565b91505061125d565b50336000908152601560205260409020919091556001600b5593915050565b610ed1338383611c3e565b600a546001600160a01b031633146112e55760405162461bcd60e51b81526004016109ce906128e9565b60005b8151811015610ed15760006014600084848151811061130957611309612a73565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061134581612c37565b9150506112e8565b61135733836119d9565b6113735760405162461bcd60e51b81526004016109ce90612951565b61137f84848484611ce1565b50505050565b6010546113a45760405162461bcd60e51b81526004016109ce90612f30565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b546001600160a01b0316156113f55760405162461bcd60e51b81526004016109ce90612f98565b60105461140182611578565b1461141e5760405162461bcd60e51b81526004016109ce90612fda565b60408051602081019091526011548152611439336000611c24565b60008052600c602052517f13649b2456f1b42fef0f0040b3aaeabcd21a76a0f3f5defd4f583839455116e85550565b6000818152600260205260409020546060906001600160a01b031661149f5760405162461bcd60e51b81526004016109ce90613042565b600d546001600160a01b03166114c357505060408051602081019091526000815290565b600d546000838152600c60205260409081902090517fa62f8deb0000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691829163a62f8deb9161151d918791600401613071565b60006040518083038186803b15801561153557600080fd5b505afa158015611549573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261157191908101906130e4565b9392505050565b60008160405160200161158b9190613141565b60408051601f19818403018152919052805160209091012092915050565b6000828152600260205260409020546060906001600160a01b03166115e05760405162461bcd60e51b81526004016109ce90613042565b600d546001600160a01b03166116055750604080516020810190915260008152610902565b60408051602081018252838152600d5491517fa62f8deb00000000000000000000000000000000000000000000000000000000815290916001600160a01b031690819063a62f8deb9061165e9088908690600401613157565b60006040518083038186803b15801561167657600080fd5b505afa15801561168a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116b291908101906130e4565b95945050505050565b600a546001600160a01b031633146116e55760405162461bcd60e51b81526004016109ce906128e9565b6001600160a01b03811661170b5760405162461bcd60e51b81526004016109ce906131ca565b610c2a81611bc5565b6000806002600b54141561173a5760405162461bcd60e51b81526004016109ce90612abb565b6002600b55821580159061174f5750600a8311155b61176b5760405162461bcd60e51b81526004016109ce90612b3f565b605583611777600f5490565b6117819190612b7c565b111561179f5760405162461bcd60e51b81526004016109ce90613232565b336000908152601660205260409020548311156117ce5760405162461bcd60e51b81526004016109ce9061329a565b60006117d9600e5490565b6117e66055612710612b65565b6117f09190612b7c565b6117fb906001612b7c565b905060005b8481101561184b57611816600f80546001019055565b611839611822600f5490565b61182f6055612710612b65565b6106429190612b7c565b8061184381612c37565b915050611800565b50336000908152601660205260408120805486929061186b908490612b65565b90915550506001600b5593915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061190e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061090257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610902565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906119a082610e0a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611a0d5760405162461bcd60e51b81526004016109ce90613302565b6000611a1883610e0a565b9050806001600160a01b0316846001600160a01b03161480611a535750836001600160a01b0316611a488461099a565b6001600160a01b0316145b80611a8357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611a9e82610e0a565b6001600160a01b031614611ac45760405162461bcd60e51b81526004016109ce9061336a565b6001600160a01b038216611aea5760405162461bcd60e51b81526004016109ce906133d2565b611af5838383611d14565b611b0060008261195e565b6001600160a01b0383166000908152600360205260408120805460019290611b29908490612b65565b90915550506001600160a01b0382166000908152600360205260408120805460019290611b57908490612b7c565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610ed1828260405180602001604052806000815250611dcc565b816001600160a01b0316836001600160a01b03161415611c705760405162461bcd60e51b81526004016109ce90613414565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611cd4908590612246565b60405180910390a3505050565b611cec848484611a8b565b611cf884848484611dff565b61137f5760405162461bcd60e51b81526004016109ce9061347c565b6001600160a01b038316611d6f57611d6a81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611d92565b816001600160a01b0316836001600160a01b031614611d9257611d928382611f56565b6001600160a01b038216611da957610a7481611ff3565b826001600160a01b0316826001600160a01b031614610a7457610a7482826120a2565b611dd683836120e6565b611de36000848484611dff565b610a745760405162461bcd60e51b81526004016109ce9061347c565b60006001600160a01b0384163b15611f4b576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290611e5c90339089908890889060040161348c565b602060405180830381600087803b158015611e7657600080fd5b505af1925050508015611ea6575060408051601f3d908101601f19168201909252611ea3918101906134db565b60015b611f00573d808015611ed4576040519150601f19603f3d011682016040523d82523d6000602084013e611ed9565b606091505b508051611ef85760405162461bcd60e51b81526004016109ce9061347c565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611a83565b506001949350505050565b60006001611f6384610f21565b611f6d9190612b65565b600083815260076020526040902054909150808214611fc0576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061200590600190612b65565b6000838152600960205260408120546008805493945090928490811061202d5761202d612a73565b90600052602060002001549050806008838154811061204e5761204e612a73565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612086576120866134fc565b6001900381819060005260206000200160009055905550505050565b60006120ad83610f21565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661210c5760405162461bcd60e51b81526004016109ce90613542565b6000818152600260205260409020546001600160a01b0316156121415760405162461bcd60e51b81526004016109ce90613584565b61214d60008383611d14565b6001600160a01b0382166000908152600360205260408120805460019290612176908490612b7c565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b8114610c2a57600080fd5b8035610902816121e1565b60006020828403121561223057612230600080fd5b6000611a838484612210565b8015155b82525050565b60208101610902828461223c565b60005b8381101561226f578181015183820152602001612257565b8381111561137f5750506000910152565b600061228a825190565b8084526020840193506122a1818560208601612254565b601f01601f19169290920192915050565b602080825281016115718184612280565b80612205565b8035610902816122c3565b6000602082840312156122e9576122e9600080fd5b6000611a8384846122c9565b60006001600160a01b038216610902565b612240816122f5565b602081016109028284612306565b612205816122f5565b80356109028161231d565b6000806040838503121561234757612347600080fd5b60006123538585612326565b9250506020612364858286016122c9565b9150509250929050565b60006020828403121561238357612383600080fd5b6000611a838484612326565b80612240565b60208101610902828461238f565b6000806000606084860312156123bb576123bb600080fd5b60006123c78686612326565b93505060206123d886828701612326565b92505060406123e9868287016122c9565b9150509250925092565b60408101612401828561238f565b611571602083018461238f565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561244a5761244a61240e565b6040525050565b600061245c60405190565b90506124688282612424565b919050565b600067ffffffffffffffff8211156124875761248761240e565b5060209081020190565b60006124a461249f8461246d565b612451565b838152905060208082019084028301858111156124c3576124c3600080fd5b835b818110156124e5576124d78782612326565b8352602092830192016124c5565b5050509392505050565b600082601f83011261250357612503600080fd5b8135611a83848260208601612491565b60006020828403121561252857612528600080fd5b813567ffffffffffffffff81111561254257612542600080fd5b611a83848285016124ef565b6000806040838503121561256457612564600080fd5b600061235385856122c9565b801515612205565b803561090281612570565b6000806040838503121561259957612599600080fd5b60006125a58585612326565b925050602061236485828601612578565b600067ffffffffffffffff8211156125d0576125d061240e565b601f19601f83011660200192915050565b82818337506000910152565b60006125fb61249f846125b6565b90508281526020810184848401111561261657612616600080fd5b6126218482856125e1565b509392505050565b600082601f83011261263d5761263d600080fd5b8135611a838482602086016125ed565b6000806000806080858703121561266657612666600080fd5b60006126728787612326565b945050602061268387828801612326565b9350506040612694878288016122c9565b925050606085013567ffffffffffffffff8111156126b4576126b4600080fd5b6126c087828801612629565b91505092959194509250565b6000602082840312156126e1576126e1600080fd5b813567ffffffffffffffff8111156126fb576126fb600080fd5b611a8384828501612629565b6000806040838503121561271d5761271d600080fd5b60006127298585612326565b925050602061236485828601612326565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061276457607f821691505b602082108114156127775761277761273a565b50919050565b602c8152602081017f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015290505b60400190565b602080825281016109028161277d565b60218152602081017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6581527f7200000000000000000000000000000000000000000000000000000000000000602082015290506127d1565b60208082528101610902816127e7565b60388152602081017f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015290506127d1565b602080825281016109028161284f565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b60208082528101610902816128b7565b60318152602081017f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f81527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015290506127d1565b60208082528101610902816128f9565b602b8152602081017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612961565b60118152602081017f5769746864726177616c206661696c6564000000000000000000000000000000815290506128e3565b60208082528101610902816129c9565b602c8152602081017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612a0b565b634e487b7160e01b600052603260045260246000fd5b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815290506128e3565b6020808252810161090281612a89565b60148152602081017f5075626c69632073616c65206e6f74206f70656e000000000000000000000000815290506128e3565b6020808252810161090281612acb565b60148152602081017f496e76616c69642052756e6e657220636f756e74000000000000000000000000815290506128e3565b6020808252810161090281612b0d565b634e487b7160e01b600052601160045260246000fd5b600082821015612b7757612b77612b4f565b500390565b60008219821115612b8f57612b8f612b4f565b500190565b601c8152602081017f416c6c2052756e6e6572732068617665206265656e206d696e74656400000000815290506128e3565b6020808252810161090281612b94565b6000816000190483118215151615612bf057612bf0612b4f565b500290565b601e8152602081017f496e636f727265637420616d6f756e74206f662065746865722073656e740000815290506128e3565b6020808252810161090281612bf5565b6000600019821415612c4b57612c4b612b4f565b5060010190565b60298152602081017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612c52565b602a8152602081017f4552433732313a2062616c616e636520717565727920666f7220746865207a6581527f726f206164647265737300000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612cba565b60006109028260601b90565b600061090282612d22565b612240612d45826122f5565b612d2e565b612d54818661238f565b602001612d618185612d39565b601401612d6e818461238f565b602001612d7b818361238f565b602001949350505050565b60278152602081017f52756e6e6572205a65726f2068617320616c7265616479206265656e20636f6e81527f6669677572656400000000000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612d86565b60158152602081017f4561726c7920616363657373206e6f74206f70656e0000000000000000000000815290506128e3565b6020808252810161090281612dee565b60208082527f41646472657373206e6f74206f6e204561726c7920416363657373206c69737491019081526128e3565b6020808252810161090281612e30565b602b8152602081017f4d6178204561726c792041636365737320636f756e742070657220616464726581527f7373206578636565646564000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612e70565b60238152602081017f52756e6e6572205a65726f20686173206e6f74206265656e20636f6e6669677581527f7265640000000000000000000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612ed8565b60238152602081017f52756e6e6572205a65726f2068617320616c7265616479206265656e206d696e81527f7465640000000000000000000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612f40565b600e8152602081017f496e636f72726563742073656564000000000000000000000000000000000000815290506128e3565b6020808252810161090281612fa8565b602f8152602081017f4552433732314d657461646174613a2055524920717565727920666f72206e6f81527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612fea565b600081610902565b805461306581613052565b9050610a74838261238f565b6040810161307f828561238f565b611571602083018461305a565b600061309a61249f846125b6565b9050828152602081018484840111156130b5576130b5600080fd5b612621848285612254565b600082601f8301126130d4576130d4600080fd5b8151611a8384826020860161308c565b6000602082840312156130f9576130f9600080fd5b815167ffffffffffffffff81111561311357613113600080fd5b611a83848285016130c0565b6000613129825190565b613137818560208601612254565b9290920192915050565b610902818361311f565b8051610a74838261238f565b60408101613165828561238f565b611571602083018461314b565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281613172565b60258152602081017f416c6c2072657365727665642052756e6e6572732068617665206265656e206d81527f696e746564000000000000000000000000000000000000000000000000000000602082015290506127d1565b60208082528101610902816131da565b602a8152602081017f596f752063616e6e6f74206d696e742074686973206d616e792072657365727681527f65642052756e6e65727300000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281613242565b602c8152602081017f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015290506127d1565b60208082528101610902816132aa565b60298152602081017f4552433732313a207472616e73666572206f6620746f6b656e2074686174206981527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281613312565b60248152602081017f4552433732313a207472616e7366657220746f20746865207a65726f2061646481527f7265737300000000000000000000000000000000000000000000000000000000602082015290506127d1565b602080825281016109028161337a565b60198152602081017f4552433732313a20617070726f766520746f2063616c6c657200000000000000815290506128e3565b60208082528101610902816133e2565b60328152602081017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015290506127d1565b6020808252810161090281613424565b6080810161349a8287612306565b6134a76020830186612306565b6134b4604083018561238f565b81810360608301526134c68184612280565b9695505050505050565b8051610902816121e1565b6000602082840312156134f0576134f0600080fd5b6000611a8384846134d0565b634e487b7160e01b600052603160045260246000fd5b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526128e3565b6020808252810161090281613512565b601c8152602081017f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000815290506128e3565b602080825281016109028161355256fea26469706673582212208facaf20879faa8eb9193b260b7a6670441d053a0b1f744ac88bfc0655fe036d64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106102eb5760003560e01c80637de46b6911610184578063b88d4fde116100d6578063e670f7cd1161008a578063f252460111610064578063f252460114610836578063f2fde38b1461086c578063f42202e81461088c57600080fd5b8063e670f7cd146107ad578063e69c8a91146107cd578063e985e9c5146107ed57600080fd5b8063c074f412116100bb578063c074f41214610757578063c87b56dd14610777578063d7822c991461079757600080fd5b8063b88d4fde14610717578063bb49ec7e1461073757600080fd5b8063a08cdf6611610138578063a22cb46511610112578063a22cb465146106a7578063ac5fcdee146106c7578063b1acb346146106f757600080fd5b8063a08cdf6614610647578063a13c038314610674578063a1e5995b1461069457600080fd5b806395d89b411161016957806395d89b41146105fc5780639676763014610611578063a0712d681461062757600080fd5b80637de46b69146105be5780638da5cb5b146105de57600080fd5b8063422627c31161023d5780636352211e116101f157806370a08231116101cb57806370a0823114610569578063715018a6146105895780637dd0dbb51461059e57600080fd5b80636352211e146105095780636dcec528146105295780636e642aba1461054957600080fd5b80634f6ccce7116102225780634f6ccce7146104a8578063511a9605146104c85780635a5e5d58146104e857600080fd5b8063422627c31461045b57806342842e0e1461048857600080fd5b806312b40a9f1161029f57806323b872dd1161027957806323b872dd146104065780632f745c59146104265780633ccfd60b1461044657600080fd5b806312b40a9f146103b357806318160ddd146103d35780631a6949e3146103f157600080fd5b8063081812fc116102d0578063081812fc1461034f578063095ea7b31461037c5780630d0090ef1461039e57600080fd5b806301ffc9a7146102f757806306fdde031461032d57600080fd5b366102f257005b600080fd5b34801561030357600080fd5b5061031761031236600461221b565b6108ac565b6040516103249190612246565b60405180910390f35b34801561033957600080fd5b50610342610908565b60405161032491906122b2565b34801561035b57600080fd5b5061036f61036a3660046122d4565b61099a565b604051610324919061230f565b34801561038857600080fd5b5061039c610397366004612331565b6109f3565b005b3480156103aa57600080fd5b50610317610a79565b3480156103bf57600080fd5b5061039c6103ce36600461236e565b610aa4565b3480156103df57600080fd5b506008545b6040516103249190612395565b3480156103fd57600080fd5b50610317610afd565b34801561041257600080fd5b5061039c6104213660046123a3565b610b15565b34801561043257600080fd5b506103e4610441366004612331565b610b46565b34801561045257600080fd5b5061039c610b98565b34801561046757600080fd5b506103e46104763660046122d4565b6000908152600c602052604090205490565b34801561049457600080fd5b5061039c6104a33660046123a3565b610c2d565b3480156104b457600080fd5b506103e46104c33660046122d4565b610c48565b3480156104d457600080fd5b5061039c6104e33660046122d4565b610c96565b6104fb6104f63660046122d4565b610cc5565b6040516103249291906123f3565b34801561051557600080fd5b5061036f6105243660046122d4565b610e0a565b34801561053557600080fd5b5061039c610544366004612513565b610e3f565b34801561055557600080fd5b506103e461056436600461236e565b610ed5565b34801561057557600080fd5b506103e461058436600461236e565b610f21565b34801561059557600080fd5b5061039c610f65565b3480156105aa57600080fd5b5061039c6105b9366004612331565b610f9b565b3480156105ca57600080fd5b5061039c6105d93660046122d4565b611009565b3480156105ea57600080fd5b50600a546001600160a01b031661036f565b34801561060857600080fd5b50610342611038565b34801561061d57600080fd5b506103e460125481565b34801561063357600080fd5b5061039c6106423660046122d4565b611047565b34801561065357600080fd5b506103e461066236600461236e565b60156020526000908152604090205481565b34801561068057600080fd5b5061039c61068f36600461254e565b6110a6565b6104fb6106a23660046122d4565b6110fb565b3480156106b357600080fd5b5061039c6106c2366004612583565b6112b0565b3480156106d357600080fd5b506103176106e236600461236e565b60146020526000908152604090205460ff1681565b34801561070357600080fd5b5061039c610712366004612513565b6112bb565b34801561072357600080fd5b5061039c61073236600461264d565b61134d565b34801561074357600080fd5b5061039c6107523660046126cc565b611385565b34801561076357600080fd5b50600d5461036f906001600160a01b031681565b34801561078357600080fd5b506103426107923660046122d4565b611468565b3480156107a357600080fd5b506103e460135481565b3480156107b957600080fd5b506103e46107c83660046126cc565b611578565b3480156107d957600080fd5b506103426107e836600461254e565b6115a9565b3480156107f957600080fd5b50610317610808366004612707565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561084257600080fd5b506103e461085136600461236e565b6001600160a01b031660009081526016602052604090205490565b34801561087857600080fd5b5061039c61088736600461236e565b6116bb565b34801561089857600080fd5b506104fb6108a73660046122d4565b611714565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061090257506109028261187b565b92915050565b60606000805461091790612750565b80601f016020809104026020016040519081016040528092919081815260200182805461094390612750565b80156109905780601f1061096557610100808354040283529160200191610990565b820191906000526020600020905b81548152906001019060200180831161097357829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166109d75760405162461bcd60e51b81526004016109ce906127d7565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006109fe82610e0a565b9050806001600160a01b0316836001600160a01b03161415610a325760405162461bcd60e51b81526004016109ce9061283f565b336001600160a01b0382161480610a4e5750610a4e8133610808565b610a6a5760405162461bcd60e51b81526004016109ce906128a7565b610a74838361195e565b505050565b6000610a83610afd565b158015610a9257506012544210155b8015610a9f575060125415155b905090565b600a546001600160a01b03163314610ace5760405162461bcd60e51b81526004016109ce906128e9565b600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006013544210158015610a9f575050601354151590565b610b1f33826119d9565b610b3b5760405162461bcd60e51b81526004016109ce90612951565b610a74838383611a8b565b6000610b5183610f21565b8210610b6f5760405162461bcd60e51b81526004016109ce906129b9565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b03163314610bc25760405162461bcd60e51b81526004016109ce906128e9565b604051600090339047908381818185875af1925050503d8060008114610c04576040519150601f19603f3d011682016040523d82523d6000602084013e610c09565b606091505b5050905080610c2a5760405162461bcd60e51b81526004016109ce906129fb565b50565b610a748383836040518060200160405280600081525061134d565b6000610c5360085490565b8210610c715760405162461bcd60e51b81526004016109ce90612a63565b60088281548110610c8457610c84612a73565b90600052602060002001549050919050565b600a546001600160a01b03163314610cc05760405162461bcd60e51b81526004016109ce906128e9565b601355565b6000806002600b541415610ceb5760405162461bcd60e51b81526004016109ce90612abb565b6002600b55610cf8610afd565b610d145760405162461bcd60e51b81526004016109ce90612afd565b600083118015610d255750600a8311155b610d415760405162461bcd60e51b81526004016109ce90612b3f565b610d4e6055612710612b65565b83610d58600e5490565b610d629190612b7c565b1115610d805760405162461bcd60e51b81526004016109ce90612bc6565b34610d9266b1a2bc2ec5000085612bd6565b14610daf5760405162461bcd60e51b81526004016109ce90612c27565b6000610dba600e5490565b610dc5906001612b7c565b905060005b84811015610dfe57610de0600e80546001019055565b610dec610642600e5490565b80610df681612c37565b915050610dca565b506001600b5593915050565b6000818152600260205260408120546001600160a01b0316806109025760405162461bcd60e51b81526004016109ce90612caa565b600a546001600160a01b03163314610e695760405162461bcd60e51b81526004016109ce906128e9565b60005b8151811015610ed157600160146000848481518110610e8d57610e8d612a73565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610ec981612c37565b915050610e6c565b5050565b6001600160a01b03811660009081526014602052604081205460ff16610efd57506000919050565b6001600160a01b038216600090815260156020526040902054610902906005612b65565b60006001600160a01b038216610f495760405162461bcd60e51b81526004016109ce90612d12565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314610f8f5760405162461bcd60e51b81526004016109ce906128e9565b610f996000611bc5565b565b600a546001600160a01b03163314610fc55760405162461bcd60e51b81526004016109ce906128e9565b6002600b541415610fe85760405162461bcd60e51b81526004016109ce90612abb565b6001600160a01b039091166000908152601660205260409020556001600b55565b600a546001600160a01b031633146110335760405162461bcd60e51b81526004016109ce906128e9565b601255565b60606001805461091790612750565b6040805160208101909152600081528133444260405160200161106d9493929190612d4a565b60408051601f19818403018152919052805160209091012081526110913383611c24565b6000918252600c602052604090912090519055565b600a546001600160a01b031633146110d05760405162461bcd60e51b81526004016109ce906128e9565b601054156110f05760405162461bcd60e51b81526004016109ce90612dde565b601091909155601155565b6000806002600b5414156111215760405162461bcd60e51b81526004016109ce90612abb565b6002600b5561112e610a79565b61114a5760405162461bcd60e51b81526004016109ce90612e20565b826111675760405162461bcd60e51b81526004016109ce90612b3f565b3360009081526014602052604090205460ff166111965760405162461bcd60e51b81526004016109ce90612e60565b6111a36055612710612b65565b836111ad600e5490565b6111b79190612b7c565b11156111d55760405162461bcd60e51b81526004016109ce90612bc6565b346111e766b1a2bc2ec5000085612bd6565b146112045760405162461bcd60e51b81526004016109ce90612c27565b3360009081526015602052604081205461121f908590612b7c565b905060058111156112425760405162461bcd60e51b81526004016109ce90612ec8565b600061124d600e5490565b611258906001612b7c565b905060005b8581101561129157611273600e80546001019055565b61127f610642600e5490565b8061128981612c37565b91505061125d565b50336000908152601560205260409020919091556001600b5593915050565b610ed1338383611c3e565b600a546001600160a01b031633146112e55760405162461bcd60e51b81526004016109ce906128e9565b60005b8151811015610ed15760006014600084848151811061130957611309612a73565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061134581612c37565b9150506112e8565b61135733836119d9565b6113735760405162461bcd60e51b81526004016109ce90612951565b61137f84848484611ce1565b50505050565b6010546113a45760405162461bcd60e51b81526004016109ce90612f30565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b546001600160a01b0316156113f55760405162461bcd60e51b81526004016109ce90612f98565b60105461140182611578565b1461141e5760405162461bcd60e51b81526004016109ce90612fda565b60408051602081019091526011548152611439336000611c24565b60008052600c602052517f13649b2456f1b42fef0f0040b3aaeabcd21a76a0f3f5defd4f583839455116e85550565b6000818152600260205260409020546060906001600160a01b031661149f5760405162461bcd60e51b81526004016109ce90613042565b600d546001600160a01b03166114c357505060408051602081019091526000815290565b600d546000838152600c60205260409081902090517fa62f8deb0000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691829163a62f8deb9161151d918791600401613071565b60006040518083038186803b15801561153557600080fd5b505afa158015611549573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261157191908101906130e4565b9392505050565b60008160405160200161158b9190613141565b60408051601f19818403018152919052805160209091012092915050565b6000828152600260205260409020546060906001600160a01b03166115e05760405162461bcd60e51b81526004016109ce90613042565b600d546001600160a01b03166116055750604080516020810190915260008152610902565b60408051602081018252838152600d5491517fa62f8deb00000000000000000000000000000000000000000000000000000000815290916001600160a01b031690819063a62f8deb9061165e9088908690600401613157565b60006040518083038186803b15801561167657600080fd5b505afa15801561168a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116b291908101906130e4565b95945050505050565b600a546001600160a01b031633146116e55760405162461bcd60e51b81526004016109ce906128e9565b6001600160a01b03811661170b5760405162461bcd60e51b81526004016109ce906131ca565b610c2a81611bc5565b6000806002600b54141561173a5760405162461bcd60e51b81526004016109ce90612abb565b6002600b55821580159061174f5750600a8311155b61176b5760405162461bcd60e51b81526004016109ce90612b3f565b605583611777600f5490565b6117819190612b7c565b111561179f5760405162461bcd60e51b81526004016109ce90613232565b336000908152601660205260409020548311156117ce5760405162461bcd60e51b81526004016109ce9061329a565b60006117d9600e5490565b6117e66055612710612b65565b6117f09190612b7c565b6117fb906001612b7c565b905060005b8481101561184b57611816600f80546001019055565b611839611822600f5490565b61182f6055612710612b65565b6106429190612b7c565b8061184381612c37565b915050611800565b50336000908152601660205260408120805486929061186b908490612b65565b90915550506001600b5593915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061190e57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061090257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610902565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906119a082610e0a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611a0d5760405162461bcd60e51b81526004016109ce90613302565b6000611a1883610e0a565b9050806001600160a01b0316846001600160a01b03161480611a535750836001600160a01b0316611a488461099a565b6001600160a01b0316145b80611a8357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611a9e82610e0a565b6001600160a01b031614611ac45760405162461bcd60e51b81526004016109ce9061336a565b6001600160a01b038216611aea5760405162461bcd60e51b81526004016109ce906133d2565b611af5838383611d14565b611b0060008261195e565b6001600160a01b0383166000908152600360205260408120805460019290611b29908490612b65565b90915550506001600160a01b0382166000908152600360205260408120805460019290611b57908490612b7c565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610ed1828260405180602001604052806000815250611dcc565b816001600160a01b0316836001600160a01b03161415611c705760405162461bcd60e51b81526004016109ce90613414565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611cd4908590612246565b60405180910390a3505050565b611cec848484611a8b565b611cf884848484611dff565b61137f5760405162461bcd60e51b81526004016109ce9061347c565b6001600160a01b038316611d6f57611d6a81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611d92565b816001600160a01b0316836001600160a01b031614611d9257611d928382611f56565b6001600160a01b038216611da957610a7481611ff3565b826001600160a01b0316826001600160a01b031614610a7457610a7482826120a2565b611dd683836120e6565b611de36000848484611dff565b610a745760405162461bcd60e51b81526004016109ce9061347c565b60006001600160a01b0384163b15611f4b576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290611e5c90339089908890889060040161348c565b602060405180830381600087803b158015611e7657600080fd5b505af1925050508015611ea6575060408051601f3d908101601f19168201909252611ea3918101906134db565b60015b611f00573d808015611ed4576040519150601f19603f3d011682016040523d82523d6000602084013e611ed9565b606091505b508051611ef85760405162461bcd60e51b81526004016109ce9061347c565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611a83565b506001949350505050565b60006001611f6384610f21565b611f6d9190612b65565b600083815260076020526040902054909150808214611fc0576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061200590600190612b65565b6000838152600960205260408120546008805493945090928490811061202d5761202d612a73565b90600052602060002001549050806008838154811061204e5761204e612a73565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612086576120866134fc565b6001900381819060005260206000200160009055905550505050565b60006120ad83610f21565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661210c5760405162461bcd60e51b81526004016109ce90613542565b6000818152600260205260409020546001600160a01b0316156121415760405162461bcd60e51b81526004016109ce90613584565b61214d60008383611d14565b6001600160a01b0382166000908152600360205260408120805460019290612176908490612b7c565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b8114610c2a57600080fd5b8035610902816121e1565b60006020828403121561223057612230600080fd5b6000611a838484612210565b8015155b82525050565b60208101610902828461223c565b60005b8381101561226f578181015183820152602001612257565b8381111561137f5750506000910152565b600061228a825190565b8084526020840193506122a1818560208601612254565b601f01601f19169290920192915050565b602080825281016115718184612280565b80612205565b8035610902816122c3565b6000602082840312156122e9576122e9600080fd5b6000611a8384846122c9565b60006001600160a01b038216610902565b612240816122f5565b602081016109028284612306565b612205816122f5565b80356109028161231d565b6000806040838503121561234757612347600080fd5b60006123538585612326565b9250506020612364858286016122c9565b9150509250929050565b60006020828403121561238357612383600080fd5b6000611a838484612326565b80612240565b60208101610902828461238f565b6000806000606084860312156123bb576123bb600080fd5b60006123c78686612326565b93505060206123d886828701612326565b92505060406123e9868287016122c9565b9150509250925092565b60408101612401828561238f565b611571602083018461238f565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561244a5761244a61240e565b6040525050565b600061245c60405190565b90506124688282612424565b919050565b600067ffffffffffffffff8211156124875761248761240e565b5060209081020190565b60006124a461249f8461246d565b612451565b838152905060208082019084028301858111156124c3576124c3600080fd5b835b818110156124e5576124d78782612326565b8352602092830192016124c5565b5050509392505050565b600082601f83011261250357612503600080fd5b8135611a83848260208601612491565b60006020828403121561252857612528600080fd5b813567ffffffffffffffff81111561254257612542600080fd5b611a83848285016124ef565b6000806040838503121561256457612564600080fd5b600061235385856122c9565b801515612205565b803561090281612570565b6000806040838503121561259957612599600080fd5b60006125a58585612326565b925050602061236485828601612578565b600067ffffffffffffffff8211156125d0576125d061240e565b601f19601f83011660200192915050565b82818337506000910152565b60006125fb61249f846125b6565b90508281526020810184848401111561261657612616600080fd5b6126218482856125e1565b509392505050565b600082601f83011261263d5761263d600080fd5b8135611a838482602086016125ed565b6000806000806080858703121561266657612666600080fd5b60006126728787612326565b945050602061268387828801612326565b9350506040612694878288016122c9565b925050606085013567ffffffffffffffff8111156126b4576126b4600080fd5b6126c087828801612629565b91505092959194509250565b6000602082840312156126e1576126e1600080fd5b813567ffffffffffffffff8111156126fb576126fb600080fd5b611a8384828501612629565b6000806040838503121561271d5761271d600080fd5b60006127298585612326565b925050602061236485828601612326565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061276457607f821691505b602082108114156127775761277761273a565b50919050565b602c8152602081017f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015290505b60400190565b602080825281016109028161277d565b60218152602081017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6581527f7200000000000000000000000000000000000000000000000000000000000000602082015290506127d1565b60208082528101610902816127e7565b60388152602081017f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015290506127d1565b602080825281016109028161284f565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b60208082528101610902816128b7565b60318152602081017f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f81527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015290506127d1565b60208082528101610902816128f9565b602b8152602081017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612961565b60118152602081017f5769746864726177616c206661696c6564000000000000000000000000000000815290506128e3565b60208082528101610902816129c9565b602c8152602081017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612a0b565b634e487b7160e01b600052603260045260246000fd5b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815290506128e3565b6020808252810161090281612a89565b60148152602081017f5075626c69632073616c65206e6f74206f70656e000000000000000000000000815290506128e3565b6020808252810161090281612acb565b60148152602081017f496e76616c69642052756e6e657220636f756e74000000000000000000000000815290506128e3565b6020808252810161090281612b0d565b634e487b7160e01b600052601160045260246000fd5b600082821015612b7757612b77612b4f565b500390565b60008219821115612b8f57612b8f612b4f565b500190565b601c8152602081017f416c6c2052756e6e6572732068617665206265656e206d696e74656400000000815290506128e3565b6020808252810161090281612b94565b6000816000190483118215151615612bf057612bf0612b4f565b500290565b601e8152602081017f496e636f727265637420616d6f756e74206f662065746865722073656e740000815290506128e3565b6020808252810161090281612bf5565b6000600019821415612c4b57612c4b612b4f565b5060010190565b60298152602081017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612c52565b602a8152602081017f4552433732313a2062616c616e636520717565727920666f7220746865207a6581527f726f206164647265737300000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612cba565b60006109028260601b90565b600061090282612d22565b612240612d45826122f5565b612d2e565b612d54818661238f565b602001612d618185612d39565b601401612d6e818461238f565b602001612d7b818361238f565b602001949350505050565b60278152602081017f52756e6e6572205a65726f2068617320616c7265616479206265656e20636f6e81527f6669677572656400000000000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612d86565b60158152602081017f4561726c7920616363657373206e6f74206f70656e0000000000000000000000815290506128e3565b6020808252810161090281612dee565b60208082527f41646472657373206e6f74206f6e204561726c7920416363657373206c69737491019081526128e3565b6020808252810161090281612e30565b602b8152602081017f4d6178204561726c792041636365737320636f756e742070657220616464726581527f7373206578636565646564000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612e70565b60238152602081017f52756e6e6572205a65726f20686173206e6f74206265656e20636f6e6669677581527f7265640000000000000000000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612ed8565b60238152602081017f52756e6e6572205a65726f2068617320616c7265616479206265656e206d696e81527f7465640000000000000000000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612f40565b600e8152602081017f496e636f72726563742073656564000000000000000000000000000000000000815290506128e3565b6020808252810161090281612fa8565b602f8152602081017f4552433732314d657461646174613a2055524920717565727920666f72206e6f81527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015290506127d1565b6020808252810161090281612fea565b600081610902565b805461306581613052565b9050610a74838261238f565b6040810161307f828561238f565b611571602083018461305a565b600061309a61249f846125b6565b9050828152602081018484840111156130b5576130b5600080fd5b612621848285612254565b600082601f8301126130d4576130d4600080fd5b8151611a8384826020860161308c565b6000602082840312156130f9576130f9600080fd5b815167ffffffffffffffff81111561311357613113600080fd5b611a83848285016130c0565b6000613129825190565b613137818560208601612254565b9290920192915050565b610902818361311f565b8051610a74838261238f565b60408101613165828561238f565b611571602083018461314b565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281613172565b60258152602081017f416c6c2072657365727665642052756e6e6572732068617665206265656e206d81527f696e746564000000000000000000000000000000000000000000000000000000602082015290506127d1565b60208082528101610902816131da565b602a8152602081017f596f752063616e6e6f74206d696e742074686973206d616e792072657365727681527f65642052756e6e65727300000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281613242565b602c8152602081017f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015290506127d1565b60208082528101610902816132aa565b60298152602081017f4552433732313a207472616e73666572206f6620746f6b656e2074686174206981527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015290506127d1565b6020808252810161090281613312565b60248152602081017f4552433732313a207472616e7366657220746f20746865207a65726f2061646481527f7265737300000000000000000000000000000000000000000000000000000000602082015290506127d1565b602080825281016109028161337a565b60198152602081017f4552433732313a20617070726f766520746f2063616c6c657200000000000000815290506128e3565b60208082528101610902816133e2565b60328152602081017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015290506127d1565b6020808252810161090281613424565b6080810161349a8287612306565b6134a76020830186612306565b6134b4604083018561238f565b81810360608301526134c68184612280565b9695505050505050565b8051610902816121e1565b6000602082840312156134f0576134f0600080fd5b6000611a8384846134d0565b634e487b7160e01b600052603160045260246000fd5b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526128e3565b6020808252810161090281613512565b601c8152602081017f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000815290506128e3565b602080825281016109028161355256fea26469706673582212208facaf20879faa8eb9193b260b7a6670441d053a0b1f744ac88bfc0655fe036d64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1802,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1804,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1808,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1812,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1816,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1822,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2756,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2760,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2763,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2767,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 225,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 425,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 8367,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "runners",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(ChainRunner)13235_storage)"
      },
      {
        "astId": 8369,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "renderingContractAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 8382,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Counter)3462_storage"
      },
      {
        "astId": 8385,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "_reservedTokenIds",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Counter)3462_storage"
      },
      {
        "astId": 8407,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "runnerZeroHash",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 8409,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "runnerZeroDNA",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 8411,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "earlyAccessStartTimestamp",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 8413,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "publicSaleStartTimestamp",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 8417,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "isOnEarlyAccessList",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8421,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "earlyAccessMintedCounts",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8425,
        "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
        "label": "founderMintCountsRemaining",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ChainRunner)13235_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ChainRunnersTypes.ChainRunner)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainRunner)13235_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChainRunner)13235_storage": {
        "encoding": "inplace",
        "label": "struct ChainRunnersTypes.ChainRunner",
        "members": [
          {
            "astId": 13234,
            "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
            "label": "dna",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3462_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3461,
            "contract": "contracts/runners/ChainRunners.sol:ChainRunners",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}