{
  "address": "0x2a810409872AfC346F9B5b26571Fd6eC42EA4849",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes1",
          "name": "first",
          "type": "bytes1"
        },
        {
          "internalType": "bytes1",
          "name": "second",
          "type": "bytes1"
        },
        {
          "internalType": "bytes1",
          "name": "third",
          "type": "bytes1"
        }
      ],
      "name": "load12x2",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes1",
          "name": "_leadingBytes",
          "type": "bytes1"
        },
        {
          "internalType": "bytes1",
          "name": "_endingBytes",
          "type": "bytes1"
        }
      ],
      "name": "load16",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_base",
          "type": "uint8"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_base",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_padding",
          "type": "uint8"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x25e86cd4fc04a5edd9d4586a4d49012eca5e28d52ccf5700c4068097675e7135",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2a810409872AfC346F9B5b26571Fd6eC42EA4849",
    "transactionIndex": 0,
    "gasUsed": "476051",
    "logsBloom": "0x
    "blockHash": "0xd4c6ba660b5d765011527147a76c9d2e4030399f182966ce8b8819da0be5ff3b",
    "transactionHash": "0x25e86cd4fc04a5edd9d4586a4d49012eca5e28d52ccf5700c4068097675e7135",
    "logs": [],
    "blockNumber": 14088825,
    "cumulativeGasUsed": "476051",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0464b55ace3cba2f67d8122017481bf4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"first\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"second\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"third\",\"type\":\"bytes1\"}],\"name\":\"load12x2\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"_leadingBytes\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"_endingBytes\",\"type\":\"bytes1\"}],\"name\":\"load16\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_base\",\"type\":\"uint8\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_base\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_padding\",\"type\":\"uint8\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Clement Walter <clement0walter@gmail.com>\",\"kind\":\"dev\",\"methods\":{\"load12x2(bytes1,bytes1,bytes1)\":{\"returns\":{\"_0\":\"(uint16, uint16) The two uint16 values up to 2^12 each\"}},\"load16(bytes1,bytes1)\":{\"params\":{\"_endingBytes\":\"the second byte of the unsigned integer in [0, 255]\",\"_leadingBytes\":\"the first byte of the unsigned integer in [256, 65536]\"},\"returns\":{\"_0\":\"uint16 The resulting integer value\"}},\"toString(uint256,uint8,uint8)\":{\"params\":{\"_base\":\"The base to convert the number to\",\"_number\":\"The unsigned integer to be converted to a string\",\"_padding\":\"The target length of the string; result will be padded with 0 to reach this length while padding         of 0 means no padding\"},\"returns\":{\"_0\":\"bytes The resulting ASCII string value\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"load12x2(bytes1,bytes1,bytes1)\":{\"notice\":\"Load 12 Converts three bytes into two uint12 integers\"},\"load16(bytes1,bytes1)\":{\"notice\":\"Load 16 Converts two bytes to a 16 bit unsigned integer\"},\"toString(uint256,uint8,uint8)\":{\"notice\":\"To String Converts an unsigned integer to the string equivalent value, returned as bytes Equivalent to javascript's toString(base)\"}},\"notice\":\"Integers Library updated from https://github.com/willitscale/solidity-util In summary this is a simple library of integer functions which allow a simple conversion to and from strings\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/Integers.sol\":\"Integers\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/lib/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < count; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n\\n    /**\\n     * Load 16\\n     *\\n     * Converts two bytes to a 16 bit unsigned integer\\n     *\\n     * @param _leadingBytes the first byte of the unsigned integer in [256, 65536]\\n     * @param _endingBytes the second byte of the unsigned integer in [0, 255]\\n     * @return uint16 The resulting integer value\\n     */\\n    function load16(bytes1 _leadingBytes, bytes1 _endingBytes)\\n        public\\n        pure\\n        returns (uint16)\\n    {\\n        return\\n            (uint16(uint8(_leadingBytes)) << 8) + uint16(uint8(_endingBytes));\\n    }\\n\\n    /**\\n     * Load 12\\n     *\\n     * Converts three bytes into two uint12 integers\\n     *\\n     * @return (uint16, uint16) The two uint16 values up to 2^12 each\\n     */\\n    function load12x2(\\n        bytes1 first,\\n        bytes1 second,\\n        bytes1 third\\n    ) public pure returns (uint16, uint16) {\\n        return (\\n            (uint16(uint8(first)) << 4) + (uint16(uint8(second)) >> 4),\\n            (uint16(uint8(second & hex\\\"0f\\\")) << 8) + uint16(uint8(third))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7d20e3fab34d97af5681961ac0a58f3177794fcf4c0283e5723d8797dcd017f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6107a961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c80636900a3ae1161005a5780636900a3ae146100c0578063c1338a69146100d3578063c44e8fec146100e657600080fd5b8063338dc7fd146100765780635dfb512c1461009f575b600080fd5b610089610084366004610528565b610106565b60405161009691906105e7565b60405180910390f35b6100b26100ad3660046104c0565b61011d565b604051610096929190610608565b6100896100ce36600461050b565b610158565b6100896100e1366004610556565b610163565b6100f96100f4366004610488565b61044f565b60405161009691906105f8565b606061011483836000610163565b90505b92915050565b60008061013660fc85901c610ff060f488901c16610622565b61014c60f885901c610f0060f088901c16610622565b91509150935093915050565b606061011782600a60005b60606000845b80156101915781610179816106b9565b925061018a905060ff86168261065e565b9050610169565b856101a457816101a0816106b9565b9250505b606060ff8516610207578267ffffffffffffffff8111156101d557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156101ff576020820181803683370190505b50905061025f565b8460ff1667ffffffffffffffff81111561023157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561025b576020820181803683370190505b5090505b60005b8381101561039c5761027760ff8816896106f2565b9250600a8310156102fc5761028d83603061064b565b60f81b8260018385516102a09190610672565b6102aa9190610672565b815181106102c857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061037d565b610307600a846106f2565b61031290604161064b565b60f81b8260018385516103259190610672565b61032f9190610672565b8151811061034d57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b61038a60ff88168961065e565b9750610395816106b9565b9050610262565b50825b8560ff16811015610442577f30000000000000000000000000000000000000000000000000000000000000008260018385516103db9190610672565b6103e59190610672565b8151811061040357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061043b816106b9565b905061039f565b50925050505b9392505050565b600061011460f883901c61ff0060f086901c16610622565b803561011781610732565b803561011781610764565b80356101178161076a565b6000806040838503121561049a578182fd5b6104a684838501610467565b915060206104b685828601610467565b9150509250929050565b6000806000606084860312156104d4578081fd5b6104e085828601610467565b925060206104f086828701610467565b925050604061050186828701610467565b9150509250925092565b60006020828403121561051c578081fd5b61011483828401610472565b6000806040838503121561053a578182fd5b61054684838501610472565b915060206104b68582860161047d565b60008060006060848603121561056a578283fd5b61057685848601610472565b925060206105868682870161047d565b92505060406105018682870161047d565b60006105a1825190565b8084526020840193506105b8818560208601610689565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b602080825281016101148184610597565b61ffff8216815260208101610117565b61ffff831681526040810161ffff83166020830152610448565b61ffff8116905061ffff8216915060008261ffff0382111561064657610646610706565b500190565b6000821982111561064657610646610706565b60008261066d5761066d61071c565b500490565b60008282101561068457610684610706565b500390565b60005b838110156106a457818101518382015260200161068c565b838111156106b3576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156106eb576106eb610706565b5060010190565b6000826107015761070161071c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b7fff0000000000000000000000000000000000000000000000000000000000000081165b811461076157600080fd5b50565b80610756565b60ff811661075656fea264697066735822122097f668b9fdd688fcfe01c617d5c7001c1f364fd2354d78d8b408c4f06ff6234564736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c80636900a3ae1161005a5780636900a3ae146100c0578063c1338a69146100d3578063c44e8fec146100e657600080fd5b8063338dc7fd146100765780635dfb512c1461009f575b600080fd5b610089610084366004610528565b610106565b60405161009691906105e7565b60405180910390f35b6100b26100ad3660046104c0565b61011d565b604051610096929190610608565b6100896100ce36600461050b565b610158565b6100896100e1366004610556565b610163565b6100f96100f4366004610488565b61044f565b60405161009691906105f8565b606061011483836000610163565b90505b92915050565b60008061013660fc85901c610ff060f488901c16610622565b61014c60f885901c610f0060f088901c16610622565b91509150935093915050565b606061011782600a60005b60606000845b80156101915781610179816106b9565b925061018a905060ff86168261065e565b9050610169565b856101a457816101a0816106b9565b9250505b606060ff8516610207578267ffffffffffffffff8111156101d557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156101ff576020820181803683370190505b50905061025f565b8460ff1667ffffffffffffffff81111561023157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561025b576020820181803683370190505b5090505b60005b8381101561039c5761027760ff8816896106f2565b9250600a8310156102fc5761028d83603061064b565b60f81b8260018385516102a09190610672565b6102aa9190610672565b815181106102c857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061037d565b610307600a846106f2565b61031290604161064b565b60f81b8260018385516103259190610672565b61032f9190610672565b8151811061034d57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b61038a60ff88168961065e565b9750610395816106b9565b9050610262565b50825b8560ff16811015610442577f30000000000000000000000000000000000000000000000000000000000000008260018385516103db9190610672565b6103e59190610672565b8151811061040357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061043b816106b9565b905061039f565b50925050505b9392505050565b600061011460f883901c61ff0060f086901c16610622565b803561011781610732565b803561011781610764565b80356101178161076a565b6000806040838503121561049a578182fd5b6104a684838501610467565b915060206104b685828601610467565b9150509250929050565b6000806000606084860312156104d4578081fd5b6104e085828601610467565b925060206104f086828701610467565b925050604061050186828701610467565b9150509250925092565b60006020828403121561051c578081fd5b61011483828401610472565b6000806040838503121561053a578182fd5b61054684838501610472565b915060206104b68582860161047d565b60008060006060848603121561056a578283fd5b61057685848601610472565b925060206105868682870161047d565b92505060406105018682870161047d565b60006105a1825190565b8084526020840193506105b8818560208601610689565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b602080825281016101148184610597565b61ffff8216815260208101610117565b61ffff831681526040810161ffff83166020830152610448565b61ffff8116905061ffff8216915060008261ffff0382111561064657610646610706565b500190565b6000821982111561064657610646610706565b60008261066d5761066d61071c565b500490565b60008282101561068457610684610706565b500390565b60005b838110156106a457818101518382015260200161068c565b838111156106b3576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156106eb576106eb610706565b5060010190565b6000826107015761070161071c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b7fff0000000000000000000000000000000000000000000000000000000000000081165b811461076157600080fd5b50565b80610756565b60ff811661075656fea264697066735822122097f668b9fdd688fcfe01c617d5c7001c1f364fd2354d78d8b408c4f06ff6234564736f6c63430008040033",
  "devdoc": {
    "author": "Clement Walter <clement0walter@gmail.com>",
    "kind": "dev",
    "methods": {
      "load12x2(bytes1,bytes1,bytes1)": {
        "returns": {
          "_0": "(uint16, uint16) The two uint16 values up to 2^12 each"
        }
      },
      "load16(bytes1,bytes1)": {
        "params": {
          "_endingBytes": "the second byte of the unsigned integer in [0, 255]",
          "_leadingBytes": "the first byte of the unsigned integer in [256, 65536]"
        },
        "returns": {
          "_0": "uint16 The resulting integer value"
        }
      },
      "toString(uint256,uint8,uint8)": {
        "params": {
          "_base": "The base to convert the number to",
          "_number": "The unsigned integer to be converted to a string",
          "_padding": "The target length of the string; result will be padded with 0 to reach this length while padding         of 0 means no padding"
        },
        "returns": {
          "_0": "bytes The resulting ASCII string value"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "load12x2(bytes1,bytes1,bytes1)": {
        "notice": "Load 12 Converts three bytes into two uint12 integers"
      },
      "load16(bytes1,bytes1)": {
        "notice": "Load 16 Converts two bytes to a 16 bit unsigned integer"
      },
      "toString(uint256,uint8,uint8)": {
        "notice": "To String Converts an unsigned integer to the string equivalent value, returned as bytes Equivalent to javascript's toString(base)"
      }
    },
    "notice": "Integers Library updated from https://github.com/willitscale/solidity-util In summary this is a simple library of integer functions which allow a simple conversion to and from strings",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}