{
  "address": "0x6F6f570F45833E249e27022648a26F4076F48f78",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes1",
          "name": "first",
          "type": "bytes1"
        },
        {
          "internalType": "bytes1",
          "name": "second",
          "type": "bytes1"
        },
        {
          "internalType": "bytes1",
          "name": "third",
          "type": "bytes1"
        }
      ],
      "name": "load12x2",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes1",
          "name": "_leadingBytes",
          "type": "bytes1"
        },
        {
          "internalType": "bytes1",
          "name": "_endingBytes",
          "type": "bytes1"
        }
      ],
      "name": "load16",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_base",
          "type": "uint8"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_base",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_padding",
          "type": "uint8"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0fb6a4c325436aac20a331af4759ddbc58556fe46664745d38be8e5a76b62fc8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x6F6f570F45833E249e27022648a26F4076F48f78",
    "transactionIndex": 0,
    "gasUsed": "477299",
    "logsBloom": "0x
    "blockHash": "0x3adc4fea5478e9934cb304b13713d176e9752eac251e71935bdf5525342f85fa",
    "transactionHash": "0x0fb6a4c325436aac20a331af4759ddbc58556fe46664745d38be8e5a76b62fc8",
    "logs": [],
    "blockNumber": 14139590,
    "cumulativeGasUsed": "477299",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3ebd0f676f0cc544ed44158549654fd8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"first\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"second\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"third\",\"type\":\"bytes1\"}],\"name\":\"load12x2\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"_leadingBytes\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"_endingBytes\",\"type\":\"bytes1\"}],\"name\":\"load16\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_base\",\"type\":\"uint8\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_base\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_padding\",\"type\":\"uint8\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Clement Walter <clement0walter@gmail.com>\",\"kind\":\"dev\",\"methods\":{\"load12x2(bytes1,bytes1,bytes1)\":{\"returns\":{\"_0\":\"(uint16, uint16) The two uint16 values up to 2^12 each\"}},\"load16(bytes1,bytes1)\":{\"params\":{\"_endingBytes\":\"the second byte of the unsigned integer in [0, 255]\",\"_leadingBytes\":\"the first byte of the unsigned integer in [256, 65536]\"},\"returns\":{\"_0\":\"uint16 The resulting integer value\"}},\"toString(uint256,uint8,uint8)\":{\"params\":{\"_base\":\"The base to convert the number to\",\"_number\":\"The unsigned integer to be converted to a string\",\"_padding\":\"The target length of the string; result will be padded with 0 to reach this length while padding         of 0 means no padding\"},\"returns\":{\"_0\":\"bytes The resulting ASCII string value\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"load12x2(bytes1,bytes1,bytes1)\":{\"notice\":\"Load 12 Converts three bytes into two uint12 integers\"},\"load16(bytes1,bytes1)\":{\"notice\":\"Load 16 Converts two bytes to a 16 bit unsigned integer\"},\"toString(uint256,uint8,uint8)\":{\"notice\":\"To String Converts an unsigned integer to the string equivalent value, returned as bytes Equivalent to javascript's toString(base)\"}},\"notice\":\"Integers Library updated from https://github.com/willitscale/solidity-util In summary this is a simple library of integer functions which allow a simple conversion to and from strings\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/Integers.sol\":\"Integers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/lib/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < count; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n\\n    /**\\n     * Load 16\\n     *\\n     * Converts two bytes to a 16 bit unsigned integer\\n     *\\n     * @param _leadingBytes the first byte of the unsigned integer in [256, 65536]\\n     * @param _endingBytes the second byte of the unsigned integer in [0, 255]\\n     * @return uint16 The resulting integer value\\n     */\\n    function load16(bytes1 _leadingBytes, bytes1 _endingBytes)\\n        public\\n        pure\\n        returns (uint16)\\n    {\\n        return\\n            (uint16(uint8(_leadingBytes)) << 8) + uint16(uint8(_endingBytes));\\n    }\\n\\n    /**\\n     * Load 12\\n     *\\n     * Converts three bytes into two uint12 integers\\n     *\\n     * @return (uint16, uint16) The two uint16 values up to 2^12 each\\n     */\\n    function load12x2(\\n        bytes1 first,\\n        bytes1 second,\\n        bytes1 third\\n    ) public pure returns (uint16, uint16) {\\n        return (\\n            (uint16(uint8(first)) << 4) + (uint16(uint8(second)) >> 4),\\n            (uint16(uint8(second & hex\\\"0f\\\")) << 8) + uint16(uint8(third))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7d20e3fab34d97af5681961ac0a58f3177794fcf4c0283e5723d8797dcd017f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6107af61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c80636900a3ae1161005a5780636900a3ae146100c0578063c1338a69146100d3578063c44e8fec146100e657600080fd5b8063338dc7fd146100765780635dfb512c1461009f575b600080fd5b610089610084366004610450565b610106565b604051610096919061050d565b60405180910390f35b6100b26100ad366004610551565b61011d565b6040516100969291906105a1565b6100896100ce3660046105bb565b610158565b6100896100e13660046105e4565b610163565b6100f96100f436600461062a565b610409565b604051610096919061065d565b606061011483836000610163565b90505b92915050565b60008061013660fc85901c610ff060f488901c16610683565b61014c60f885901c610f0060f088901c16610683565b91509150935093915050565b606061011782600a60005b60606000845b80156101915781610179816106ac565b925061018a905060ff8616826106fb565b9050610169565b856101a457816101a0816106ac565b9250505b606060ff85166101f9578267ffffffffffffffff8111156101c7576101c761070f565b6040519080825280601f01601f1916602001820160405280156101f1576020820181803683370190505b509050610243565b8460ff1667ffffffffffffffff8111156102155761021561070f565b6040519080825280601f01601f19166020018201604052801561023f576020820181803683370190505b5090505b60005b838110156103645761025b60ff881689610725565b9250600a8310156102d257610271836030610739565b60f81b826001838551610284919061074c565b61028e919061074c565b8151811061029e5761029e610763565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610345565b6102dd600a84610725565b6102e8906041610739565b60f81b8260018385516102fb919061074c565b610305919061074c565b8151811061031557610315610763565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b61035260ff8816896106fb565b975061035d816106ac565b9050610246565b50825b8560ff168110156103fc577f30000000000000000000000000000000000000000000000000000000000000008260018385516103a3919061074c565b6103ad919061074c565b815181106103bd576103bd610763565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506103f5816106ac565b9050610367565b50925050505b9392505050565b600061011460f883901c61ff0060f086901c16610683565b805b811461042e57600080fd5b50565b803561011781610421565b60ff8116610423565b80356101178161043c565b6000806040838503121561046657610466600080fd5b60006104728585610431565b925050602061048385828601610445565b9150509250929050565b60005b838110156104a8578181015183820152602001610490565b838111156104b7576000848401525b50505050565b60006104c7825190565b8084526020840193506104de81856020860161048d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b6020808252810161011481846104bd565b7fff000000000000000000000000000000000000000000000000000000000000008116610423565b80356101178161051e565b60008060006060848603121561056957610569600080fd5b60006105758686610546565b935050602061058686828701610546565b925050604061059786828701610546565b9150509250925092565b61ffff831681526040810161ffff83166020830152610402565b6000602082840312156105d0576105d0600080fd5b60006105dc8484610431565b949350505050565b6000806000606084860312156105fc576105fc600080fd5b60006106088686610431565b935050602061061986828701610445565b925050604061059786828701610445565b6000806040838503121561064057610640600080fd5b600061064c8585610546565b925050602061048385828601610546565b61ffff8216815260208101610117565b634e487b7160e01b600052601160045260246000fd5b61ffff8116905061ffff8216915060008261ffff038211156106a7576106a761066d565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156106de576106de61066d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261070a5761070a6106e5565b500490565b634e487b7160e01b600052604160045260246000fd5b600082610734576107346106e5565b500690565b600082198211156106a7576106a761066d565b60008282101561075e5761075e61066d565b500390565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a5f564433069eff206dd560008922ec56e0288931ed8ccd385881854f344a3bf64736f6c63430008080033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c80636900a3ae1161005a5780636900a3ae146100c0578063c1338a69146100d3578063c44e8fec146100e657600080fd5b8063338dc7fd146100765780635dfb512c1461009f575b600080fd5b610089610084366004610450565b610106565b604051610096919061050d565b60405180910390f35b6100b26100ad366004610551565b61011d565b6040516100969291906105a1565b6100896100ce3660046105bb565b610158565b6100896100e13660046105e4565b610163565b6100f96100f436600461062a565b610409565b604051610096919061065d565b606061011483836000610163565b90505b92915050565b60008061013660fc85901c610ff060f488901c16610683565b61014c60f885901c610f0060f088901c16610683565b91509150935093915050565b606061011782600a60005b60606000845b80156101915781610179816106ac565b925061018a905060ff8616826106fb565b9050610169565b856101a457816101a0816106ac565b9250505b606060ff85166101f9578267ffffffffffffffff8111156101c7576101c761070f565b6040519080825280601f01601f1916602001820160405280156101f1576020820181803683370190505b509050610243565b8460ff1667ffffffffffffffff8111156102155761021561070f565b6040519080825280601f01601f19166020018201604052801561023f576020820181803683370190505b5090505b60005b838110156103645761025b60ff881689610725565b9250600a8310156102d257610271836030610739565b60f81b826001838551610284919061074c565b61028e919061074c565b8151811061029e5761029e610763565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610345565b6102dd600a84610725565b6102e8906041610739565b60f81b8260018385516102fb919061074c565b610305919061074c565b8151811061031557610315610763565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b61035260ff8816896106fb565b975061035d816106ac565b9050610246565b50825b8560ff168110156103fc577f30000000000000000000000000000000000000000000000000000000000000008260018385516103a3919061074c565b6103ad919061074c565b815181106103bd576103bd610763565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506103f5816106ac565b9050610367565b50925050505b9392505050565b600061011460f883901c61ff0060f086901c16610683565b805b811461042e57600080fd5b50565b803561011781610421565b60ff8116610423565b80356101178161043c565b6000806040838503121561046657610466600080fd5b60006104728585610431565b925050602061048385828601610445565b9150509250929050565b60005b838110156104a8578181015183820152602001610490565b838111156104b7576000848401525b50505050565b60006104c7825190565b8084526020840193506104de81856020860161048d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b6020808252810161011481846104bd565b7fff000000000000000000000000000000000000000000000000000000000000008116610423565b80356101178161051e565b60008060006060848603121561056957610569600080fd5b60006105758686610546565b935050602061058686828701610546565b925050604061059786828701610546565b9150509250925092565b61ffff831681526040810161ffff83166020830152610402565b6000602082840312156105d0576105d0600080fd5b60006105dc8484610431565b949350505050565b6000806000606084860312156105fc576105fc600080fd5b60006106088686610431565b935050602061061986828701610445565b925050604061059786828701610445565b6000806040838503121561064057610640600080fd5b600061064c8585610546565b925050602061048385828601610546565b61ffff8216815260208101610117565b634e487b7160e01b600052601160045260246000fd5b61ffff8116905061ffff8216915060008261ffff038211156106a7576106a761066d565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156106de576106de61066d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261070a5761070a6106e5565b500490565b634e487b7160e01b600052604160045260246000fd5b600082610734576107346106e5565b500690565b600082198211156106a7576106a761066d565b60008282101561075e5761075e61066d565b500390565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a5f564433069eff206dd560008922ec56e0288931ed8ccd385881854f344a3bf64736f6c63430008080033",
  "devdoc": {
    "author": "Clement Walter <clement0walter@gmail.com>",
    "kind": "dev",
    "methods": {
      "load12x2(bytes1,bytes1,bytes1)": {
        "returns": {
          "_0": "(uint16, uint16) The two uint16 values up to 2^12 each"
        }
      },
      "load16(bytes1,bytes1)": {
        "params": {
          "_endingBytes": "the second byte of the unsigned integer in [0, 255]",
          "_leadingBytes": "the first byte of the unsigned integer in [256, 65536]"
        },
        "returns": {
          "_0": "uint16 The resulting integer value"
        }
      },
      "toString(uint256,uint8,uint8)": {
        "params": {
          "_base": "The base to convert the number to",
          "_number": "The unsigned integer to be converted to a string",
          "_padding": "The target length of the string; result will be padded with 0 to reach this length while padding         of 0 means no padding"
        },
        "returns": {
          "_0": "bytes The resulting ASCII string value"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "load12x2(bytes1,bytes1,bytes1)": {
        "notice": "Load 12 Converts three bytes into two uint12 integers"
      },
      "load16(bytes1,bytes1)": {
        "notice": "Load 16 Converts two bytes to a 16 bit unsigned integer"
      },
      "toString(uint256,uint8,uint8)": {
        "notice": "To String Converts an unsigned integer to the string equivalent value, returned as bytes Equivalent to javascript's toString(base)"
      }
    },
    "notice": "Integers Library updated from https://github.com/willitscale/solidity-util In summary this is a simple library of integer functions which allow a simple conversion to and from strings",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}