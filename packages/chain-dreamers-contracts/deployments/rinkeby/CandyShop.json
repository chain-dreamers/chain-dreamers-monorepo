{
  "address": "0x4C57375508D5Ccd4ba7329Db4389991413930Ea6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct CandyShop.SKUInput[]",
          "name": "_skus",
          "type": "tuple[]"
        }
      ],
      "name": "addSku",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "tokenNames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "inventory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "circulating",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "tokenNames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "skuIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf11494c7c0db68f0b44aa7ed76a81899475d7a36d236be1d2f1d10a70458b736",
  "receipt": {
    "to": null,
    "from": "0x145247853C6eeA1263757d22C5e8C3A4dBbF48b6",
    "contractAddress": "0x4C57375508D5Ccd4ba7329Db4389991413930Ea6",
    "transactionIndex": 3,
    "gasUsed": "3290670",
    "logsBloom": "0x
    "blockHash": "0xb728d647a1cdd2da21dd81f843b556789afcb310a215b5c9ce885ce2a8819bc8",
    "transactionHash": "0xf11494c7c0db68f0b44aa7ed76a81899475d7a36d236be1d2f1d10a70458b736",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 10020435,
        "transactionHash": "0xf11494c7c0db68f0b44aa7ed76a81899475d7a36d236be1d2f1d10a70458b736",
        "address": "0x4C57375508D5Ccd4ba7329Db4389991413930Ea6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000145247853c6eea1263757d22c5e8c3a4dbbf48b6"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xb728d647a1cdd2da21dd81f843b556789afcb310a215b5c9ce885ce2a8819bc8"
      }
    ],
    "blockNumber": 10020435,
    "cumulativeGasUsed": "4420262",
    "status": 1,
    "byzantium": true
  },
  "args": [
    ""
  ],
  "numDeployments": 1,
  "solcInputHash": "87cadc2640fe75aa8e2425602cde39e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct CandyShop.SKUInput[]\",\"name\":\"_skus\",\"type\":\"tuple[]\"}],\"name\":\"addSku\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulating\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"skuIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dreamers/CandyShop.sol\":\"CandyShop\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dreamers/CandyShop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract CandyShop is ERC1155, Ownable, ReentrancyGuard {\\n    struct SKU {\\n        uint256 id;\\n        uint256 price;\\n        uint256 supply;\\n        uint256 circulating;\\n        string name;\\n    }\\n    struct SKUInput {\\n        uint256 price;\\n        uint256 supply;\\n        string name;\\n    }\\n    mapping(uint256 => SKU) public inventory;\\n    mapping(string => uint256) public skuIds;\\n\\n    bytes32[] names;\\n\\n    function addSku(SKUInput[] memory _skus) external onlyOwner {\\n        for (uint256 i = 0; i < _skus.length; i++) {\\n            if (names.length > 0) {\\n                require(\\n                    names[skuIds[_skus[i].name]] !=\\n                        keccak256(bytes(_skus[i].name)),\\n                    \\\"Sku already exists\\\"\\n                );\\n            }\\n            uint256 tokenId = names.length;\\n            skuIds[_skus[i].name] = tokenId;\\n            names.push(keccak256(bytes(_skus[i].name)));\\n            inventory[tokenId] = SKU(\\n                tokenId,\\n                _skus[i].price,\\n                _skus[i].supply,\\n                0,\\n                _skus[i].name\\n            );\\n        }\\n    }\\n\\n    function uri(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked('{\\\"name\\\": \\\"', inventory[_tokenId].name, '\\\"}')\\n            );\\n    }\\n\\n    modifier inventoryExists() {\\n        require(names.length > 0, \\\"The candy shop is empty\\\");\\n        _;\\n    }\\n\\n    modifier skuExists(string calldata skuName) {\\n        require(\\n            names[skuIds[skuName]] == keccak256(bytes(skuName)),\\n            \\\"This candy does not exist yet\\\"\\n        );\\n        _;\\n    }\\n    modifier skuExist(string[] calldata skuNames) {\\n        for (uint256 i = 0; i < skuNames.length; i++) {\\n            require(\\n                names[skuIds[skuNames[i]]] == keccak256(bytes(skuNames[i])),\\n                \\\"This candy does not exist yet\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    function enoughSupply(string calldata tokenName, uint256 amount)\\n        internal\\n        view\\n        skuExists(tokenName)\\n        returns (bool)\\n    {\\n        if (inventory[skuIds[tokenName]].supply == 0) {\\n            return true;\\n        }\\n        return\\n            inventory[skuIds[tokenName]].circulating + amount <=\\n            inventory[skuIds[tokenName]].supply;\\n    }\\n\\n    function rightValue(string calldata tokenName, uint256 amount)\\n        internal\\n        view\\n        skuExists(tokenName)\\n        returns (bool)\\n    {\\n        return msg.value == inventory[skuIds[tokenName]].price * amount;\\n    }\\n\\n    function mint(string calldata tokenName, uint256 amount)\\n        external\\n        payable\\n        nonReentrant\\n        inventoryExists\\n        skuExists(tokenName)\\n    {\\n        require(enoughSupply(tokenName, amount), \\\"Not enough supply\\\");\\n        require(\\n            rightValue(tokenName, amount),\\n            \\\"You have to pay the price to eat candies\\\"\\n        );\\n\\n        _mint(_msgSender(), skuIds[tokenName], amount, \\\"\\\");\\n\\n        inventory[skuIds[tokenName]].circulating += amount;\\n    }\\n\\n    function mintBatch(string[] calldata tokenNames, uint256[] calldata amounts)\\n        external\\n        payable\\n        nonReentrant\\n        inventoryExists\\n        skuExist(tokenNames)\\n    {\\n        uint256 price;\\n        uint256[] memory tokenIds = new uint256[](tokenNames.length);\\n        for (uint256 i = 0; i < tokenNames.length; i++) {\\n            require(\\n                enoughSupply(tokenNames[i], amounts[i]),\\n                \\\"Not enough supply\\\"\\n            );\\n            price += inventory[skuIds[tokenNames[i]]].price * amounts[i];\\n            tokenIds[i] = skuIds[tokenNames[i]];\\n        }\\n\\n        require(msg.value == price, \\\"You have to pay the price to eat candies\\\");\\n\\n        _mintBatch(_msgSender(), tokenIds, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < tokenNames.length; i++) {\\n            inventory[tokenIds[i]].circulating += amounts[i];\\n        }\\n    }\\n\\n    function burn(string calldata tokenName, uint256 amount)\\n        external\\n        nonReentrant\\n        inventoryExists\\n        skuExists(tokenName)\\n    {\\n        _burn(_msgSender(), skuIds[tokenName], amount);\\n        inventory[skuIds[tokenName]].circulating -= amount;\\n    }\\n\\n    function burnBatch(string[] calldata tokenNames, uint256[] calldata amounts)\\n        external\\n        nonReentrant\\n        inventoryExists\\n        skuExist(tokenNames)\\n    {\\n        uint256[] memory tokenIds = new uint256[](tokenNames.length);\\n        for (uint256 i = 0; i < tokenNames.length; i++) {\\n            tokenIds[i] = skuIds[tokenNames[i]];\\n        }\\n        _burnBatch(_msgSender(), tokenIds, amounts);\\n        for (uint256 i = 0; i < tokenNames.length; i++) {\\n            inventory[tokenIds[i]].circulating -= amounts[i];\\n        }\\n    }\\n\\n    constructor(string memory uri_) ERC1155(uri_) {}\\n\\n    receive() external payable {}\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = _msgSender().call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x72c53f050a0377457a76499891b6cd1e9aa924530f80390adfb1851c6ba319a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003cce38038062003cce8339810160408190526200003491620001d9565b80620000408162000058565b506200004c3362000071565b5060016004556200031c565b80516200006d906002906020840190620000c3565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000d19062000290565b90600052602060002090601f016020900481019282620000f5576000855562000140565b82601f106200011057805160ff191683800117855562000140565b8280016001018555821562000140579182015b828111156200014057825182559160200191906001019062000123565b506200014e92915062000152565b5090565b5b808211156200014e576000815560010162000153565b6000620001806200017a8462000230565b62000211565b9050828152602081018484840111156200019957600080fd5b620001a68482856200025d565b509392505050565b600082601f830112620001bf578081fd5b8151620001d184826020860162000169565b949350505050565b600060208284031215620001eb578081fd5b818101516001600160401b0381111562000203578182fd5b620001d184828501620001ae565b60006200021d60405190565b90506200022b8282620002c1565b919050565b60006001600160401b038211156200024c576200024c62000306565b601f19601f83011660200192915050565b60005b838110156200027a57818101518382015260200162000260565b838111156200028a576000848401525b50505050565b600281046001821680620002a557607f821691505b60208210811415620002bb57620002bb620002f0565b50919050565b601f19601f83011681016001600160401b0381118282101715620002e957620002e962000306565b6040525050565b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6139a2806200032c6000396000f3fe6080604052600436106101475760003560e01c8063715018a6116100c0578063b46e832811610074578063e985e9c511610059578063e985e9c514610391578063f242432a146103da578063f2fde38b146103fa57600080fd5b8063b46e832814610351578063b48272cc1461037157600080fd5b80638da5cb5b116100a55780638da5cb5b146102eb578063a22cb46514610311578063ae0c34941461033157600080fd5b8063715018a6146102c35780638b5af35a146102d857600080fd5b80632eb2c2d6116101175780634272ee18116100fc5780634272ee181461022d5780634e1273f41461025e5780635952c55d1461028b57600080fd5b80632eb2c2d6146101f85780633ccfd60b1461021857600080fd5b8062fdd58e1461015357806301ffc9a714610189578063056b01ce146101b65780630e89341c146101cb57600080fd5b3661014e57005b600080fd5b34801561015f57600080fd5b5061017361016e36600461296b565b61041a565b604051610180919061362c565b60405180910390f35b34801561019557600080fd5b506101a96101a4366004612a9b565b610474565b60405161018091906134ad565b6101c96101c4366004612ad5565b610557565b005b3480156101d757600080fd5b506101eb6101e6366004612b5f565b610701565b60405161018091906134bb565b34801561020457600080fd5b506101c9610213366004612830565b61073f565b34801561022457600080fd5b506101c961078b565b34801561023957600080fd5b5061024d610248366004612b5f565b610820565b604051610180959493929190613655565b34801561026a57600080fd5b5061027e610279366004612999565b6108d9565b6040516101809190613477565b34801561029757600080fd5b506101736102a6366004612b2a565b805160208183018101805160068252928201919093012091525481565b3480156102cf57600080fd5b506101c96109f9565b6101c96102e63660046129f7565b610a2f565b3480156102f757600080fd5b506003546001600160a01b031660405161018091906133c2565b34801561031d57600080fd5b506101c961032c36600461293d565b610e99565b34801561033d57600080fd5b506101c961034c3660046129f7565b610ea8565b34801561035d57600080fd5b506101c961036c366004612a66565b6111c2565b34801561037d57600080fd5b506101c961038c366004612ad5565b611480565b34801561039d57600080fd5b506101a96103ac3660046127f8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156103e657600080fd5b506101c96103f53660046128e8565b6115bb565b34801561040657600080fd5b506101c96104153660046127d4565b611600565b60006001600160a01b03831661044b5760405162461bcd60e51b8152600401610442906134fc565b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a2600000000000000000000000000000000000000000000000000000000148061050757507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061046e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461046e565b6002600454141561057a5760405162461bcd60e51b81526004016104429061360c565b600260045560075461059e5760405162461bcd60e51b81526004016104429061358c565b828281816040516105b092919061334a565b60405180910390206007600684846040516105cc92919061334a565b908152602001604051809103902054815481106105f957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154146106215760405162461bcd60e51b8152600401610442906135ac565b61062c858585611659565b6106485760405162461bcd60e51b8152600401610442906134ec565b6106538585856117ad565b61066f5760405162461bcd60e51b81526004016104429061355c565b6106aa336006878760405161068592919061334a565b9081526020016040518091039020548560405180602001604052806000815250611880565b8260056000600688886040516106c192919061334a565b908152602001604051809103902054815260200190815260200160002060030160008282546106f0919061373f565b909155505060016004555050505050565b606060056000838152602001908152602001600020600401604051602001610729919061335f565b6040516020818303038152906040529050919050565b6001600160a01b03851633148061075b575061075b85336103ac565b6107775760405162461bcd60e51b81526004016104429061354c565b610784858585858561195e565b5050505050565b6003546001600160a01b031633146107b55760405162461bcd60e51b81526004016104429061359c565b604051600090339047908381818185875af1925050503d80600081146107f7576040519150601f19603f3d011682016040523d82523d6000602084013e6107fc565b606091505b505090508061081d5760405162461bcd60e51b81526004016104429061361c565b50565b600560205260009081526040902080546001820154600283015460038401546004850180549495939492939192610856906137d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610882906137d5565b80156108cf5780601f106108a4576101008083540402835291602001916108cf565b820191906000526020600020905b8154815290600101906020018083116108b257829003601f168201915b5050505050905085565b606081518351146108fc5760405162461bcd60e51b8152600401610442906135dc565b6000835167ffffffffffffffff81111561092657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561094f578160200160208202803683370190505b50905060005b84518110156109f1576109b685828151811061098157634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106109a957634e487b7160e01b600052603260045260246000fd5b602002602001015161041a565b8282815181106109d657634e487b7160e01b600052603260045260246000fd5b60209081029190910101526109ea8161382f565b9050610955565b509392505050565b6003546001600160a01b03163314610a235760405162461bcd60e51b81526004016104429061359c565b610a2d6000611b16565b565b60026004541415610a525760405162461bcd60e51b81526004016104429061360c565b6002600455600754610a765760405162461bcd60e51b81526004016104429061358c565b838360005b81811015610b7657828282818110610aa357634e487b7160e01b600052603260045260246000fd5b9050602002810190610ab59190613670565b604051610ac392919061334a565b604051809103902060076006858585818110610aef57634e487b7160e01b600052603260045260246000fd5b9050602002810190610b019190613670565b604051610b0f92919061334a565b90815260200160405180910390205481548110610b3c57634e487b7160e01b600052603260045260246000fd5b906000526020600020015414610b645760405162461bcd60e51b8152600401610442906135ac565b80610b6e8161382f565b915050610a7b565b506000808667ffffffffffffffff811115610ba157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610bca578160200160208202803683370190505b50905060005b87811015610d8757610c39898983818110610bfb57634e487b7160e01b600052603260045260246000fd5b9050602002810190610c0d9190613670565b898985818110610c2d57634e487b7160e01b600052603260045260246000fd5b90506020020135611659565b610c555760405162461bcd60e51b8152600401610442906134ec565b868682818110610c7557634e487b7160e01b600052603260045260246000fd5b905060200201356005600060068c8c86818110610ca257634e487b7160e01b600052603260045260246000fd5b9050602002810190610cb49190613670565b604051610cc292919061334a565b908152602001604051809103902054815260200190815260200160002060010154610ced9190613752565b610cf7908461373f565b92506006898983818110610d1b57634e487b7160e01b600052603260045260246000fd5b9050602002810190610d2d9190613670565b604051610d3b92919061334a565b908152602001604051809103902054828281518110610d6a57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610d7f8161382f565b915050610bd0565b50813414610da75760405162461bcd60e51b81526004016104429061355c565b610df33382888880806020026020016040519081016040528093929190818152602001838360200280828437600092018290525060408051602081019091529081529250611b80915050565b60005b87811015610e8957868682818110610e1e57634e487b7160e01b600052603260045260246000fd5b9050602002013560056000848481518110610e4957634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206003016000828254610e71919061373f565b90915550819050610e818161382f565b915050610df6565b5050600160045550505050505050565b610ea4338383611ce7565b5050565b60026004541415610ecb5760405162461bcd60e51b81526004016104429061360c565b6002600455600754610eef5760405162461bcd60e51b81526004016104429061358c565b838360005b81811015610fef57828282818110610f1c57634e487b7160e01b600052603260045260246000fd5b9050602002810190610f2e9190613670565b604051610f3c92919061334a565b604051809103902060076006858585818110610f6857634e487b7160e01b600052603260045260246000fd5b9050602002810190610f7a9190613670565b604051610f8892919061334a565b90815260200160405180910390205481548110610fb557634e487b7160e01b600052603260045260246000fd5b906000526020600020015414610fdd5760405162461bcd60e51b8152600401610442906135ac565b80610fe78161382f565b915050610ef4565b5060008567ffffffffffffffff81111561101957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611042578160200160208202803683370190505b50905060005b868110156110de57600688888381811061107257634e487b7160e01b600052603260045260246000fd5b90506020028101906110849190613670565b60405161109292919061334a565b9081526020016040518091039020548282815181106110c157634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806110d68161382f565b915050611048565b5061111d3382878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611d8a92505050565b60005b868110156111b35785858281811061114857634e487b7160e01b600052603260045260246000fd5b905060200201356005600084848151811061117357634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020600301600082825461119b9190613771565b909155508190506111ab8161382f565b915050611120565b50506001600455505050505050565b6003546001600160a01b031633146111ec5760405162461bcd60e51b81526004016104429061359c565b60005b8151811015610ea457600754156112c65781818151811061122057634e487b7160e01b600052603260045260246000fd5b602002602001015160400151805190602001206007600684848151811061125757634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516040516112709190613355565b9081526020016040518091039020548154811061129d57634e487b7160e01b600052603260045260246000fd5b906000526020600020015414156112c65760405162461bcd60e51b8152600401610442906135bc565b600754825181906006908590859081106112f057634e487b7160e01b600052603260045260246000fd5b6020026020010151604001516040516113099190613355565b908152602001604051809103902081905550600783838151811061133d57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001518051906020012090806001815401808255809150506001900390600052602060002001600090919091909150556040518060a001604052808281526020018484815181106113a757634e487b7160e01b600052603260045260246000fd5b60200260200101516000015181526020018484815181106113d857634e487b7160e01b600052603260045260246000fd5b60200260200101516020015181526020016000815260200184848151811061141057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516040908101519092526000848152600582528290208351815583820151600182015591830151600283015560608301516003830155608083015180516114689260048501920190612425565b509050505080806114789061382f565b9150506111ef565b600260045414156114a35760405162461bcd60e51b81526004016104429061360c565b60026004556007546114c75760405162461bcd60e51b81526004016104429061358c565b828281816040516114d992919061334a565b60405180910390206007600684846040516114f592919061334a565b9081526020016040518091039020548154811061152257634e487b7160e01b600052603260045260246000fd5b90600052602060002001541461154a5760405162461bcd60e51b8152600401610442906135ac565b611575336006878760405161156092919061334a565b90815260200160405180910390205485611f22565b82600560006006888860405161158c92919061334a565b908152602001604051809103902054815260200190815260200160002060030160008282546106f09190613771565b6001600160a01b0385163314806115d757506115d785336103ac565b6115f35760405162461bcd60e51b81526004016104429061352c565b6107848585858585612027565b6003546001600160a01b0316331461162a5760405162461bcd60e51b81526004016104429061359c565b6001600160a01b0381166116505760405162461bcd60e51b81526004016104429061350c565b61081d81611b16565b60008383818160405161166d92919061334a565b604051809103902060076006848460405161168992919061334a565b908152602001604051809103902054815481106116b657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154146116de5760405162461bcd60e51b8152600401610442906135ac565b60056000600688886040516116f492919061334a565b9081526020016040518091039020548152602001908152602001600020600201546000141561172657600192506117a4565b600560006006888860405161173c92919061334a565b908152602001604051809103902054815260200190815260200160002060020154846005600060068a8a60405161177492919061334a565b90815260200160405180910390205481526020019081526020016000206003015461179f919061373f565b111592505b50509392505050565b6000838381816040516117c192919061334a565b60405180910390206007600684846040516117dd92919061334a565b9081526020016040518091039020548154811061180a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154146118325760405162461bcd60e51b8152600401610442906135ac565b83600560006006898960405161184992919061334a565b9081526020016040518091039020548152602001908152602001600020600101546118749190613752565b34149695505050505050565b6001600160a01b0384166118a65760405162461bcd60e51b8152600401610442906135fc565b336118c0816000876118b788612150565b61078488612150565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906118f090849061373f565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161194792919061363a565b60405180910390a4610784816000878787876121a9565b815183511461197f5760405162461bcd60e51b8152600401610442906135ec565b6001600160a01b0384166119a55760405162461bcd60e51b81526004016104429061353c565b3360005b8451811015611aa85760008582815181106119d457634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611a0057634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611a505760405162461bcd60e51b81526004016104429061357c565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611a8d90849061373f565b9250508190555050505080611aa19061382f565b90506119a9565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611af8929190613488565b60405180910390a4611b0e818787878787612311565b505050505050565b600380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038416611ba65760405162461bcd60e51b8152600401610442906135fc565b8151835114611bc75760405162461bcd60e51b8152600401610442906135ec565b3360005b8451811015611c7f57838181518110611bf457634e487b7160e01b600052603260045260246000fd5b6020026020010151600080878481518110611c1f57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611c67919061373f565b90915550819050611c778161382f565b915050611bcb565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611cd0929190613488565b60405180910390a461078481600087878787612311565b816001600160a01b0316836001600160a01b03161415611d195760405162461bcd60e51b8152600401610442906135cc565b6001600160a01b0383811660008181526001602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611d7d9085906134ad565b60405180910390a3505050565b6001600160a01b038316611db05760405162461bcd60e51b81526004016104429061356c565b8051825114611dd15760405162461bcd60e51b8152600401610442906135ec565b604080516020810190915260009081905233905b8351811015611ec3576000848281518110611e1057634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110611e3c57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015611e8c5760405162461bcd60e51b81526004016104429061351c565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580611ebb8161382f565b915050611de5565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611f14929190613488565b60405180910390a450505050565b6001600160a01b038316611f485760405162461bcd60e51b81526004016104429061356c565b33611f7881856000611f5987612150565b611f6287612150565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b038816845290915290205482811015611fb95760405162461bcd60e51b81526004016104429061351c565b6000848152602081815260408083206001600160a01b03808a16808652919093528184208786039055905190918516907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6290612018908990899061363a565b60405180910390a45050505050565b6001600160a01b03841661204d5760405162461bcd60e51b81526004016104429061353c565b3361205d8187876118b788612150565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561209e5760405162461bcd60e51b81526004016104429061357c565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906120db90849061373f565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161213192919061363a565b60405180910390a46121478288888888886121a9565b50505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061219857634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611b0e576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e61906122069089908990889088908890600401613430565b602060405180830381600087803b15801561222057600080fd5b505af1925050508015612250575060408051601f3d908101601f1916820190925261224d91810190612ab8565b60015b6122b05761225c61388c565b806308c379a0141561229657506122716138a4565b8061227c5750612298565b8060405162461bcd60e51b815260040161044291906134bb565b505b60405162461bcd60e51b8152600401610442906134cc565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e6100000000000000000000000000000000000000000000000000000000146121475760405162461bcd60e51b8152600401610442906134dc565b6001600160a01b0384163b15611b0e576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c819061236e90899089908890889088906004016133d0565b602060405180830381600087803b15801561238857600080fd5b505af19250505080156123b8575060408051601f3d908101601f191682019092526123b591810190612ab8565b60015b6123c45761225c61388c565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c8100000000000000000000000000000000000000000000000000000000146121475760405162461bcd60e51b8152600401610442906134dc565b828054612431906137d5565b90600052602060002090601f0160209004810192826124535760008555612499565b82601f1061246c57805160ff1916838001178555612499565b82800160010185558215612499579182015b8281111561249957825182559160200191906001019061247e565b506124a59291506124a9565b5090565b5b808211156124a557600081556001016124aa565b60006124d16124cc846136f0565b6136d9565b905080838252602082019050828560208602850111156124f057600080fd5b60005b8581101561251a57612505878361261d565b835260209283019291909101906001016124f3565b5050509392505050565b60006125326124cc846136f0565b9050808382526020820190508285602086028501111561255157600080fd5b60005b8581101561251a57813567ffffffffffffffff81111561257357600080fd5b850161257f8882612758565b8452506020928301929190910190600101612554565b60006125a36124cc846136f0565b905080838252602082019050828560208602850111156125c257600080fd5b60005b8581101561251a576125d787836127c9565b835260209283019291909101906001016125c5565b60006125fa6124cc84613714565b90508281526020810184848401111561261257600080fd5b6109f1848285613799565b803561046e81613922565b600082601f830112612638578081fd5b81356126488482602086016124be565b949350505050565b60008083601f840112612661578182fd5b50813567ffffffffffffffff811115612678578182fd5b60208301915083602082028301111561269057600080fd5b9250929050565b600082601f8301126126a7578081fd5b8135612648848260208601612524565b600082601f8301126126c7578081fd5b8135612648848260208601612595565b803561046e81613936565b803561046e8161393e565b805161046e8161393e565b600082601f830112612708578081fd5b81356126488482602086016125ec565b60008083601f840112612729578182fd5b50813567ffffffffffffffff811115612740578182fd5b60208301915083600182028301111561269057600080fd5b600060608284031215612769578081fd5b61277360606136d9565b9050600061278184846127c9565b818301526020612793858286016127c9565b90830152604083013567ffffffffffffffff8111156127b0578182fd5b6127bc858286016126f8565b6040840152505092915050565b803561046e81613966565b6000602082840312156127e5578081fd5b6127f18382840161261d565b9392505050565b6000806040838503121561280a578081fd5b6128168482850161261d565b915060206128268582860161261d565b9150509250929050565b600080600080600060a08688031215612847578081fd5b6128538782880161261d565b945060206128638882890161261d565b945050604086013567ffffffffffffffff81111561287f578182fd5b61288b888289016126b7565b935050606086013567ffffffffffffffff8111156128a7578182fd5b6128b3888289016126b7565b925050608086013567ffffffffffffffff8111156128cf578182fd5b6128db888289016126f8565b9150509295509295909350565b600080600080600060a086880312156128ff578081fd5b61290b8782880161261d565b9450602061291b8882890161261d565b945050604061292c888289016127c9565b93505060606128b3888289016127c9565b6000806040838503121561294f578182fd5b61295b8483850161261d565b91506020612826858286016126d7565b6000806040838503121561297d578182fd5b6129898483850161261d565b91506020612826858286016127c9565b600080604083850312156129ab578182fd5b8183013567ffffffffffffffff8111156129c3578283fd5b6129cf85828601612628565b925050602083013567ffffffffffffffff8111156129eb578182fd5b612826858286016126b7565b60008060008060408587031215612a0c578182fd5b8185013567ffffffffffffffff811115612a24578283fd5b612a3087828801612650565b9450945050602085013567ffffffffffffffff811115612a4e578283fd5b612a5a87828801612650565b95989497509550505050565b600060208284031215612a77578081fd5b8082013567ffffffffffffffff811115612a8f578182fd5b61264884828501612697565b600060208284031215612aac578081fd5b6127f1838284016126e2565b600060208284031215612ac9578081fd5b6127f1838284016126ed565b600080600060408486031215612ae9578081fd5b8084013567ffffffffffffffff811115612b01578182fd5b612b0d86828701612718565b93509350506020612b20868287016127c9565b9150509250925092565b600060208284031215612b3b578081fd5b8082013567ffffffffffffffff811115612b53578182fd5b612648848285016126f8565b600060208284031215612b70578081fd5b6127f1838284016127c9565b612b868282613344565b5060200190565b612b9681613788565b82525050565b6000612ba6825190565b8084526020938401938301825b82811015612bd8578151612bc78782612b7c565b965050602082019150600101612bb3565b5093949350505050565b801515612b96565b612bf5828483613799565b500190565b6000612c04825190565b808452602084019350612c1b8185602086016137a5565b601f01601f19169290920192915050565b6000612c36825190565b612c448185602086016137a5565b9290920192915050565b60008154612c5b816137d5565b600182168015612c725760018114612c8357612cb3565b60ff19831686528186019350612cb3565b60008581526020902060005b83811015612cab57815488820152600190910190602001612c8f565b505081860193505b50505092915050565b60348152602081017f455243313135353a207472616e7366657220746f206e6f6e204552433131353581527f526563656976657220696d706c656d656e746572000000000000000000000000602082015290505b60400190565b60288152602081017f455243313135353a204552433131353552656365697665722072656a6563746581527f6420746f6b656e7300000000000000000000000000000000000000000000000060208201529050612d10565b60118152602081017f4e6f7420656e6f75676820737570706c79000000000000000000000000000000815290505b60200190565b602b8152602081017f455243313135353a2062616c616e636520717565727920666f7220746865207a81527f65726f206164647265737300000000000000000000000000000000000000000060208201529050612d10565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050612d10565b60248152602081017f455243313135353a206275726e20616d6f756e7420657863656564732062616c81527f616e63650000000000000000000000000000000000000000000000000000000060208201529050612d10565b60298152602081017f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7281527f20617070726f766564000000000000000000000000000000000000000000000060208201529050612d10565b60258152602081017f455243313135353a207472616e7366657220746f20746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529050612d10565b60328152602081017f455243313135353a207472616e736665722063616c6c6572206973206e6f742081527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060208201529050612d10565b60288152602081017f596f75206861766520746f207061792074686520707269636520746f2065617481527f2063616e6469657300000000000000000000000000000000000000000000000060208201529050612d10565b60238152602081017f455243313135353a206275726e2066726f6d20746865207a65726f206164647281527f657373000000000000000000000000000000000000000000000000000000000060208201529050612d10565b602a8152602081017f455243313135353a20696e73756666696369656e742062616c616e636520666f81527f72207472616e736665720000000000000000000000000000000000000000000060208201529050612d10565b60178152602081017f5468652063616e64792073686f7020697320656d70747900000000000000000081529050612d9c565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612d9c565b601d8152602081017f546869732063616e647920646f6573206e6f742065786973742079657400000081529050612d9c565b60128152602081017f536b7520616c726561647920657869737473000000000000000000000000000081529050612d9c565b60298152602081017f455243313135353a2073657474696e6720617070726f76616c2073746174757381527f20666f722073656c66000000000000000000000000000000000000000000000060208201529050612d10565b60298152602081017f455243313135353a206163636f756e747320616e6420696473206c656e67746881527f206d69736d61746368000000000000000000000000000000000000000000000060208201529050612d10565b60288152602081017f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682081527f6d69736d6174636800000000000000000000000000000000000000000000000060208201529050612d10565b60218152602081017f455243313135353a206d696e7420746f20746865207a65726f2061646472657381527f730000000000000000000000000000000000000000000000000000000000000060208201529050612d10565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612d9c565b60118152602081017f5769746864726177616c206661696c656400000000000000000000000000000081529050612d9c565b80612b96565b6127f1818385612bea565b61046e8183612c2c565b7f7b226e616d65223a2022000000000000000000000000000000000000000000008152600a0161338f8183612c4e565b7f227d000000000000000000000000000000000000000000000000000000000000815290506002810161046e565b919050565b6020810161046e8284612b8d565b60a081016133de8288612b8d565b6133eb6020830187612b8d565b81810360408301526133fd8186612b9c565b905081810360608301526134118185612b9c565b905081810360808301526134258184612bfa565b979650505050505050565b60a0810161343e8288612b8d565b61344b6020830187612b8d565b6134586040830186613344565b6134656060830185613344565b81810360808301526134258184612bfa565b602080825281016127f18184612b9c565b604080825281016134998185612b9c565b905081810360208301526126488184612b9c565b6020810161046e8284612be2565b602080825281016127f18184612bfa565b6020808252810161046e81612cbc565b6020808252810161046e81612d16565b6020808252810161046e81612d6e565b6020808252810161046e81612da2565b6020808252810161046e81612dfa565b6020808252810161046e81612e52565b6020808252810161046e81612eaa565b6020808252810161046e81612f02565b6020808252810161046e81612f5a565b6020808252810161046e81612fb2565b6020808252810161046e8161300a565b6020808252810161046e81613062565b6020808252810161046e816130ba565b6020808252810161046e816130ec565b6020808252810161046e8161311c565b6020808252810161046e8161314e565b6020808252810161046e81613180565b6020808252810161046e816131d8565b6020808252810161046e81613230565b6020808252810161046e81613288565b6020808252810161046e816132e0565b6020808252810161046e81613312565b6020810161046e8284613344565b604081016136488285613344565b6127f16020830184613344565b60a081016136638288613344565b61344b6020830187613344565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1368590030181126136a5578283fd5b8301915050803567ffffffffffffffff8111156136c157600080fd5b60208201915060018102360382131561269057600080fd5b60006136e460405190565b90506133bd8282613802565b600067ffffffffffffffff82111561370a5761370a613876565b5060209081020190565b600067ffffffffffffffff82111561372e5761372e613876565b601f19601f83011660200192915050565b60008219821115612bf557612bf561384a565b600081600019048311821515161561376c5761376c61384a565b500290565b6000828210156137835761378361384a565b500390565b60006001600160a01b03821661046e565b82818337506000910152565b60005b838110156137c05781810151838201526020016137a8565b838111156137cf576000848401525b50505050565b6002810460018216806137e957607f821691505b602082108114156137fc576137fc613860565b50919050565b601f19601f830116810181811067ffffffffffffffff8211171561382857613828613876565b6040525050565b60006000198214156138435761384361384a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156138a157600481823e5160e01c5b90565b600060443d10156138b25790565b60405160043d036004823e80513d602482011167ffffffffffffffff821117156138db57505090565b808201805167ffffffffffffffff8111156138f7575050505090565b80602083010160043d03850181111561391257505050505090565b506109f181602001840185613802565b61392b81613788565b811461081d57600080fd5b80151561392b565b7fffffffff00000000000000000000000000000000000000000000000000000000811661392b565b8061392b56fea26469706673582212207c8903c8cc8551d2c8db86d9045c9987ce20bde209f4dae43eba505d76956efb64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 388,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 394,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 396,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 225,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 333,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3752,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "inventory",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(SKU)3740_storage)"
      },
      {
        "astId": 3756,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "skuIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 3759,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "names",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(SKU)3740_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CandyShop.SKU)",
        "numberOfBytes": "32",
        "value": "t_struct(SKU)3740_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SKU)3740_storage": {
        "encoding": "inplace",
        "label": "struct CandyShop.SKU",
        "members": [
          {
            "astId": 3731,
            "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3733,
            "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3735,
            "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
            "label": "supply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3737,
            "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
            "label": "circulating",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3739,
            "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
            "label": "name",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}