{
  "address": "0xdeBC68b1F382717c8354f423376f2a6c951b0aEE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct CandyShop.SKUInput[]",
          "name": "_skus",
          "type": "tuple[]"
        }
      ],
      "name": "addSku",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainDreamersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "inventory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_chainDreamersAddress",
          "type": "address"
        }
      ],
      "name": "setChainDreamersAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "skuIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8719267d547c8b03ab5cf31a830effb0a3a31e7ea533793a80f2e9cec8f1f198",
  "receipt": {
    "to": null,
    "from": "0x145247853C6eeA1263757d22C5e8C3A4dBbF48b6",
    "contractAddress": "0xdeBC68b1F382717c8354f423376f2a6c951b0aEE",
    "transactionIndex": 29,
    "gasUsed": "2966053",
    "logsBloom": "0x00000000020000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000a00000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000010000000000000000000000000000010000000000020000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x86d698a403f0a68a64f9424230977e2ac0b06c075600c637f6070075caa7d239",
    "transactionHash": "0x8719267d547c8b03ab5cf31a830effb0a3a31e7ea533793a80f2e9cec8f1f198",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 10089267,
        "transactionHash": "0x8719267d547c8b03ab5cf31a830effb0a3a31e7ea533793a80f2e9cec8f1f198",
        "address": "0xdeBC68b1F382717c8354f423376f2a6c951b0aEE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000145247853c6eea1263757d22c5e8c3a4dbbf48b6"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0x86d698a403f0a68a64f9424230977e2ac0b06c075600c637f6070075caa7d239"
      }
    ],
    "blockNumber": 10089267,
    "cumulativeGasUsed": "9234212",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://api.chaindreamers.xyz/test/candy/tokens/{id}/metadata"
  ],
  "numDeployments": 1,
  "solcInputHash": "b594887cea133499e234836517dc45f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct CandyShop.SKUInput[]\",\"name\":\"_skus\",\"type\":\"tuple[]\"}],\"name\":\"addSku\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainDreamersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainDreamersAddress\",\"type\":\"address\"}],\"name\":\"setChainDreamersAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"skuIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dreamers/CandyShop.sol\":\"CandyShop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdad22b949de979bb2ad9001c044b2aeaacf8a25e3de09ed6f022a9469f936d5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dreamers/CandyShop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/ICandyShop.sol\\\";\\n\\ncontract CandyShop is ERC1155Pausable, Ownable, ReentrancyGuard, ICandyShop {\\n    struct SKU {\\n        uint256 id;\\n        uint256 price;\\n        string name;\\n    }\\n\\n    struct SKUInput {\\n        uint256 price;\\n        string name;\\n    }\\n\\n    mapping(uint256 => SKU) public inventory;\\n    mapping(string => uint256) public skuIds;\\n    bytes32[] names;\\n    address public chainDreamersAddress;\\n\\n    function addSku(SKUInput[] memory _skus) external onlyOwner {\\n        for (uint256 i = 0; i < _skus.length; i++) {\\n            if (names.length > 0) {\\n                require(\\n                    names[skuIds[_skus[i].name]] !=\\n                        keccak256(bytes(_skus[i].name)),\\n                    \\\"Sku already exists\\\"\\n                );\\n            }\\n            uint256 tokenId = names.length;\\n            skuIds[_skus[i].name] = tokenId;\\n            names.push(keccak256(bytes(_skus[i].name)));\\n            inventory[tokenId] = SKU(tokenId, _skus[i].price, _skus[i].name);\\n        }\\n    }\\n\\n    function setChainDreamersAddress(address _chainDreamersAddress)\\n        external\\n        onlyOwner\\n    {\\n        chainDreamersAddress = _chainDreamersAddress;\\n    }\\n\\n    function mint(uint256 tokenId, uint256 amount)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(tokenId < names.length, \\\"This candy does not exist yet\\\");\\n        require(\\n            msg.value == inventory[tokenId].price * amount,\\n            \\\"You have to pay the price to eat candies\\\"\\n        );\\n        _mint(_msgSender(), tokenId, amount, \\\"\\\");\\n        setApprovalForAll(chainDreamersAddress, true);\\n    }\\n\\n    function mintBatch(uint256[] calldata tokenIds, uint256[] calldata amounts)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        uint256 price;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(\\n                tokenIds[i] < names.length,\\n                \\\"This candy does not exist yet\\\"\\n            );\\n            price += inventory[tokenIds[i]].price * amounts[i];\\n        }\\n\\n        require(msg.value == price, \\\"You have to pay the price to eat candies\\\");\\n\\n        _mintBatch(_msgSender(), tokenIds, amounts, \\\"\\\");\\n        setApprovalForAll(chainDreamersAddress, true);\\n    }\\n\\n    function burn(\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external override nonReentrant {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _burn(from, tokenId, amount);\\n    }\\n\\n    function burnBatch(\\n        address from,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external override nonReentrant {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _burnBatch(from, tokenIds, amounts);\\n    }\\n\\n    constructor(string memory uri_) ERC1155(uri_) {}\\n\\n    receive() external payable {}\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = _msgSender().call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xdfc8696e57ad72c67f2f85d6b2df59fec543726ab0464817aec10eeb60ae6b3f\",\"license\":\"MIT\"},\"contracts/interfaces/ICandyShop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICandyShop {\\n    function burnBatch(\\n        address from,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5149dbb72dc6f0f71424aac31612102da5860753e8e1d973aabe6e448aa2baa6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620035de380380620035de8339810160408190526200003491620002b8565b80620000408162000062565b506003805460ff1916905562000056336200007b565b5060016004556200033f565b805162000077906002906020840190620000d5565b5050565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000e3906200030e565b90600052602060002090601f01602090048101928262000107576000855562000152565b82601f106200012257805160ff191683800117855562000152565b8280016001018555821562000152579182015b828111156200015257825182559160200191906001019062000135565b506200016092915062000164565b5090565b5b8082111562000160576000815560010162000165565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b0381118282101715620001b957620001b96200017b565b6040525050565b6000620001cc60405190565b9050620001da828262000191565b919050565b60006001600160401b03821115620001fb57620001fb6200017b565b601f19601f83011660200192915050565b60005b83811015620002295781810151838201526020016200020f565b8381111562000239576000848401525b50505050565b6000620002566200025084620001df565b620001c0565b905082815260208101848484011115620002735762000273600080fd5b620002808482856200020c565b509392505050565b600082601f8301126200029e576200029e600080fd5b8151620002b08482602086016200023f565b949350505050565b600060208284031215620002cf57620002cf600080fd5b81516001600160401b03811115620002ea57620002ea600080fd5b620002b08482850162000288565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200032357607f821691505b60208210811415620003395762000339620002f8565b50919050565b61328f806200034f6000396000f3fe60806040526004361061018e5760003560e01c80636b20c454116100d6578063d351cfdc1161007f578063f2fde38b11610059578063f2fde38b1461048b578063f5298aca146104ab578063fbc7571f146104cb57600080fd5b8063d351cfdc1461040f578063e985e9c514610422578063f242432a1461046b57600080fd5b80638da5cb5b116100b05780638da5cb5b146103ac578063a22cb465146103cf578063a4fd6a04146103ef57600080fd5b80636b20c45414610362578063715018a6146103825780638456cb591461039757600080fd5b80633f4ba83a11610138578063545a149911610112578063545a1499146102e55780635952c55d146103125780635c975abb1461034a57600080fd5b80633f4ba83a146102745780634272ee18146102895780634e1273f4146102b857600080fd5b80631b2ef1ca116101695780631b2ef1ca1461022a5780632eb2c2d61461023f5780633ccfd60b1461025f57600080fd5b8062fdd58e1461019a57806301ffc9a7146101d05780630e89341c146101fd57600080fd5b3661019557005b600080fd5b3480156101a657600080fd5b506101ba6101b5366004611df0565b6104eb565b6040516101c79190611e35565b60405180910390f35b3480156101dc57600080fd5b506101f06101eb366004611e76565b610545565b6040516101c79190611ea7565b34801561020957600080fd5b5061021d610218366004611eb5565b610628565b6040516101c79190611f38565b61023d610238366004611f50565b6106bc565b005b34801561024b57600080fd5b5061023d61025a366004612106565b61077b565b34801561026b57600080fd5b5061023d6107c7565b34801561028057600080fd5b5061023d610862565b34801561029557600080fd5b506102a96102a4366004611eb5565b61089c565b6040516101c7939291906121cf565b3480156102c457600080fd5b506102d86102d3366004612278565b610947565b6040516101c7919061233e565b3480156102f157600080fd5b50600854610305906001600160a01b031681565b6040516101c79190612358565b34801561031e57600080fd5b506101ba61032d366004612366565b805160208183018101805160068252928201919093012091525481565b34801561035657600080fd5b5060035460ff166101f0565b34801561036e57600080fd5b5061023d61037d3660046123f3565b610a2f565b34801561038e57600080fd5b5061023d610b09565b3480156103a357600080fd5b5061023d610b43565b3480156103b857600080fd5b5060035461010090046001600160a01b0316610305565b3480156103db57600080fd5b5061023d6103ea366004612496565b610b7b565b3480156103fb57600080fd5b5061023d61040a3660046125bf565b610b8a565b61023d61041d3660046125fa565b610da4565b34801561042e57600080fd5b506101f061043d366004612673565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561047757600080fd5b5061023d6104863660046126a6565b610f34565b34801561049757600080fd5b5061023d6104a6366004612700565b610f79565b3480156104b757600080fd5b5061023d6104c6366004612721565b610fd8565b3480156104d757600080fd5b5061023d6104e6366004612700565b61104d565b60006001600160a01b03831661051c5760405162461bcd60e51b8152600401610513906127cb565b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a260000000000000000000000000000000000000000000000000000000014806105d857507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061053f57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461053f565b606060028054610637906127f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610663906127f1565b80156106b05780601f10610685576101008083540402835291602001916106b0565b820191906000526020600020905b81548152906001019060200180831161069357829003601f168201915b50505050509050919050565b600260045414156106df5760405162461bcd60e51b815260040161051390612850565b600260045560075482106107055760405162461bcd60e51b815260040161051390612892565b6000828152600560205260409020600101546107229082906128b8565b34146107405760405162461bcd60e51b81526004016105139061292f565b61075b338383604051806020016040528060008152506110b7565b600854610772906001600160a01b03166001610b7b565b50506001600455565b6001600160a01b0385163314806107975750610797853361043d565b6107b35760405162461bcd60e51b815260040161051390612997565b6107c0858585858561119b565b5050505050565b6003546001600160a01b036101009091041633146107f75760405162461bcd60e51b8152600401610513906129d7565b604051600090339047908381818185875af1925050503d8060008114610839576040519150601f19603f3d011682016040523d82523d6000602084013e61083e565b606091505b505090508061085f5760405162461bcd60e51b815260040161051390612a19565b50565b6003546001600160a01b036101009091041633146108925760405162461bcd60e51b8152600401610513906129d7565b61089a611345565b565b600560205260009081526040902080546001820154600283018054929391926108c4906127f1565b80601f01602080910402602001604051908101604052809291908181526020018280546108f0906127f1565b801561093d5780601f106109125761010080835404028352916020019161093d565b820191906000526020600020905b81548152906001019060200180831161092057829003601f168201915b5050505050905083565b6060815183511461096a5760405162461bcd60e51b815260040161051390612a81565b6000835167ffffffffffffffff81111561098657610986611f72565b6040519080825280602002602001820160405280156109af578160200160208202803683370190505b50905060005b8451811015610a27576109fa8582815181106109d3576109d3612a91565b60200260200101518583815181106109ed576109ed612a91565b60200260200101516104eb565b828281518110610a0c57610a0c612a91565b6020908102919091010152610a2081612aa7565b90506109b5565b509392505050565b60026004541415610a525760405162461bcd60e51b815260040161051390612850565b60026004556001600160a01b038516331480610a735750610a73853361043d565b610a8f5760405162461bcd60e51b815260040161051390612997565b610afd85858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152506113ab92505050565b50506001600455505050565b6003546001600160a01b03610100909104163314610b395760405162461bcd60e51b8152600401610513906129d7565b61089a6000611539565b6003546001600160a01b03610100909104163314610b735760405162461bcd60e51b8152600401610513906129d7565b61089a6115aa565b610b86338383611602565b5050565b6003546001600160a01b03610100909104163314610bba5760405162461bcd60e51b8152600401610513906129d7565b60005b8151811015610b865760075415610c6a57818181518110610be057610be0612a91565b6020026020010151602001518051906020012060076006848481518110610c0957610c09612a91565b602002602001015160200151604051610c229190612ae4565b90815260200160405180910390205481548110610c4157610c41612a91565b90600052602060002001541415610c6a5760405162461bcd60e51b815260040161051390612b20565b60075482518190600690859085908110610c8657610c86612a91565b602002602001015160200151604051610c9f9190612ae4565b9081526020016040518091039020819055506007838381518110610cc557610cc5612a91565b6020026020010151602001518051906020012090806001815401808255809150506001900390600052602060002001600090919091909150556040518060600160405280828152602001848481518110610d2157610d21612a91565b6020026020010151600001518152602001848481518110610d4457610d44612a91565b602090810291909101810151810151909152600083815260058252604090819020835181558383015160018201559083015180519192610d8c92600285019290910190611d16565b50905050508080610d9c90612aa7565b915050610bbd565b60026004541415610dc75760405162461bcd60e51b815260040161051390612850565b60026004556000805b84811015610e8157600754868683818110610ded57610ded612a91565b9050602002013510610e115760405162461bcd60e51b815260040161051390612892565b838382818110610e2357610e23612a91565b9050602002013560056000888885818110610e4057610e40612a91565b90506020020135815260200190815260200160002060010154610e6391906128b8565b610e6d9083612b30565b915080610e7981612aa7565b915050610dd0565b50803414610ea15760405162461bcd60e51b81526004016105139061292f565b610f1d3386868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a028281018201909352898252909350899250889182918501908490808284376000920182905250604080516020810190915290815292506116a5915050565b600854610afd906001600160a01b03166001610b7b565b6001600160a01b038516331480610f505750610f50853361043d565b610f6c5760405162461bcd60e51b815260040161051390612ba0565b6107c085858585856117ff565b6003546001600160a01b03610100909104163314610fa95760405162461bcd60e51b8152600401610513906129d7565b6001600160a01b038116610fcf5760405162461bcd60e51b815260040161051390612c08565b61085f81611539565b60026004541415610ffb5760405162461bcd60e51b815260040161051390612850565b60026004556001600160a01b03831633148061101c575061101c833361043d565b6110385760405162461bcd60e51b815260040161051390612997565b611043838383611928565b5050600160045550565b6003546001600160a01b0361010090910416331461107d5760405162461bcd60e51b8152600401610513906129d7565b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001600160a01b0384166110dd5760405162461bcd60e51b815260040161051390612c70565b336110fd816000876110ee88611a2c565b6110f788611a2c565b87611a77565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061112d908490612b30565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051611184929190612c80565b60405180910390a46107c081600087878787611a9a565b81518351146111bc5760405162461bcd60e51b815260040161051390612cf3565b6001600160a01b0384166111e25760405162461bcd60e51b815260040161051390612d5b565b336111f1818787878787611a77565b60005b84518110156112d757600085828151811061121157611211612a91565b60200260200101519050600085838151811061122f5761122f612a91565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561127f5760405162461bcd60e51b815260040161051390612dc3565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906112bc908490612b30565b92505081905550505050806112d090612aa7565b90506111f4565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611327929190612dd3565b60405180910390a461133d818787878787611c02565b505050505050565b60035460ff166113675760405162461bcd60e51b815260040161051390612e2a565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516113a19190612358565b60405180910390a1565b6001600160a01b0383166113d15760405162461bcd60e51b815260040161051390612e92565b80518251146113f25760405162461bcd60e51b815260040161051390612cf3565b600033905061141581856000868660405180602001604052806000815250611a77565b60005b83518110156114da57600084828151811061143557611435612a91565b60200260200101519050600084838151811061145357611453612a91565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156114a35760405162461bcd60e51b815260040161051390612efa565b6000928352602083815260408085206001600160a01b038b16865290915290922091039055806114d281612aa7565b915050611418565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161152b929190612dd3565b60405180910390a450505050565b600380546001600160a01b038381166101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff85161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60035460ff16156115cd5760405162461bcd60e51b815260040161051390612f3c565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113943390565b816001600160a01b0316836001600160a01b031614156116345760405162461bcd60e51b815260040161051390612fa4565b6001600160a01b0383811660008181526001602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611698908590611ea7565b60405180910390a3505050565b6001600160a01b0384166116cb5760405162461bcd60e51b815260040161051390612c70565b81518351146116ec5760405162461bcd60e51b815260040161051390612cf3565b336116fc81600087878787611a77565b60005b84518110156117975783818151811061171a5761171a612a91565b602002602001015160008087848151811061173757611737612a91565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461177f9190612b30565b9091555081905061178f81612aa7565b9150506116ff565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117e8929190612dd3565b60405180910390a46107c081600087878787611c02565b6001600160a01b0384166118255760405162461bcd60e51b815260040161051390612d5b565b336118358187876110ee88611a2c565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156118765760405162461bcd60e51b815260040161051390612dc3565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906118b3908490612b30565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051611909929190612c80565b60405180910390a461191f828888888888611a9a565b50505050505050565b6001600160a01b03831661194e5760405162461bcd60e51b815260040161051390612e92565b3361197d8185600061195f87611a2c565b61196887611a2c565b60405180602001604052806000815250611a77565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156119be5760405162461bcd60e51b815260040161051390612efa565b6000848152602081815260408083206001600160a01b03808a16808652919093528184208786039055905190918516907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6290611a1d9089908990612c80565b60405180910390a45050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611a6657611a66612a91565b602090810291909101015292915050565b60035460ff161561133d5760405162461bcd60e51b81526004016105139061300c565b6001600160a01b0384163b1561133d576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e6190611af7908990899088908890889060040161301c565b602060405180830381600087803b158015611b1157600080fd5b505af1925050508015611b41575060408051601f3d908101601f19168201909252611b3e91810190613079565b60015b611ba157611b4d61309a565b806308c379a01415611b875750611b626130b6565b80611b6d5750611b89565b8060405162461bcd60e51b81526004016105139190611f38565b505b60405162461bcd60e51b81526004016105139061318c565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e61000000000000000000000000000000000000000000000000000000001461191f5760405162461bcd60e51b8152600401610513906131f4565b6001600160a01b0384163b1561133d576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c8190611c5f9089908990889088908890600401613204565b602060405180830381600087803b158015611c7957600080fd5b505af1925050508015611ca9575060408051601f3d908101601f19168201909252611ca691810190613079565b60015b611cb557611b4d61309a565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c81000000000000000000000000000000000000000000000000000000001461191f5760405162461bcd60e51b8152600401610513906131f4565b828054611d22906127f1565b90600052602060002090601f016020900481019282611d445760008555611d8a565b82601f10611d5d57805160ff1916838001178555611d8a565b82800160010185558215611d8a579182015b82811115611d8a578251825591602001919060010190611d6f565b50611d96929150611d9a565b5090565b5b80821115611d965760008155600101611d9b565b60006001600160a01b03821661053f565b611dc981611daf565b811461085f57600080fd5b803561053f81611dc0565b80611dc9565b803561053f81611ddf565b60008060408385031215611e0657611e06600080fd5b6000611e128585611dd4565b9250506020611e2385828601611de5565b9150509250929050565b805b82525050565b6020810161053f8284611e2d565b7fffffffff000000000000000000000000000000000000000000000000000000008116611dc9565b803561053f81611e43565b600060208284031215611e8b57611e8b600080fd5b6000611e978484611e6b565b949350505050565b801515611e2f565b6020810161053f8284611e9f565b600060208284031215611eca57611eca600080fd5b6000611e978484611de5565b60005b83811015611ef1578181015183820152602001611ed9565b83811115611f00576000848401525b50505050565b6000611f10825190565b808452602084019350611f27818560208601611ed6565b601f01601f19169290920192915050565b60208082528101611f498184611f06565b9392505050565b60008060408385031215611f6657611f66600080fd5b6000611e128585611de5565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715611fae57611fae611f72565b6040525050565b6000611fc060405190565b9050611fcc8282611f88565b919050565b600067ffffffffffffffff821115611feb57611feb611f72565b5060209081020190565b600061200861200384611fd1565b611fb5565b8381529050602080820190840283018581111561202757612027600080fd5b835b818110156120495761203b8782611de5565b835260209283019201612029565b5050509392505050565b600082601f83011261206757612067600080fd5b8135611e97848260208601611ff5565b600067ffffffffffffffff82111561209157612091611f72565b601f19601f83011660200192915050565b82818337506000910152565b60006120bc61200384612077565b9050828152602081018484840111156120d7576120d7600080fd5b610a278482856120a2565b600082601f8301126120f6576120f6600080fd5b8135611e978482602086016120ae565b600080600080600060a0868803121561212157612121600080fd5b600061212d8888611dd4565b955050602061213e88828901611dd4565b945050604086013567ffffffffffffffff81111561215e5761215e600080fd5b61216a88828901612053565b935050606086013567ffffffffffffffff81111561218a5761218a600080fd5b61219688828901612053565b925050608086013567ffffffffffffffff8111156121b6576121b6600080fd5b6121c2888289016120e2565b9150509295509295909350565b606081016121dd8286611e2d565b6121ea6020830185611e2d565b81810360408301526121fc8184611f06565b95945050505050565b600061221361200384611fd1565b8381529050602080820190840283018581111561223257612232600080fd5b835b81811015612049576122468782611dd4565b835260209283019201612234565b600082601f83011261226857612268600080fd5b8135611e97848260208601612205565b6000806040838503121561228e5761228e600080fd5b823567ffffffffffffffff8111156122a8576122a8600080fd5b6122b485828601612254565b925050602083013567ffffffffffffffff8111156122d4576122d4600080fd5b611e2385828601612053565b6122ea8282611e2d565b5060200190565b60200190565b6000612301825190565b808452602093840193830160005b8281101561233457815161232387826122e0565b96505060208201915060010161230f565b5093949350505050565b60208082528101611f4981846122f7565b611e2f81611daf565b6020810161053f828461234f565b60006020828403121561237b5761237b600080fd5b813567ffffffffffffffff81111561239557612395600080fd5b611e97848285016120e2565b60008083601f8401126123b6576123b6600080fd5b50813567ffffffffffffffff8111156123d1576123d1600080fd5b6020830191508360208202830111156123ec576123ec600080fd5b9250929050565b60008060008060006060868803121561240e5761240e600080fd5b600061241a8888611dd4565b955050602086013567ffffffffffffffff81111561243a5761243a600080fd5b612446888289016123a1565b9450945050604086013567ffffffffffffffff81111561246857612468600080fd5b612474888289016123a1565b92509250509295509295909350565b801515611dc9565b803561053f81612483565b600080604083850312156124ac576124ac600080fd5b60006124b88585611dd4565b9250506020611e238582860161248b565b6000604082840312156124de576124de600080fd5b6124e86040611fb5565b905060006124f68484611de5565b90820152602082013567ffffffffffffffff81111561251757612517600080fd5b612523848285016120e2565b60208301525092915050565b600061253d61200384611fd1565b8381529050602080820190840283018581111561255c5761255c600080fd5b835b8181101561204957803567ffffffffffffffff81111561258057612580600080fd5b850161258c88826124c9565b8452506020928301920161255e565b600082601f8301126125af576125af600080fd5b8135611e9784826020860161252f565b6000602082840312156125d4576125d4600080fd5b813567ffffffffffffffff8111156125ee576125ee600080fd5b611e978482850161259b565b6000806000806040858703121561261357612613600080fd5b843567ffffffffffffffff81111561262d5761262d600080fd5b612639878288016123a1565b9450945050602085013567ffffffffffffffff81111561265b5761265b600080fd5b612667878288016123a1565b95989497509550505050565b6000806040838503121561268957612689600080fd5b60006126958585611dd4565b9250506020611e2385828601611dd4565b600080600080600060a086880312156126c1576126c1600080fd5b60006126cd8888611dd4565b95505060206126de88828901611dd4565b94505060406126ef88828901611de5565b935050606061219688828901611de5565b60006020828403121561271557612715600080fd5b6000611e978484611dd4565b60008060006060848603121561273957612739600080fd5b60006127458686611dd4565b935050602061275686828701611de5565b925050604061276786828701611de5565b9150509250925092565b602b8152602081017f455243313135353a2062616c616e636520717565727920666f7220746865207a81527f65726f2061646472657373000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161053f81612771565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061280557607f821691505b60208210811415612818576128186127db565b50919050565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815290506122f1565b6020808252810161053f8161281e565b601d8152602081017f546869732063616e647920646f6573206e6f7420657869737420796574000000815290506122f1565b6020808252810161053f81612860565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156128d2576128d26128a2565b500290565b60288152602081017f596f75206861766520746f207061792074686520707269636520746f2065617481527f2063616e64696573000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f816128d7565b60328152602081017f455243313135353a207472616e736665722063616c6c6572206973206e6f742081527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015290506127c5565b6020808252810161053f8161293f565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526122f1565b6020808252810161053f816129a7565b60118152602081017f5769746864726177616c206661696c6564000000000000000000000000000000815290506122f1565b6020808252810161053f816129e7565b60298152602081017f455243313135353a206163636f756e747320616e6420696473206c656e67746881527f206d69736d617463680000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612a29565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612abb57612abb6128a2565b5060010190565b6000612acc825190565b612ada818560208601611ed6565b9290920192915050565b61053f8183612ac2565b60128152602081017f536b7520616c7265616479206578697374730000000000000000000000000000815290506122f1565b6020808252810161053f81612aee565b60008219821115612b4357612b436128a2565b500190565b60298152602081017f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7281527f20617070726f7665640000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612b48565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612bb0565b60218152602081017f455243313135353a206d696e7420746f20746865207a65726f2061646472657381527f7300000000000000000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612c18565b60408101612c8e8285611e2d565b611f496020830184611e2d565b60288152602081017f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682081527f6d69736d61746368000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612c9b565b60258152602081017f455243313135353a207472616e7366657220746f20746865207a65726f20616481527f6472657373000000000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612d03565b602a8152602081017f455243313135353a20696e73756666696369656e742062616c616e636520666f81527f72207472616e7366657200000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612d6b565b60408082528101612de481856122f7565b90508181036020830152611e9781846122f7565b60148152602081017f5061757361626c653a206e6f7420706175736564000000000000000000000000815290506122f1565b6020808252810161053f81612df8565b60238152602081017f455243313135353a206275726e2066726f6d20746865207a65726f206164647281527f6573730000000000000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612e3a565b60248152602081017f455243313135353a206275726e20616d6f756e7420657863656564732062616c81527f616e636500000000000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612ea2565b60108152602081017f5061757361626c653a2070617573656400000000000000000000000000000000815290506122f1565b6020808252810161053f81612f0a565b60298152602081017f455243313135353a2073657474696e6720617070726f76616c2073746174757381527f20666f722073656c660000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612f4c565b602c8152602081017f455243313135355061757361626c653a20746f6b656e207472616e736665722081527f7768696c65207061757365640000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612fb4565b60a0810161302a828861234f565b613037602083018761234f565b6130446040830186611e2d565b6130516060830185611e2d565b81810360808301526130638184611f06565b979650505050505050565b805161053f81611e43565b60006020828403121561308e5761308e600080fd5b6000611e97848461306e565b600060033d11156130b35760046000803e5060005160e01c5b90565b600060443d10156130c45790565b60405160043d036004823e80513d602482011167ffffffffffffffff821117156130ed57505090565b808201805167ffffffffffffffff811115613109575050505090565b80602083010160043d03850181111561312457505050505090565b50610a2781602001840185611f88565b60348152602081017f455243313135353a207472616e7366657220746f206e6f6e204552433131353581527f526563656976657220696d706c656d656e746572000000000000000000000000602082015290506127c5565b6020808252810161053f81613134565b60288152602081017f455243313135353a204552433131353552656365697665722072656a6563746581527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f8161319c565b60a08101613212828861234f565b61321f602083018761234f565b818103604083015261323181866122f7565b9050818103606083015261324581856122f7565b905081810360808301526130638184611f0656fea2646970667358221220fad9da03b4dc92796ab4e22f0845b21e9f268b7cfd2942a17bf7732e98693c4764736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061018e5760003560e01c80636b20c454116100d6578063d351cfdc1161007f578063f2fde38b11610059578063f2fde38b1461048b578063f5298aca146104ab578063fbc7571f146104cb57600080fd5b8063d351cfdc1461040f578063e985e9c514610422578063f242432a1461046b57600080fd5b80638da5cb5b116100b05780638da5cb5b146103ac578063a22cb465146103cf578063a4fd6a04146103ef57600080fd5b80636b20c45414610362578063715018a6146103825780638456cb591461039757600080fd5b80633f4ba83a11610138578063545a149911610112578063545a1499146102e55780635952c55d146103125780635c975abb1461034a57600080fd5b80633f4ba83a146102745780634272ee18146102895780634e1273f4146102b857600080fd5b80631b2ef1ca116101695780631b2ef1ca1461022a5780632eb2c2d61461023f5780633ccfd60b1461025f57600080fd5b8062fdd58e1461019a57806301ffc9a7146101d05780630e89341c146101fd57600080fd5b3661019557005b600080fd5b3480156101a657600080fd5b506101ba6101b5366004611df0565b6104eb565b6040516101c79190611e35565b60405180910390f35b3480156101dc57600080fd5b506101f06101eb366004611e76565b610545565b6040516101c79190611ea7565b34801561020957600080fd5b5061021d610218366004611eb5565b610628565b6040516101c79190611f38565b61023d610238366004611f50565b6106bc565b005b34801561024b57600080fd5b5061023d61025a366004612106565b61077b565b34801561026b57600080fd5b5061023d6107c7565b34801561028057600080fd5b5061023d610862565b34801561029557600080fd5b506102a96102a4366004611eb5565b61089c565b6040516101c7939291906121cf565b3480156102c457600080fd5b506102d86102d3366004612278565b610947565b6040516101c7919061233e565b3480156102f157600080fd5b50600854610305906001600160a01b031681565b6040516101c79190612358565b34801561031e57600080fd5b506101ba61032d366004612366565b805160208183018101805160068252928201919093012091525481565b34801561035657600080fd5b5060035460ff166101f0565b34801561036e57600080fd5b5061023d61037d3660046123f3565b610a2f565b34801561038e57600080fd5b5061023d610b09565b3480156103a357600080fd5b5061023d610b43565b3480156103b857600080fd5b5060035461010090046001600160a01b0316610305565b3480156103db57600080fd5b5061023d6103ea366004612496565b610b7b565b3480156103fb57600080fd5b5061023d61040a3660046125bf565b610b8a565b61023d61041d3660046125fa565b610da4565b34801561042e57600080fd5b506101f061043d366004612673565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561047757600080fd5b5061023d6104863660046126a6565b610f34565b34801561049757600080fd5b5061023d6104a6366004612700565b610f79565b3480156104b757600080fd5b5061023d6104c6366004612721565b610fd8565b3480156104d757600080fd5b5061023d6104e6366004612700565b61104d565b60006001600160a01b03831661051c5760405162461bcd60e51b8152600401610513906127cb565b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd9b67a260000000000000000000000000000000000000000000000000000000014806105d857507fffffffff0000000000000000000000000000000000000000000000000000000082167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061053f57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461053f565b606060028054610637906127f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610663906127f1565b80156106b05780601f10610685576101008083540402835291602001916106b0565b820191906000526020600020905b81548152906001019060200180831161069357829003601f168201915b50505050509050919050565b600260045414156106df5760405162461bcd60e51b815260040161051390612850565b600260045560075482106107055760405162461bcd60e51b815260040161051390612892565b6000828152600560205260409020600101546107229082906128b8565b34146107405760405162461bcd60e51b81526004016105139061292f565b61075b338383604051806020016040528060008152506110b7565b600854610772906001600160a01b03166001610b7b565b50506001600455565b6001600160a01b0385163314806107975750610797853361043d565b6107b35760405162461bcd60e51b815260040161051390612997565b6107c0858585858561119b565b5050505050565b6003546001600160a01b036101009091041633146107f75760405162461bcd60e51b8152600401610513906129d7565b604051600090339047908381818185875af1925050503d8060008114610839576040519150601f19603f3d011682016040523d82523d6000602084013e61083e565b606091505b505090508061085f5760405162461bcd60e51b815260040161051390612a19565b50565b6003546001600160a01b036101009091041633146108925760405162461bcd60e51b8152600401610513906129d7565b61089a611345565b565b600560205260009081526040902080546001820154600283018054929391926108c4906127f1565b80601f01602080910402602001604051908101604052809291908181526020018280546108f0906127f1565b801561093d5780601f106109125761010080835404028352916020019161093d565b820191906000526020600020905b81548152906001019060200180831161092057829003601f168201915b5050505050905083565b6060815183511461096a5760405162461bcd60e51b815260040161051390612a81565b6000835167ffffffffffffffff81111561098657610986611f72565b6040519080825280602002602001820160405280156109af578160200160208202803683370190505b50905060005b8451811015610a27576109fa8582815181106109d3576109d3612a91565b60200260200101518583815181106109ed576109ed612a91565b60200260200101516104eb565b828281518110610a0c57610a0c612a91565b6020908102919091010152610a2081612aa7565b90506109b5565b509392505050565b60026004541415610a525760405162461bcd60e51b815260040161051390612850565b60026004556001600160a01b038516331480610a735750610a73853361043d565b610a8f5760405162461bcd60e51b815260040161051390612997565b610afd85858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152506113ab92505050565b50506001600455505050565b6003546001600160a01b03610100909104163314610b395760405162461bcd60e51b8152600401610513906129d7565b61089a6000611539565b6003546001600160a01b03610100909104163314610b735760405162461bcd60e51b8152600401610513906129d7565b61089a6115aa565b610b86338383611602565b5050565b6003546001600160a01b03610100909104163314610bba5760405162461bcd60e51b8152600401610513906129d7565b60005b8151811015610b865760075415610c6a57818181518110610be057610be0612a91565b6020026020010151602001518051906020012060076006848481518110610c0957610c09612a91565b602002602001015160200151604051610c229190612ae4565b90815260200160405180910390205481548110610c4157610c41612a91565b90600052602060002001541415610c6a5760405162461bcd60e51b815260040161051390612b20565b60075482518190600690859085908110610c8657610c86612a91565b602002602001015160200151604051610c9f9190612ae4565b9081526020016040518091039020819055506007838381518110610cc557610cc5612a91565b6020026020010151602001518051906020012090806001815401808255809150506001900390600052602060002001600090919091909150556040518060600160405280828152602001848481518110610d2157610d21612a91565b6020026020010151600001518152602001848481518110610d4457610d44612a91565b602090810291909101810151810151909152600083815260058252604090819020835181558383015160018201559083015180519192610d8c92600285019290910190611d16565b50905050508080610d9c90612aa7565b915050610bbd565b60026004541415610dc75760405162461bcd60e51b815260040161051390612850565b60026004556000805b84811015610e8157600754868683818110610ded57610ded612a91565b9050602002013510610e115760405162461bcd60e51b815260040161051390612892565b838382818110610e2357610e23612a91565b9050602002013560056000888885818110610e4057610e40612a91565b90506020020135815260200190815260200160002060010154610e6391906128b8565b610e6d9083612b30565b915080610e7981612aa7565b915050610dd0565b50803414610ea15760405162461bcd60e51b81526004016105139061292f565b610f1d3386868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a028281018201909352898252909350899250889182918501908490808284376000920182905250604080516020810190915290815292506116a5915050565b600854610afd906001600160a01b03166001610b7b565b6001600160a01b038516331480610f505750610f50853361043d565b610f6c5760405162461bcd60e51b815260040161051390612ba0565b6107c085858585856117ff565b6003546001600160a01b03610100909104163314610fa95760405162461bcd60e51b8152600401610513906129d7565b6001600160a01b038116610fcf5760405162461bcd60e51b815260040161051390612c08565b61085f81611539565b60026004541415610ffb5760405162461bcd60e51b815260040161051390612850565b60026004556001600160a01b03831633148061101c575061101c833361043d565b6110385760405162461bcd60e51b815260040161051390612997565b611043838383611928565b5050600160045550565b6003546001600160a01b0361010090910416331461107d5760405162461bcd60e51b8152600401610513906129d7565b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001600160a01b0384166110dd5760405162461bcd60e51b815260040161051390612c70565b336110fd816000876110ee88611a2c565b6110f788611a2c565b87611a77565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061112d908490612b30565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051611184929190612c80565b60405180910390a46107c081600087878787611a9a565b81518351146111bc5760405162461bcd60e51b815260040161051390612cf3565b6001600160a01b0384166111e25760405162461bcd60e51b815260040161051390612d5b565b336111f1818787878787611a77565b60005b84518110156112d757600085828151811061121157611211612a91565b60200260200101519050600085838151811061122f5761122f612a91565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561127f5760405162461bcd60e51b815260040161051390612dc3565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906112bc908490612b30565b92505081905550505050806112d090612aa7565b90506111f4565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611327929190612dd3565b60405180910390a461133d818787878787611c02565b505050505050565b60035460ff166113675760405162461bcd60e51b815260040161051390612e2a565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516113a19190612358565b60405180910390a1565b6001600160a01b0383166113d15760405162461bcd60e51b815260040161051390612e92565b80518251146113f25760405162461bcd60e51b815260040161051390612cf3565b600033905061141581856000868660405180602001604052806000815250611a77565b60005b83518110156114da57600084828151811061143557611435612a91565b60200260200101519050600084838151811061145357611453612a91565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156114a35760405162461bcd60e51b815260040161051390612efa565b6000928352602083815260408085206001600160a01b038b16865290915290922091039055806114d281612aa7565b915050611418565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161152b929190612dd3565b60405180910390a450505050565b600380546001600160a01b038381166101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff85161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60035460ff16156115cd5760405162461bcd60e51b815260040161051390612f3c565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113943390565b816001600160a01b0316836001600160a01b031614156116345760405162461bcd60e51b815260040161051390612fa4565b6001600160a01b0383811660008181526001602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611698908590611ea7565b60405180910390a3505050565b6001600160a01b0384166116cb5760405162461bcd60e51b815260040161051390612c70565b81518351146116ec5760405162461bcd60e51b815260040161051390612cf3565b336116fc81600087878787611a77565b60005b84518110156117975783818151811061171a5761171a612a91565b602002602001015160008087848151811061173757611737612a91565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461177f9190612b30565b9091555081905061178f81612aa7565b9150506116ff565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117e8929190612dd3565b60405180910390a46107c081600087878787611c02565b6001600160a01b0384166118255760405162461bcd60e51b815260040161051390612d5b565b336118358187876110ee88611a2c565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156118765760405162461bcd60e51b815260040161051390612dc3565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906118b3908490612b30565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051611909929190612c80565b60405180910390a461191f828888888888611a9a565b50505050505050565b6001600160a01b03831661194e5760405162461bcd60e51b815260040161051390612e92565b3361197d8185600061195f87611a2c565b61196887611a2c565b60405180602001604052806000815250611a77565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156119be5760405162461bcd60e51b815260040161051390612efa565b6000848152602081815260408083206001600160a01b03808a16808652919093528184208786039055905190918516907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6290611a1d9089908990612c80565b60405180910390a45050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611a6657611a66612a91565b602090810291909101015292915050565b60035460ff161561133d5760405162461bcd60e51b81526004016105139061300c565b6001600160a01b0384163b1561133d576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e6190611af7908990899088908890889060040161301c565b602060405180830381600087803b158015611b1157600080fd5b505af1925050508015611b41575060408051601f3d908101601f19168201909252611b3e91810190613079565b60015b611ba157611b4d61309a565b806308c379a01415611b875750611b626130b6565b80611b6d5750611b89565b8060405162461bcd60e51b81526004016105139190611f38565b505b60405162461bcd60e51b81526004016105139061318c565b7fffffffff0000000000000000000000000000000000000000000000000000000081167ff23a6e61000000000000000000000000000000000000000000000000000000001461191f5760405162461bcd60e51b8152600401610513906131f4565b6001600160a01b0384163b1561133d576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c8190611c5f9089908990889088908890600401613204565b602060405180830381600087803b158015611c7957600080fd5b505af1925050508015611ca9575060408051601f3d908101601f19168201909252611ca691810190613079565b60015b611cb557611b4d61309a565b7fffffffff0000000000000000000000000000000000000000000000000000000081167fbc197c81000000000000000000000000000000000000000000000000000000001461191f5760405162461bcd60e51b8152600401610513906131f4565b828054611d22906127f1565b90600052602060002090601f016020900481019282611d445760008555611d8a565b82601f10611d5d57805160ff1916838001178555611d8a565b82800160010185558215611d8a579182015b82811115611d8a578251825591602001919060010190611d6f565b50611d96929150611d9a565b5090565b5b80821115611d965760008155600101611d9b565b60006001600160a01b03821661053f565b611dc981611daf565b811461085f57600080fd5b803561053f81611dc0565b80611dc9565b803561053f81611ddf565b60008060408385031215611e0657611e06600080fd5b6000611e128585611dd4565b9250506020611e2385828601611de5565b9150509250929050565b805b82525050565b6020810161053f8284611e2d565b7fffffffff000000000000000000000000000000000000000000000000000000008116611dc9565b803561053f81611e43565b600060208284031215611e8b57611e8b600080fd5b6000611e978484611e6b565b949350505050565b801515611e2f565b6020810161053f8284611e9f565b600060208284031215611eca57611eca600080fd5b6000611e978484611de5565b60005b83811015611ef1578181015183820152602001611ed9565b83811115611f00576000848401525b50505050565b6000611f10825190565b808452602084019350611f27818560208601611ed6565b601f01601f19169290920192915050565b60208082528101611f498184611f06565b9392505050565b60008060408385031215611f6657611f66600080fd5b6000611e128585611de5565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715611fae57611fae611f72565b6040525050565b6000611fc060405190565b9050611fcc8282611f88565b919050565b600067ffffffffffffffff821115611feb57611feb611f72565b5060209081020190565b600061200861200384611fd1565b611fb5565b8381529050602080820190840283018581111561202757612027600080fd5b835b818110156120495761203b8782611de5565b835260209283019201612029565b5050509392505050565b600082601f83011261206757612067600080fd5b8135611e97848260208601611ff5565b600067ffffffffffffffff82111561209157612091611f72565b601f19601f83011660200192915050565b82818337506000910152565b60006120bc61200384612077565b9050828152602081018484840111156120d7576120d7600080fd5b610a278482856120a2565b600082601f8301126120f6576120f6600080fd5b8135611e978482602086016120ae565b600080600080600060a0868803121561212157612121600080fd5b600061212d8888611dd4565b955050602061213e88828901611dd4565b945050604086013567ffffffffffffffff81111561215e5761215e600080fd5b61216a88828901612053565b935050606086013567ffffffffffffffff81111561218a5761218a600080fd5b61219688828901612053565b925050608086013567ffffffffffffffff8111156121b6576121b6600080fd5b6121c2888289016120e2565b9150509295509295909350565b606081016121dd8286611e2d565b6121ea6020830185611e2d565b81810360408301526121fc8184611f06565b95945050505050565b600061221361200384611fd1565b8381529050602080820190840283018581111561223257612232600080fd5b835b81811015612049576122468782611dd4565b835260209283019201612234565b600082601f83011261226857612268600080fd5b8135611e97848260208601612205565b6000806040838503121561228e5761228e600080fd5b823567ffffffffffffffff8111156122a8576122a8600080fd5b6122b485828601612254565b925050602083013567ffffffffffffffff8111156122d4576122d4600080fd5b611e2385828601612053565b6122ea8282611e2d565b5060200190565b60200190565b6000612301825190565b808452602093840193830160005b8281101561233457815161232387826122e0565b96505060208201915060010161230f565b5093949350505050565b60208082528101611f4981846122f7565b611e2f81611daf565b6020810161053f828461234f565b60006020828403121561237b5761237b600080fd5b813567ffffffffffffffff81111561239557612395600080fd5b611e97848285016120e2565b60008083601f8401126123b6576123b6600080fd5b50813567ffffffffffffffff8111156123d1576123d1600080fd5b6020830191508360208202830111156123ec576123ec600080fd5b9250929050565b60008060008060006060868803121561240e5761240e600080fd5b600061241a8888611dd4565b955050602086013567ffffffffffffffff81111561243a5761243a600080fd5b612446888289016123a1565b9450945050604086013567ffffffffffffffff81111561246857612468600080fd5b612474888289016123a1565b92509250509295509295909350565b801515611dc9565b803561053f81612483565b600080604083850312156124ac576124ac600080fd5b60006124b88585611dd4565b9250506020611e238582860161248b565b6000604082840312156124de576124de600080fd5b6124e86040611fb5565b905060006124f68484611de5565b90820152602082013567ffffffffffffffff81111561251757612517600080fd5b612523848285016120e2565b60208301525092915050565b600061253d61200384611fd1565b8381529050602080820190840283018581111561255c5761255c600080fd5b835b8181101561204957803567ffffffffffffffff81111561258057612580600080fd5b850161258c88826124c9565b8452506020928301920161255e565b600082601f8301126125af576125af600080fd5b8135611e9784826020860161252f565b6000602082840312156125d4576125d4600080fd5b813567ffffffffffffffff8111156125ee576125ee600080fd5b611e978482850161259b565b6000806000806040858703121561261357612613600080fd5b843567ffffffffffffffff81111561262d5761262d600080fd5b612639878288016123a1565b9450945050602085013567ffffffffffffffff81111561265b5761265b600080fd5b612667878288016123a1565b95989497509550505050565b6000806040838503121561268957612689600080fd5b60006126958585611dd4565b9250506020611e2385828601611dd4565b600080600080600060a086880312156126c1576126c1600080fd5b60006126cd8888611dd4565b95505060206126de88828901611dd4565b94505060406126ef88828901611de5565b935050606061219688828901611de5565b60006020828403121561271557612715600080fd5b6000611e978484611dd4565b60008060006060848603121561273957612739600080fd5b60006127458686611dd4565b935050602061275686828701611de5565b925050604061276786828701611de5565b9150509250925092565b602b8152602081017f455243313135353a2062616c616e636520717565727920666f7220746865207a81527f65726f2061646472657373000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161053f81612771565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061280557607f821691505b60208210811415612818576128186127db565b50919050565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815290506122f1565b6020808252810161053f8161281e565b601d8152602081017f546869732063616e647920646f6573206e6f7420657869737420796574000000815290506122f1565b6020808252810161053f81612860565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156128d2576128d26128a2565b500290565b60288152602081017f596f75206861766520746f207061792074686520707269636520746f2065617481527f2063616e64696573000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f816128d7565b60328152602081017f455243313135353a207472616e736665722063616c6c6572206973206e6f742081527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015290506127c5565b6020808252810161053f8161293f565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526122f1565b6020808252810161053f816129a7565b60118152602081017f5769746864726177616c206661696c6564000000000000000000000000000000815290506122f1565b6020808252810161053f816129e7565b60298152602081017f455243313135353a206163636f756e747320616e6420696473206c656e67746881527f206d69736d617463680000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612a29565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612abb57612abb6128a2565b5060010190565b6000612acc825190565b612ada818560208601611ed6565b9290920192915050565b61053f8183612ac2565b60128152602081017f536b7520616c7265616479206578697374730000000000000000000000000000815290506122f1565b6020808252810161053f81612aee565b60008219821115612b4357612b436128a2565b500190565b60298152602081017f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7281527f20617070726f7665640000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612b48565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612bb0565b60218152602081017f455243313135353a206d696e7420746f20746865207a65726f2061646472657381527f7300000000000000000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612c18565b60408101612c8e8285611e2d565b611f496020830184611e2d565b60288152602081017f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682081527f6d69736d61746368000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612c9b565b60258152602081017f455243313135353a207472616e7366657220746f20746865207a65726f20616481527f6472657373000000000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612d03565b602a8152602081017f455243313135353a20696e73756666696369656e742062616c616e636520666f81527f72207472616e7366657200000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612d6b565b60408082528101612de481856122f7565b90508181036020830152611e9781846122f7565b60148152602081017f5061757361626c653a206e6f7420706175736564000000000000000000000000815290506122f1565b6020808252810161053f81612df8565b60238152602081017f455243313135353a206275726e2066726f6d20746865207a65726f206164647281527f6573730000000000000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612e3a565b60248152602081017f455243313135353a206275726e20616d6f756e7420657863656564732062616c81527f616e636500000000000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612ea2565b60108152602081017f5061757361626c653a2070617573656400000000000000000000000000000000815290506122f1565b6020808252810161053f81612f0a565b60298152602081017f455243313135353a2073657474696e6720617070726f76616c2073746174757381527f20666f722073656c660000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612f4c565b602c8152602081017f455243313135355061757361626c653a20746f6b656e207472616e736665722081527f7768696c65207061757365640000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f81612fb4565b60a0810161302a828861234f565b613037602083018761234f565b6130446040830186611e2d565b6130516060830185611e2d565b81810360808301526130638184611f06565b979650505050505050565b805161053f81611e43565b60006020828403121561308e5761308e600080fd5b6000611e97848461306e565b600060033d11156130b35760046000803e5060005160e01c5b90565b600060443d10156130c45790565b60405160043d036004823e80513d602482011167ffffffffffffffff821117156130ed57505090565b808201805167ffffffffffffffff811115613109575050505090565b80602083010160043d03850181111561312457505050505090565b50610a2781602001840185611f88565b60348152602081017f455243313135353a207472616e7366657220746f206e6f6e204552433131353581527f526563656976657220696d706c656d656e746572000000000000000000000000602082015290506127c5565b6020808252810161053f81613134565b60288152602081017f455243313135353a204552433131353552656365697665722072656a6563746581527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015290506127c5565b6020808252810161053f8161319c565b60a08101613212828861234f565b61321f602083018761234f565b818103604083015261323181866122f7565b9050818103606083015261324581856122f7565b905081810360808301526130638184611f0656fea2646970667358221220fad9da03b4dc92796ab4e22f0845b21e9f268b7cfd2942a17bf7732e98693c4764736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 480,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 486,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 488,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 340,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 225,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "_owner",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 425,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3801,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "inventory",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(SKU)3791_storage)"
      },
      {
        "astId": 3805,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "skuIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 3808,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "names",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 3810,
        "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
        "label": "chainDreamersAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(SKU)3791_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CandyShop.SKU)",
        "numberOfBytes": "32",
        "value": "t_struct(SKU)3791_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SKU)3791_storage": {
        "encoding": "inplace",
        "label": "struct CandyShop.SKU",
        "members": [
          {
            "astId": 3786,
            "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3788,
            "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3790,
            "contract": "contracts/dreamers/CandyShop.sol:CandyShop",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}