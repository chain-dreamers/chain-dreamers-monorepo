{
  "address": "0xBb987b0b805c09798B6bb148C23aC7FDF33C5b8B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_MINT_FOUNDERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_NUMBER_OF_TOKENS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_PUBLIC_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candyShopAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainRunnersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dreamersCandies",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        }
      ],
      "name": "flipProxyState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundersMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenExists",
      "outputs": [
        {
          "internalType": "bool[10000]",
          "name": "",
          "type": "bool[10000]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "looksrare",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplacesApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDreamersMintPublicSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        }
      ],
      "name": "mintBatchFounders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        }
      ],
      "name": "mintBatchPublicSale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "candyIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "candyAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatchRunnersAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "opensea",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candyShopContractAddress",
          "type": "address"
        }
      ],
      "name": "setCandyShopAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_chainRunnersContractAddress",
          "type": "address"
        }
      ],
      "name": "setChainRunnersContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "looksrare_",
          "type": "address"
        }
      ],
      "name": "setLooksrare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDreamersMintPublicSale",
          "type": "uint256"
        }
      ],
      "name": "setMaxDreamersMintPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "opensea_",
          "type": "address"
        }
      ],
      "name": "setOpensea",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_renderingContractAddress",
          "type": "address"
        }
      ],
      "name": "setRenderingContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleMarketplacesApproved",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2a0d1095c359aca84b1dfe31f3072550e8490bdd08285da732d916662a4fe8df",
  "receipt": {
    "to": null,
    "from": "0x145247853C6eeA1263757d22C5e8C3A4dBbF48b6",
    "contractAddress": "0xBb987b0b805c09798B6bb148C23aC7FDF33C5b8B",
    "transactionIndex": 9,
    "gasUsed": "4746867",
    "logsBloom": "0x
    "blockHash": "0x26f2975aca2e1a5dd592f9eccbf35477056c18e562e9f628c7f1a7cb29ab35a6",
    "transactionHash": "0x2a0d1095c359aca84b1dfe31f3072550e8490bdd08285da732d916662a4fe8df",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 10099105,
        "transactionHash": "0x2a0d1095c359aca84b1dfe31f3072550e8490bdd08285da732d916662a4fe8df",
        "address": "0xBb987b0b805c09798B6bb148C23aC7FDF33C5b8B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000145247853c6eea1263757d22c5e8c3a4dbbf48b6"
        ],
        "data": "0x",
        "logIndex": 75,
        "blockHash": "0x26f2975aca2e1a5dd592f9eccbf35477056c18e562e9f628c7f1a7cb29ab35a6"
      }
    ],
    "blockNumber": 10099105,
    "cumulativeGasUsed": "14531209",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Chain Dreamers",
    "DRE"
  ],
  "numDeployments": 15,
  "solcInputHash": "3ebd0f676f0cc544ed44158549654fd8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MINT_FOUNDERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_OF_TOKENS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PUBLIC_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candyShopAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainRunnersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dreamersCandies\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"flipProxyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundersMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenExists\",\"outputs\":[{\"internalType\":\"bool[10000]\",\"name\":\"\",\"type\":\"bool[10000]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"looksrare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplacesApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDreamersMintPublicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"}],\"name\":\"mintBatchFounders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"}],\"name\":\"mintBatchPublicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"candyIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"candyAmounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatchRunnersAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opensea\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candyShopContractAddress\",\"type\":\"address\"}],\"name\":\"setCandyShopAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainRunnersContractAddress\",\"type\":\"address\"}],\"name\":\"setChainRunnersContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"looksrare_\",\"type\":\"address\"}],\"name\":\"setLooksrare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDreamersMintPublicSale\",\"type\":\"uint256\"}],\"name\":\"setMaxDreamersMintPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opensea_\",\"type\":\"address\"}],\"name\":\"setOpensea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_renderingContractAddress\",\"type\":\"address\"}],\"name\":\"setRenderingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMarketplacesApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"approve(address,uint256,uint256)\":{\"details\":\"Approve \\\"to\\\" to manage token Id\",\"params\":{\"to\":\"address The address which will manage the token Id\",\"tokenId\":\"uint256 The token Id to manage\",\"tokenIndex\":\"uint256 The index of the token in the owner's list\"}},\"balanceOf(address)\":{\"details\":\"There are two bytes per tokenId\",\"params\":{\"owner\":\"address The address we retrieve the balance for\"},\"returns\":{\"_0\":\"uint256 The number of tokens owned by the address\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getOwnerIndex(address)\":{\"details\":\"Returns the index of owner in the internal array of owners. Revert if not found.\",\"params\":{\"owner\":\"address The address we retrieve the index for\"}},\"getTokenExists()\":{\"details\":\"Returns the array of bool telling if a token exists or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Modified for opensea and looksrare pre-approve so users can make truly gas less sales.\"},\"mintBatchRunnersAccess(bytes,uint256[],uint256[])\":{\"details\":\"This mint function wraps the safeMintBatch to:      1) check that the minter owns the runner 2) use the candies 3) burn the candies\",\"params\":{\"candyAmounts\":\"should be an array of 1\",\"candyIds\":\"the same indexes as above but as a uint8 array\",\"tokenIds\":\"a bytes interpreted as an array of uint16\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good      reason to call this function on chain.\",\"params\":{\"tokenId\":\"uint265 A given token id\"},\"returns\":{\"_0\":\"address The owner of the token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,uint256,address,uint256)\":{\"details\":\"Transfer token with minimal computing since all the required data to check is given\",\"params\":{\"from\":\"address The address which you want to transfer the token from\",\"fromIndex\":\"uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\",\"to\":\"address The address which you want to transfer the token to\",\"tokenIndex\":\"uint256 The index of the token to transfer in the from's token list.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\",\"params\":{\"_approved\":\"Whether to add or remove `operator` as an operator.\",\"operator\":\"The address of the operator to add or remove.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"opensea\":{\"details\":\"Copied from \\\\@naomsa's contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"flipProxyState(address)\":{\"notice\":\"Approve the communication and interaction with cross-collection interactions.\"},\"looksrare()\":{\"notice\":\"LooksRare marketplace transfer manager.\"},\"marketplacesApproved()\":{\"notice\":\"Check if marketplaces pre-approve is enabled.\"},\"opensea()\":{\"notice\":\"OpenSea proxy registry.\"},\"setLooksrare(address)\":{\"notice\":\"Set looksrare to `looksrare_`.\"},\"setOpensea(address)\":{\"notice\":\"Set opensea to `opensea_`.\"},\"toggleMarketplacesApproved()\":{\"notice\":\"Toggle pre-approve feature state for sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dreamers/ChainDreamers.sol\":\"ChainDreamers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dreamers/ChainDreamers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {BytesLib} from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport {ERC721Enumerable, ERC721} from \\\"../tokens/ERC721Enumerable.sol\\\";\\nimport \\\"../interfaces/IDreamersRenderer.sol\\\";\\nimport \\\"../interfaces/ICandyShop.sol\\\";\\nimport \\\"../interfaces/IChainRunners.sol\\\";\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\ncontract ChainDreamers is ERC721Enumerable, Ownable, ReentrancyGuard {\\n    // Linked contracts\\n    address public renderingContractAddress;\\n    address public candyShopAddress;\\n    address public chainRunnersAddress;\\n    IDreamersRenderer renderer;\\n    ICandyShop candyShop;\\n    IChainRunners chainRunners;\\n\\n    uint8[MAX_NUMBER_OF_TOKENS] public dreamersCandies;\\n    uint8 private constant candyMask = 252; // \\\"11111100\\\" binary string, last 2 bits kept for candyId\\n    /// @dev Copied from \\\\@naomsa's contract\\n    /// @notice OpenSea proxy registry.\\n    address public opensea;\\n    /// @notice LooksRare marketplace transfer manager.\\n    address public looksrare;\\n    /// @notice Check if marketplaces pre-approve is enabled.\\n    bool public marketplacesApproved = true;\\n\\n    mapping(address => bool) proxyToApproved;\\n\\n    /// @notice Set opensea to `opensea_`.\\n    function setOpensea(address opensea_) external onlyOwner {\\n        opensea = opensea_;\\n    }\\n\\n    /// @notice Set looksrare to `looksrare_`.\\n    function setLooksrare(address looksrare_) external onlyOwner {\\n        looksrare = looksrare_;\\n    }\\n\\n    /// @notice Toggle pre-approve feature state for sender.\\n    function toggleMarketplacesApproved() external onlyOwner {\\n        marketplacesApproved = !marketplacesApproved;\\n    }\\n\\n    /// @notice Approve the communication and interaction with cross-collection interactions.\\n    function flipProxyState(address proxyAddress) public onlyOwner {\\n        proxyToApproved[proxyAddress] = !proxyToApproved[proxyAddress];\\n    }\\n\\n    /// @dev Modified for opensea and looksrare pre-approve so users can make truly gas less sales.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (!marketplacesApproved)\\n            return super.isApprovedForAll(owner, operator);\\n\\n        return\\n            operator == address(ProxyRegistry(opensea).proxies(owner)) ||\\n            operator == looksrare ||\\n            proxyToApproved[operator] ||\\n            super.isApprovedForAll(owner, operator);\\n    }\\n\\n    // Constants\\n    uint256 public maxDreamersMintPublicSale;\\n    uint256 public constant MINT_PUBLIC_PRICE = 0.05 ether;\\n    uint256 public constant MAX_MINT_FOUNDERS = 50;\\n    bool public foundersMinted = false;\\n\\n    // State variables\\n    uint256 public publicSaleStartTimestamp;\\n\\n    function setPublicSaleTimestamp(uint256 timestamp) external onlyOwner {\\n        publicSaleStartTimestamp = timestamp;\\n    }\\n\\n    function isPublicSaleOpen() public view returns (bool) {\\n        return\\n            block.timestamp > publicSaleStartTimestamp &&\\n            publicSaleStartTimestamp != 0;\\n    }\\n\\n    modifier whenPublicSaleActive() {\\n        require(isPublicSaleOpen(), \\\"Public sale not open\\\");\\n        _;\\n    }\\n\\n    function setRenderingContractAddress(address _renderingContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        renderingContractAddress = _renderingContractAddress;\\n        renderer = IDreamersRenderer(renderingContractAddress);\\n    }\\n\\n    function setCandyShopAddress(address _candyShopContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        candyShopAddress = _candyShopContractAddress;\\n        candyShop = ICandyShop(candyShopAddress);\\n    }\\n\\n    function setMaxDreamersMintPublicSale(uint256 _maxDreamersMintPublicSale)\\n        public\\n        onlyOwner\\n    {\\n        maxDreamersMintPublicSale = _maxDreamersMintPublicSale;\\n    }\\n\\n    function setChainRunnersContractAddress(\\n        address _chainRunnersContractAddress\\n    ) public onlyOwner {\\n        chainRunnersAddress = _chainRunnersContractAddress;\\n        chainRunners = IChainRunners(_chainRunnersContractAddress);\\n    }\\n\\n    constructor(string memory name_, string memory symbol_)\\n        ERC721(name_, symbol_)\\n    {}\\n\\n    /// @dev This mint function wraps the safeMintBatch to:\\n    ///      1) check that the minter owns the runner 2) use the candies 3) burn the candies\\n    /// @param tokenIds a bytes interpreted as an array of uint16\\n    /// @param candyIds the same indexes as above but as a uint8 array\\n    /// @param candyAmounts should be an array of 1\\n    function mintBatchRunnersAccess(\\n        bytes calldata tokenIds,\\n        uint256[] calldata candyIds,\\n        uint256[] calldata candyAmounts\\n    ) public nonReentrant returns (bool) {\\n        require(\\n            tokenIds.length == candyIds.length * 2,\\n            \\\"Each runner needs one and only one candy\\\"\\n        );\\n\\n        safeMintBatch(_msgSender(), tokenIds);\\n\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                tokenIds,\\n                msg.sender,\\n                candyIds,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n        for (uint256 i = 0; i < candyIds.length; i++) {\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i * 2);\\n            // ownerOf uses a simple mapping in OZ's ERC721 so should be cheap\\n            require(\\n                chainRunners.ownerOf(tokenId) == _msgSender(),\\n                \\\"You cannot give candies to a runner that you do not own\\\"\\n            );\\n            require(\\n                candyAmounts[i] == 1,\\n                \\\"Your runner needs one and only one candy, who knows what could happen otherwise\\\"\\n            );\\n            dreamersCandies[tokenId] =\\n                (uint8(candies[i % 32]) & candyMask) +\\n                (uint8(candyIds[i]) % 4);\\n            if (i % 32 == 31) {\\n                candies = keccak256(abi.encodePacked(candies));\\n            }\\n        }\\n\\n        candyShop.burnBatch(_msgSender(), candyIds, candyAmounts);\\n        return true;\\n    }\\n\\n    function mintBatchPublicSale(bytes calldata tokenIds)\\n        public\\n        payable\\n        nonReentrant\\n        whenPublicSaleActive\\n        returns (bool)\\n    {\\n        require(\\n            (tokenIds.length / 2) * MINT_PUBLIC_PRICE == msg.value,\\n            \\\"You have to pay the bail bond\\\"\\n        );\\n        require(\\n            ERC721.balanceOf(_msgSender()) + tokenIds.length / 2 <=\\n                maxDreamersMintPublicSale,\\n            \\\"Your home is to small to welcome so many dreamers\\\"\\n        );\\n        safeMintBatch(_msgSender(), tokenIds);\\n\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                tokenIds,\\n                msg.sender,\\n                msg.value,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n        for (uint256 i = 0; i < tokenIds.length; i += 2) {\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i);\\n            dreamersCandies[tokenId] = uint8(candies[i / 2]);\\n        }\\n\\n        return true;\\n    }\\n\\n    function mintBatchFounders(bytes calldata tokenIds)\\n        public\\n        nonReentrant\\n        onlyOwner\\n        whenPublicSaleActive\\n        returns (bool)\\n    {\\n        require(!foundersMinted, \\\"Don't be too greedy\\\");\\n        require(\\n            tokenIds.length <= MAX_MINT_FOUNDERS * 2,\\n            \\\"Even if you are a founder, you don't deserve that many Dreamers\\\"\\n        );\\n        safeMintBatch(_msgSender(), tokenIds);\\n\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                tokenIds,\\n                msg.sender,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n        for (uint256 i = 0; i < tokenIds.length / 2; i++) {\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i * 2);\\n            dreamersCandies[tokenId] = uint8(candies[i % 32]);\\n            if (i % 32 == 31) {\\n                candies = keccak256(abi.encodePacked(candies));\\n            }\\n        }\\n        foundersMinted = true;\\n        return true;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(uint16(_tokenId)),\\n            \\\"ERC721: URI query for nonexistent token\\\"\\n        );\\n\\n        if (renderingContractAddress == address(0)) {\\n            return \\\"\\\";\\n        }\\n\\n        return renderer.tokenURI(_tokenId, dreamersCandies[_tokenId]);\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = _msgSender().call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9eccc0aa229e3e5d351ff90b7b30345f69c4635695170f4e67aa295ff2ea6de4\",\"license\":\"MIT\"},\"contracts/interfaces/ICandyShop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICandyShop {\\n    function burnBatch(\\n        address from,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5149dbb72dc6f0f71424aac31612102da5860753e8e1d973aabe6e448aa2baa6\",\"license\":\"MIT\"},\"contracts/interfaces/IChainRunners.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IChainRunners {\\n    function getDna(uint256 _tokenId) external view returns (uint256);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x2ba2de325b98dfe751091f49497b5cc7c9bfb0d3d0f337b3990dda2cc86d3cef\",\"license\":\"MIT\"},\"contracts/interfaces/IDreamersRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IDreamersRenderer {\\n    function tokenURI(uint256 tokenId, uint8 candy)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x391be7de798d2fb8c8c6dcb46a565d5a02ac7c7c3d1f6c051e112de908ce57f2\",\"license\":\"MIT\"},\"contracts/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token optimized for batch minting\\n * @notice a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data\\n *      We use the uint16 / bytes2 tokenId\\n */\\nabstract contract ERC721 is IERC721, IERC721Metadata, Context, ERC165 {\\n    using Address for address;\\n\\n    // Mapping from address to tokenIds. This is the single source of truth for the data\\n    mapping(address => bytes) internal _tokensByOwner;\\n\\n    // Because mapping in solidity are not real hash tables, one needs to keep track of the keys.\\n    // One address is 20 bytes\\n    bytes internal owners;\\n\\n    // Number of tokens\\n    uint16 public constant MAX_NUMBER_OF_TOKENS = 10_000;\\n\\n    // Bool array to store if the token is minted. To save on gas for token lookup in _tokensByOwner.\\n    bool[MAX_NUMBER_OF_TOKENS] internal tokenExists;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint16 => address) internal _tokenApprovals;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev There are two bytes per tokenId\\n     * @param owner address The address we retrieve the balance for\\n     * @return uint256 The number of tokens owned by the address\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return _tokensByOwner[owner].length / 2;\\n    }\\n\\n    function _balanceOf(uint256 ownerIndex) internal view returns (uint256) {\\n        require(ownerIndex < owners.length, \\\"ERC721: ownerIndex out of bound\\\");\\n        return balanceOf(BytesLib.toAddress(owners, ownerIndex));\\n    }\\n\\n    /// @dev Returns the index of owner in the internal array of owners. Revert if not found.\\n    /// @param owner address The address we retrieve the index for\\n    function getOwnerIndex(address owner) public view returns (uint256) {\\n        uint256 index = 0;\\n        while (index < owners.length) {\\n            if (BytesLib.toAddress(owners, index) == owner) {\\n                return index / 20;\\n            }\\n            index += 20;\\n        }\\n        revert(\\\"ERC721: Owner not found\\\");\\n    }\\n\\n    /// @dev Returns the array of bool telling if a token exists or not.\\n    function getTokenExists()\\n        external\\n        view\\n        returns (bool[MAX_NUMBER_OF_TOKENS] memory)\\n    {\\n        return tokenExists;\\n    }\\n\\n    /**\\n     * @param tokenId uint16 A given token id\\n     * @return bool True if the token exists, false otherwise\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenExists[tokenId];\\n    }\\n\\n    /**\\n     * @dev This is copied from OpenZeppelin's implementation\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev This is the core unsafe implementation of a transfer.\\n    /// @param from address The address which you want to transfer the token from\\n    /// @param fromIndex uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\\n    /// @param to address The address which you want to transfer the token to\\n    /// @param tokenIndex uint256 The index of the token to transfer in the from's token list.\\n    function _transfer(\\n        address from,\\n        uint256 fromIndex,\\n        address to,\\n        uint256 tokenIndex\\n    ) private {\\n        require(\\n            BytesLib.toAddress(owners, fromIndex * 20) == from,\\n            \\\"ERC721: transfer from address is invalid\\\"\\n        );\\n        if (_tokensByOwner[to].length == 0) {\\n            owners = bytes.concat(owners, bytes20(to));\\n        }\\n        bytes memory tokenId = BytesLib.slice(\\n            _tokensByOwner[from],\\n            tokenIndex,\\n            tokenIndex + 2\\n        );\\n        if (_tokensByOwner[from].length == 2) {\\n            owners = bytes.concat(\\n                BytesLib.slice(owners, 0, fromIndex * 20),\\n                BytesLib.slice(\\n                    owners,\\n                    (fromIndex + 1) * 20,\\n                    owners.length - (fromIndex + 1) * 20\\n                )\\n            );\\n            delete _tokensByOwner[from];\\n        } else {\\n            _tokensByOwner[from] = bytes.concat(\\n                BytesLib.slice(_tokensByOwner[from], 0, tokenIndex),\\n                BytesLib.slice(\\n                    _tokensByOwner[from],\\n                    tokenIndex + 2,\\n                    _tokensByOwner[from].length - tokenIndex - 2\\n                )\\n            );\\n        }\\n        _tokensByOwner[to] = bytes.concat(_tokensByOwner[to], tokenId);\\n        emit Transfer(from, to, BytesLib.toUint16(tokenId, 0));\\n    }\\n\\n    /// @dev Transfer token with minimal computing since all the required data to check is given\\n    /// @param from address The address which you want to transfer the token from\\n    /// @param fromIndex uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\\n    /// @param to address The address which you want to transfer the token to\\n    /// @param tokenIndex uint256 The index of the token to transfer in the from's token list.\\n    function safeTransferFrom(\\n        address from,\\n        uint256 fromIndex,\\n        address to,\\n        uint256 tokenIndex\\n    ) external {\\n        require(from != address(0), \\\"ERC721: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721: to cannot be the zero address\\\");\\n        require(\\n            tokenIndex < _tokensByOwner[from].length / 2,\\n            \\\"ERC721: token index out of range\\\"\\n        );\\n        uint16 tokenId = BytesLib.toUint16(\\n            _tokensByOwner[from],\\n            tokenIndex * 2\\n        );\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        _checkOnERC721Received(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev This is the core unsafe implementation of a mint.\\n     * @param to address The receiver of the tokens\\n     * @param tokenIds bytes The token ids to mint\\n     */\\n    function _mintBatch(address to, bytes calldata tokenIds) private {\\n        require(tokenIds.length > 0, \\\"ERC721: cannot mint with no token Ids\\\");\\n        require(\\n            tokenIds.length % 2 == 0,\\n            \\\"ERC721: tokenIds should be bytes of uint16\\\"\\n        );\\n        if (_tokensByOwner[to].length == 0) {\\n            owners = bytes.concat(owners, bytes20(to));\\n        }\\n        for (uint256 i = 0; i < tokenIds.length; i += 2) {\\n            require(\\n                !tokenExists[BytesLib.toUint16(tokenIds, i)],\\n                \\\"ERC721: token already exists\\\"\\n            );\\n            tokenExists[BytesLib.toUint16(tokenIds, i)] = true;\\n            emit Transfer(address(0), to, BytesLib.toUint16(tokenIds, i));\\n        }\\n        _tokensByOwner[to] = bytes.concat(_tokensByOwner[to], tokenIds);\\n    }\\n\\n    /// @dev Add a batch of token Ids given as a bytes array to the sender\\n    /// @param to address minting token to this address\\n    /// @param tokenIds bytes a bytes of tokenIds as bytes2 (uint16)\\n    function safeMintBatch(address to, bytes calldata tokenIds)\\n        internal\\n        virtual\\n    {\\n        _mintBatch(to, tokenIds);\\n        _checkOnERC721Received(\\n            address(0),\\n            to,\\n            BytesLib.toUint16(tokenIds, 0),\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /// @dev Approve \\\"to\\\" to manage token Id\\n    /// @param to address The address which will manage the token Id\\n    /// @param tokenId uint256 The token Id to manage\\n    /// @param tokenIndex uint256 The index of the token in the owner's list\\n    function approve(\\n        address to,\\n        uint256 tokenId,\\n        uint256 tokenIndex\\n    ) external {\\n        if (_tokenApprovals[uint16(tokenId)] != _msgSender()) {\\n            // if sender is not approved, they need to be the owner\\n            require(\\n                tokenIndex * 2 < _tokensByOwner[_msgSender()].length,\\n                \\\"ERC721: token index out of range\\\"\\n            );\\n            require(\\n                BytesLib.toUint16(\\n                    _tokensByOwner[_msgSender()],\\n                    tokenIndex * 2\\n                ) == tokenId,\\n                \\\"ERC721: caller is neither approved nor owner\\\"\\n            );\\n            emit Approval(_msgSender(), to, tokenId);\\n        }\\n        _tokenApprovals[uint16(tokenId)] = to;\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        require(_exists(tokenId), \\\"ERC721: token does not exist\\\");\\n        return _tokenApprovals[uint16(tokenId)];\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     * @param operator The address of the operator to add or remove.\\n     * @param _approved Whether to add or remove `operator` as an operator.\\n     */\\n    function setApprovalForAll(address operator, bool _approved)\\n        external\\n        override\\n    {\\n        require(\\n            operator != _msgSender(),\\n            \\\"ERC721: cannot approve caller as operator\\\"\\n        );\\n        bytes memory tokens = _tokensByOwner[_msgSender()];\\n        for (uint256 i = 0; i < tokens.length; i += 2) {\\n            _tokenApprovals[BytesLib.toUint16(tokens, i)] = _approved\\n                ? operator\\n                : address(0);\\n        }\\n\\n        emit ApprovalForAll(_msgSender(), operator, _approved);\\n    }\\n\\n    /**\\n     * @dev Returns whether `operator` is an approved operator for the caller.\\n     * @param owner The address of the owner to check.\\n     * @param operator The address of the operator to check.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        bytes memory tokens = _tokensByOwner[owner];\\n        for (uint256 i = 0; i < tokens.length; i += 2) {\\n            if (_tokenApprovals[BytesLib.toUint16(tokens, i)] != operator) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev Copied from OpenZeppelin ERC721.sol\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////////\\n    // Functions that should not be used but here for compatibility with ERC721\\n    // These are gassy.\\n    ///////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        require(from != address(0), \\\"ERC721: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721: to cannot be the zero address\\\");\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        uint256 tokenIndex = 0;\\n        while (\\n            BytesLib.toUint16(_tokensByOwner[from], tokenIndex) != tokenId &&\\n            tokenIndex < _tokensByOwner[from].length\\n        ) {\\n            tokenIndex += 2;\\n        }\\n        require(\\n            tokenIndex < _tokensByOwner[from].length,\\n            \\\"ERC721: from does not own the token\\\"\\n        );\\n\\n        uint256 fromIndex;\\n        for (fromIndex = 0; fromIndex < owners.length; fromIndex += 20) {\\n            if (BytesLib.toAddress(owners, fromIndex) == from) {\\n                break;\\n            }\\n        }\\n        require(\\n            BytesLib.toAddress(owners, fromIndex) == from,\\n            \\\"ERC721: from is not in owners list\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override {\\n        _safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external override {\\n        _safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override {\\n        require(from != address(0), \\\"ERC721: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721: to cannot be the zero address\\\");\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        uint256 tokenIndex = 0;\\n        while (\\n            BytesLib.toUint16(_tokensByOwner[from], tokenIndex) != tokenId &&\\n            tokenIndex < _tokensByOwner[from].length\\n        ) {\\n            tokenIndex += 2;\\n        }\\n        require(\\n            tokenIndex < _tokensByOwner[from].length,\\n            \\\"ERC721: from does not own the token\\\"\\n        );\\n\\n        uint256 fromIndex;\\n        for (fromIndex = 0; fromIndex < owners.length; fromIndex += 20) {\\n            if (BytesLib.toAddress(owners, fromIndex) == from) {\\n                break;\\n            }\\n        }\\n        require(\\n            BytesLib.toAddress(owners, fromIndex) == from,\\n            \\\"ERC721: from is not in owners list\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n    }\\n\\n    /**\\n     * @dev For each owner, we go through all their tokens and check if the sought token is in the list. This lookup\\n     *      is gassy but we do not expect to pay them often as we provide other mean of doing the transfers.\\n     * @param tokenId uint16 A given token id\\n     * @return address The owner of the token, might be 0x0 if not found\\n     */\\n    function _ownerOf(uint256 tokenId) private view returns (address) {\\n        address owner = address(0);\\n        for (uint256 i = 0; i < owners.length; i += 20) {\\n            address currentOwner = BytesLib.toAddress(owners, i);\\n            for (\\n                uint256 j = 0;\\n                j < _tokensByOwner[currentOwner].length;\\n                j += 2\\n            ) {\\n                if (\\n                    BytesLib.toUint16(_tokensByOwner[currentOwner], j) ==\\n                    tokenId\\n                ) {\\n                    owner = currentOwner;\\n                    break;\\n                }\\n            }\\n            if (owner != address(0)) {\\n                break;\\n            }\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good\\n     *      reason to call this function on chain.\\n     * @param tokenId uint265 A given token id\\n     * @return address The owner of the token.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: owner query for nonexistent token\\\");\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external override {\\n        address owner = _ownerOf(tokenId);\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: approve query for nonexistent token\\\"\\n        );\\n        require(\\n            _tokenApprovals[uint16(tokenId)] == _msgSender() ||\\n                owner == _msgSender(),\\n            \\\"ERC721: caller is not the owner nor an approved operator for the token\\\"\\n        );\\n        _tokenApprovals[uint16(tokenId)] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xa918a580b584c94ab473c883963a377ec97fa2697c77f45cd3e5b77898c1ea88\",\"license\":\"MIT\"},\"contracts/tokens/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC721} from \\\"./ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token optimized for batch minting with enumerable interface\\n * @notice a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data\\n *      We use the uint16 / bytes2 tokenId\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    function totalSupply() external view override returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < owners.length; i += 20) {\\n            total += _balanceOf(i);\\n        }\\n        return total;\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        override\\n        returns (uint256 tokenId)\\n    {\\n        require(\\n            index * 2 < _tokensByOwner[owner].length,\\n            \\\"ERC721Enumerable: index out of range\\\"\\n        );\\n        return BytesLib.toUint16(_tokensByOwner[owner], index * 2);\\n    }\\n\\n    function tokenByIndex(uint256 index)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 ownerIndex = 0;\\n        uint256 count;\\n        while (count <= index) {\\n            count += _balanceOf(ownerIndex);\\n            ownerIndex += 20;\\n        }\\n        ownerIndex -= 20;\\n        count -= _balanceOf(ownerIndex);\\n        return\\n            BytesLib.toUint16(\\n                _tokensByOwner[BytesLib.toAddress(owners, ownerIndex)],\\n                (index - count) * 2\\n            );\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC721)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xb7d84da5beaff9ce02a65b9f46dd0ea7d5d77462aec310e58ed79788f434cb87\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6080604052610280805460ff60a01b1916600160a01b179055610283805460ff191690553480156200003057600080fd5b5060405162005677380380620056778339810160408190526200005391620002e9565b8151829082906200006d9061013c90602085019062000106565b508051620000849061013d90602084019062000106565b505050620000a16200009b620000af60201b60201c565b620000b3565b5050600161013f55620003ac565b3390565b61013e80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805462000114906200037b565b90600052602060002090601f01602090048101928262000138576000855562000183565b82601f106200015357805160ff191683800117855562000183565b8280016001018555821562000183579182015b828111156200018357825182559160200191906001019062000166565b506200019192915062000195565b5090565b5b8082111562000191576000815560010162000196565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b0381118282101715620001ea57620001ea620001ac565b6040525050565b6000620001fd60405190565b90506200020b8282620001c2565b919050565b60006001600160401b038211156200022c576200022c620001ac565b601f19601f83011660200192915050565b60005b838110156200025a57818101518382015260200162000240565b838111156200026a576000848401525b50505050565b600062000287620002818462000210565b620001f1565b905082815260208101848484011115620002a457620002a4600080fd5b620002b18482856200023d565b509392505050565b600082601f830112620002cf57620002cf600080fd5b8151620002e184826020860162000270565b949350505050565b60008060408385031215620003015762000301600080fd5b82516001600160401b038111156200031c576200031c600080fd5b6200032a85828601620002b9565b602085015190935090506001600160401b038111156200034d576200034d600080fd5b6200035b85828601620002b9565b9150509250929050565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200039057607f821691505b60208210811415620003a657620003a662000365565b50919050565b6152bb80620003bc6000396000f3fe60806040526004361061032d5760003560e01c806370a08231116101a5578063b776c8a6116100ec578063d7822c9911610095578063f2fde38b1161006f578063f2fde38b146108ec578063f4b994241461090c578063f73c814b1461091f578063fac913231461093f57600080fd5b8063d7822c991461089a578063e985e9c5146108b1578063f0658ac9146108d157600080fd5b8063c87b56dd116100c6578063c87b56dd1461083a578063cb95f0691461085a578063d3d6005b1461087a57600080fd5b8063b776c8a6146107d9578063b88d4fde146107f9578063c074f4121461081957600080fd5b806395d89b411161014e578063a22cb46511610128578063a22cb46514610778578063a8e90b5714610798578063b5fcb339146107b957600080fd5b806395d89b41146107265780639913fc631461073b5780639c51792a1461075d57600080fd5b806389c8af831161017f57806389c8af83146106c75780638da5cb5b146106e75780639343eaa61461070657600080fd5b806370a0823114610671578063715018a6146106915780638392d804146106a657600080fd5b806323b872dd1161027457806342842e0e1161021d578063511ed382116101f7578063511ed382146105ec578063633574db1461060d5780636352211e1461063a5780636b318e6e1461065a57600080fd5b806342842e0e1461058c5780634f6ccce7146105ac578063511a9605146105cc57600080fd5b806333c12e171161024e57806333c12e17146105425780633ccfd60b14610557578063426a84931461056c57600080fd5b806323b872dd146104e257806325174f0e146105025780632f745c591461052257600080fd5b80630d77c756116102d65780631a6949e3116102b05780631a6949e3146104985780631e8858fb146104ad57806322afee07146104cd57600080fd5b80630d77c7561461043657806312b40a9f1461045657806318160ddd1461047657600080fd5b806306fdde031161030757806306fdde03146103c5578063081812fc146103e7578063095ea7b31461041457600080fd5b806301ffc9a7146103395780630216e3041461036f578063026ae1021461039257600080fd5b3661033457005b600080fd5b34801561034557600080fd5b506103596103543660046138e0565b610960565b604051610366919061390b565b60405180910390f35b34801561037b57600080fd5b5061038561271081565b6040516103669190613923565b34801561039e57600080fd5b50610280546103599074010000000000000000000000000000000000000000900460ff1681565b3480156103d157600080fd5b506103da6109bc565b604051610366919061398f565b3480156103f357600080fd5b506104076104023660046139b1565b610a4f565b60405161036691906139ec565b34801561042057600080fd5b5061043461042f366004613a0e565b610aa0565b005b34801561044257600080fd5b506104346104513660046139b1565b610b91565b34801561046257600080fd5b50610434610471366004613a4b565b610bc2565b34801561048257600080fd5b5061048b610c28565b6040516103669190613a72565b3480156104a457600080fd5b50610359610c70565b3480156104b957600080fd5b506104346104c8366004613a4b565b610c8b565b3480156104d957600080fd5b5061048b603281565b3480156104ee57600080fd5b506104346104fd366004613a80565b610ce6565b34801561050e57600080fd5b5061048b61051d366004613a4b565b610fc7565b34801561052e57600080fd5b5061048b61053d366004613a0e565b611046565b34801561054e57600080fd5b50610434611156565b34801561056357600080fd5b506104346111cf565b34801561057857600080fd5b50610434610587366004613ad0565b611265565b34801561059857600080fd5b506104346105a7366004613a80565b611388565b3480156105b857600080fd5b5061048b6105c73660046139b1565b6113a8565b3480156105d857600080fd5b506104346105e73660046139b1565b611563565b3480156105f857600080fd5b5061027f54610407906001600160a01b031681565b34801561061957600080fd5b5061062d6106283660046139b1565b611594565b6040516103669190613b0e565b34801561064657600080fd5b506104076106553660046139b1565b6115c0565b34801561066657600080fd5b5061048b6102825481565b34801561067d57600080fd5b5061048b61068c366004613a4b565b6115f0565b34801561069d57600080fd5b50610434611622565b3480156106b257600080fd5b5061014254610407906001600160a01b031681565b3480156106d357600080fd5b506104346106e2366004613b1c565b611659565b3480156106f357600080fd5b5061013e546001600160a01b0316610407565b34801561071257600080fd5b50610359610721366004613bd2565b61177c565b34801561073257600080fd5b506103da6119ae565b34801561074757600080fd5b506107506119be565b6040516103669190613c5d565b34801561076957600080fd5b5061048b66b1a2bc2ec5000081565b34801561078457600080fd5b50610434610793366004613c80565b611a1b565b3480156107a457600080fd5b5061028054610407906001600160a01b031681565b3480156107c557600080fd5b506104346107d4366004613a4b565b611ba9565b3480156107e557600080fd5b506104346107f4366004613a4b565b611c0f565b34801561080557600080fd5b50610434610814366004613dae565b611c6a565b34801561082557600080fd5b5061014054610407906001600160a01b031681565b34801561084657600080fd5b506103da6108553660046139b1565b611c7c565b34801561086657600080fd5b50610359610875366004613e6c565b611d7b565b34801561088657600080fd5b50610434610895366004613a4b565b6120c0565b3480156108a657600080fd5b5061048b6102845481565b3480156108bd57600080fd5b506103596108cc366004613f19565b612126565b3480156108dd57600080fd5b50610283546103599060ff1681565b3480156108f857600080fd5b50610434610907366004613a4b565b612258565b61035961091a366004613bd2565b6122b2565b34801561092b57600080fd5b5061043461093a366004613a4b565b612488565b34801561094b57600080fd5b5061014154610407906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806109b657506109b6826124dd565b92915050565b606061013c80546109cc90613f62565b80601f01602080910402602001604051908101604052809291908181526020018280546109f890613f62565b8015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b5050505050905090565b6000610a5a826125c0565b610a7f5760405162461bcd60e51b8152600401610a7690613fbb565b60405180910390fd5b5061ffff16600090815261013b60205260409020546001600160a01b031690565b6000610aab826125f2565b90506001600160a01b038116610ad35760405162461bcd60e51b8152600401610a7690614025565b61ffff8216600090815261013b60205260409020546001600160a01b0316331480610b0657506001600160a01b03811633145b610b225760405162461bcd60e51b8152600401610a76906140b5565b61ffff8216600090815261013b6020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61013e546001600160a01b03163314610bbc5760405162461bcd60e51b8152600401610a76906140f5565b61028255565b61013e546001600160a01b03163314610bed5760405162461bcd60e51b8152600401610a76906140f5565b61014080546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101438054909216179055565b600080805b60018054610c3a90613f62565b9050811015610c6a57610c4c816126cd565b610c56908361411b565b9150610c6360148261411b565b9050610c2d565b50919050565b60006102845442118015610c8657506102845415155b905090565b61013e546001600160a01b03163314610cb65760405162461bcd60e51b8152600401610a76906140f5565b610280805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038316610d0c5760405162461bcd60e51b8152600401610a769061418b565b6001600160a01b038216610d325760405162461bcd60e51b8152600401610a76906141f3565b610d3c3382612793565b610d585760405162461bcd60e51b8152600401610a769061425b565b60005b6001600160a01b038416600090815260208190526040902080548391610e0891610d8490613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054610db090613f62565b8015610dfd5780601f10610dd257610100808354040283529160200191610dfd565b820191906000526020600020905b815481529060010190602001808311610de057829003601f168201915b505050505083612818565b61ffff1614158015610e3d57506001600160a01b03841660009081526020819052604090208054610e3890613f62565b905081105b15610e5457610e4d60028261411b565b9050610d5b565b6001600160a01b03841660009081526020819052604090208054610e7790613f62565b90508110610e975760405162461bcd60e51b8152600401610a76906142c3565b60005b60018054610ea790613f62565b9050811015610f7457846001600160a01b0316610f4e60018054610eca90613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef690613f62565b8015610f435780601f10610f1857610100808354040283529160200191610f43565b820191906000526020600020905b815481529060010190602001808311610f2657829003601f168201915b50505050508361284e565b6001600160a01b03161415610f6257610f74565b610f6d60148261411b565b9050610e9a565b846001600160a01b0316610f8e60018054610eca90613f62565b6001600160a01b031614610fb45760405162461bcd60e51b8152600401610a769061432b565b610fc085828685612894565b5050505050565b6000805b60018054610fd890613f62565b905081101561102e57826001600160a01b0316610ffb60018054610eca90613f62565b6001600160a01b0316141561101c57611015601482614351565b9392505050565b61102760148261411b565b9050610fcb565b60405162461bcd60e51b8152600401610a7690614397565b6001600160a01b0382166000908152602081905260408120805461106990613f62565b90506110768360026143a7565b106110935760405162461bcd60e51b8152600401610a769061441e565b6001600160a01b0383166000908152602081905260409020805461114b91906110bb90613f62565b80601f01602080910402602001604051908101604052809291908181526020018280546110e790613f62565b80156111345780601f1061110957610100808354040283529160200191611134565b820191906000526020600020905b81548152906001019060200180831161111757829003601f168201915b505050505083600261114691906143a7565b612818565b61ffff169392505050565b61013e546001600160a01b031633146111815760405162461bcd60e51b8152600401610a76906140f5565b61028080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff8116740100000000000000000000000000000000000000009182900460ff1615909102179055565b61013e546001600160a01b031633146111fa5760405162461bcd60e51b8152600401610a76906140f5565b604051600090339047908381818185875af1925050503d806000811461123c576040519150601f19603f3d011682016040523d82523d6000602084013e611241565b606091505b50509050806112625760405162461bcd60e51b8152600401610a7690614460565b50565b61ffff8216600090815261013b60205260409020546001600160a01b031633146113475733600090815260208190526040902080546112a390613f62565b90506112b08260026143a7565b106112cd5760405162461bcd60e51b8152600401610a76906144a0565b336000908152602081905260409020805483916112ed916110bb90613f62565b61ffff161461130e5760405162461bcd60e51b8152600401610a7690614508565b60405182906001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590600090a45b5061ffff16600090815261013b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6113a383838360405180602001604052806000815250612f24565b505050565b600080805b8381116113db576113bd826126cd565b6113c7908261411b565b90506113d460148361411b565b91506113ad565b6113e6601483614518565b91506113f1826126cd565b6113fb9082614518565b90506115576000806114976001805461141390613f62565b80601f016020809104026020016040519081016040528092919081815260200182805461143f90613f62565b801561148c5780601f106114615761010080835404028352916020019161148c565b820191906000526020600020905b81548152906001019060200180831161146f57829003601f168201915b50505050508661284e565b6001600160a01b03166001600160a01b0316815260200190815260200160002080546114c290613f62565b80601f01602080910402602001604051908101604052809291908181526020018280546114ee90613f62565b801561153b5780601f106115105761010080835404028352916020019161153b565b820191906000526020600020905b81548152906001019060200180831161151e57829003601f168201915b5050505050828661154c9190614518565b6111469060026143a7565b61ffff16949350505050565b61013e546001600160a01b0316331461158e5760405162461bcd60e51b8152600401610a76906140f5565b61028455565b6101468161271081106115a657600080fd5b60209182820401919006915054906101000a900460ff1681565b60006115cb826125c0565b6115e75760405162461bcd60e51b8152600401610a7690614587565b6109b6826125f2565b6001600160a01b038116600090815260208190526040812080546002919061161790613f62565b6109b6929150614351565b61013e546001600160a01b0316331461164d5760405162461bcd60e51b8152600401610a76906140f5565b611657600061310b565b565b6001600160a01b03841661167f5760405162461bcd60e51b8152600401610a769061418b565b6001600160a01b0382166116a55760405162461bcd60e51b8152600401610a76906141f3565b6001600160a01b03841660009081526020819052604090208054600291906116cc90613f62565b6116d7929150614351565b81106116f55760405162461bcd60e51b8152600401610a76906144a0565b6001600160a01b0384166000908152602081905260408120805461171d91906110bb90613f62565b905061172d338261ffff16612793565b6117495760405162461bcd60e51b8152600401610a769061425b565b61175585858585612894565b61177485848361ffff166040518060200160405280600081525061316b565b505050505050565b6000600261013f5414156117a25760405162461bcd60e51b8152600401610a76906145c9565b600261013f5561013e546001600160a01b031633146117d35760405162461bcd60e51b8152600401610a76906140f5565b6117db610c70565b6117f75760405162461bcd60e51b8152600401610a769061460b565b6102835460ff161561181b5760405162461bcd60e51b8152600401610a769061464d565b611827603260026143a7565b8211156118465760405162461bcd60e51b8152600401610a76906146b5565b611852335b84846132c2565b6000838333424460405160200161186d9594939291906146fb565b60405160208183030381529060405280519060200120905060005b611893600285614351565b81101561198d5760006118e386868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111469250869150600290506143a7565b9050826118f1602084614738565b6020811061190157611901614750565b1a61014661ffff8316612710811061191b5761191b614750565b602091828204019190066101000a81548160ff021916908360ff1602179055506020826119489190614738565b601f141561197a57826040516020016119619190614766565b6040516020818303038152906040528051906020012092505b508061198581614778565b915050611888565b5050610283805460ff191660019081179091559050600161013f5592915050565b606061013d80546109cc90613f62565b6119c66137b6565b604080516204e2008101918290529060029061271090826000855b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116119e15790505050505050905090565b6001600160a01b038216331415611a445760405162461bcd60e51b8152600401610a76906147eb565b3360009081526020819052604081208054611a5e90613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8a90613f62565b8015611ad75780601f10611aac57610100808354040283529160200191611ad7565b820191906000526020600020905b815481529060010190602001808311611aba57829003601f168201915b5050505050905060005b8151811015611b585782611af6576000611af8565b835b61013b6000611b078585612818565b61ffff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611b5160028261411b565b9050611ae1565b506001600160a01b038316336001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3184604051611b9c919061390b565b60405180910390a3505050565b61013e546001600160a01b03163314611bd45760405162461bcd60e51b8152600401610a76906140f5565b61014180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101448054909216179055565b61013e546001600160a01b03163314611c3a5760405162461bcd60e51b8152600401610a76906140f5565b61027f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b611c7684848484612f24565b50505050565b6060611c8b8261ffff166125c0565b611ca75760405162461bcd60e51b8152600401610a7690614853565b610140546001600160a01b0316611ccc57505060408051602081019091526000815290565b610143546001600160a01b0316635cc518ba83610146816127108110611cf457611cf4614750565b602091828204019190069054906101000a900460ff166040518363ffffffff1660e01b8152600401611d27929190614863565b60006040518083038186803b158015611d3f57600080fd5b505afa158015611d53573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b691908101906148d6565b6000600261013f541415611da15760405162461bcd60e51b8152600401610a76906145c9565b600261013f819055611db49085906143a7565b8614611dd25760405162461bcd60e51b8152600401610a7690614969565b611ddd3388886132c2565b600087873388884244604051602001611dfc97969594939291906149c6565b60405160208183030381529060405280519060200120905060005b85811015612041576000611e688a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111469250869150600290506143a7565b610145546040517f6352211e00000000000000000000000000000000000000000000000000000000815291925033916001600160a01b0390911690636352211e90611eb7908590600401614a2b565b60206040518083038186803b158015611ecf57600080fd5b505afa158015611ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f079190614a44565b6001600160a01b031614611f2d5760405162461bcd60e51b8152600401610a7690614abd565b858583818110611f3f57611f3f614750565b90506020020135600114611f655760405162461bcd60e51b8152600401610a7690614b4b565b6004888884818110611f7957611f79614750565b90506020020135611f8a9190614b5b565b60fc84611f98602086614738565b60208110611fa857611fa8614750565b611fb6939291901a16614b68565b6101468261ffff166127108110611fcf57611fcf614750565b602091828204019190066101000a81548160ff021916908360ff160217905550602082611ffc9190614738565b601f141561202e57826040516020016120159190614766565b6040516020818303038152906040528051906020012092505b508061203981614778565b915050611e17565b50610144546001600160a01b0316636b20c45433888888886040518663ffffffff1660e01b8152600401612079959493929190614b95565b600060405180830381600087803b15801561209357600080fd5b505af11580156120a7573d6000803e3d6000fd5b505050506001915050600161013f559695505050505050565b61013e546001600160a01b031633146120eb5760405162461bcd60e51b8152600401610a76906140f5565b61014280546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101458054909216179055565b6102805460009074010000000000000000000000000000000000000000900460ff1661215d57612156838361332b565b90506109b6565b61027f546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c4552791906121a79086906004016139ec565b60206040518083038186803b1580156121bf57600080fd5b505afa1580156121d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f79190614bf5565b6001600160a01b0316826001600160a01b031614806122245750610280546001600160a01b038381169116145b8061224857506001600160a01b0382166000908152610281602052604090205460ff165b806110155750611015838361332b565b61013e546001600160a01b031633146122835760405162461bcd60e51b8152600401610a76906140f5565b6001600160a01b0381166122a95760405162461bcd60e51b8152600401610a7690614c6e565b6112628161310b565b6000600261013f5414156122d85760405162461bcd60e51b8152600401610a76906145c9565b600261013f556122e6610c70565b6123025760405162461bcd60e51b8152600401610a769061460b565b3466b1a2bc2ec50000612316600285614351565b61232091906143a7565b1461233d5760405162461bcd60e51b8152600401610a7690614cb0565b6102825461234c600284614351565b612355336115f0565b61235f919061411b565b111561237d5760405162461bcd60e51b8152600401610a7690614d18565b6123863361184b565b60008383333442446040516020016123a396959493929190614d28565b60405160208183030381529060405280519060200120905060005b8381101561247657600061240986868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250612818915050565b905082612417600284614351565b6020811061242757612427614750565b1a61014661ffff8316612710811061244157612441614750565b602091828204019190066101000a81548160ff021916908360ff1602179055505060028161246f919061411b565b90506123be565b506001915050600161013f5592915050565b61013e546001600160a01b031633146124b35760405162461bcd60e51b8152600401610a76906140f5565b6001600160a01b0316600090815261028160205260409020805460ff19811660ff90911615179055565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061257057507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806109b657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146109b6565b600060028261271081106125d6576125d6614750565b602081049091015460ff601f9092166101000a90041692915050565b600080805b6001805461260490613f62565b90508110156126c657600061261f60018054610eca90613f62565b905060005b6001600160a01b0382166000908152602081905260409020805461264790613f62565b905081101561269d576001600160a01b03821660009081526020819052604090208054879161267991610d8490613f62565b61ffff16141561268b5781935061269d565b61269660028261411b565b9050612624565b506001600160a01b038316156126b357506126c6565b506126bf60148261411b565b90506125f7565b5092915050565b6000600180546126dc90613f62565b905082106126fc5760405162461bcd60e51b8152600401610a7690614da5565b6109b661068c6001805461270f90613f62565b80601f016020809104026020016040519081016040528092919081815260200182805461273b90613f62565b80156127885780601f1061275d57610100808354040283529160200191612788565b820191906000526020600020905b81548152906001019060200180831161276b57829003601f168201915b50505050508461284e565b600061279e826125c0565b6127ba5760405162461bcd60e51b8152600401610a7690614e0d565b60006127c5836115c0565b9050806001600160a01b0316846001600160a01b031614806128005750836001600160a01b03166127f584610a4f565b6001600160a01b0316145b8061281057506128108185612126565b949350505050565b600061282582600261411b565b835110156128455760405162461bcd60e51b8152600401610a7690614e4f565b50016002015190565b600061285b82601461411b565b8351101561287b5760405162461bcd60e51b8152600401610a7690614e91565b5001602001516c01000000000000000000000000900490565b836001600160a01b031661293e600180546128ae90613f62565b80601f01602080910402602001604051908101604052809291908181526020018280546128da90613f62565b80156129275780601f106128fc57610100808354040283529160200191612927565b820191906000526020600020905b81548152906001019060200180831161290a57829003601f168201915b505050505085601461293991906143a7565b61284e565b6001600160a01b0316146129645760405162461bcd60e51b8152600401610a7690614ef9565b6001600160a01b0382166000908152602081905260409020805461298790613f62565b151590506129cc5760018260601b6040516020016129a6929190614f9f565b604051602081830303815290604052600190805190602001906129ca9291906137d7565b505b6001600160a01b03841660009081526020819052604081208054612a8591906129f490613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054612a2090613f62565b8015612a6d5780601f10612a4257610100808354040283529160200191612a6d565b820191906000526020600020905b815481529060010190602001808311612a5057829003601f168201915b505050505083846002612a80919061411b565b613436565b6001600160a01b0386166000908152602081905260409020805491925090612aac90613f62565b905060021415612c8357612b5360018054612ac690613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054612af290613f62565b8015612b3f5780601f10612b1457610100808354040283529160200191612b3f565b820191906000526020600020905b815481529060010190602001808311612b2257829003601f168201915b50505050506000866014612a8091906143a7565b612c2760018054612b6390613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054612b8f90613f62565b8015612bdc5780601f10612bb157610100808354040283529160200191612bdc565b820191906000526020600020905b815481529060010190602001808311612bbf57829003601f168201915b5050505050866001612bee919061411b565b612bf99060146143a7565b612c0488600161411b565b612c0f9060146143a7565b60018054612c1c90613f62565b612a80929150614518565b604051602001612c38929190614fe0565b60405160208183030381529060405260019080519060200190612c5c9291906137d7565b506001600160a01b0385166000908152602081905260408120612c7e9161385b565b612e6c565b6001600160a01b03851660009081526020819052604090208054612d319190612cab90613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054612cd790613f62565b8015612d245780601f10612cf957610100808354040283529160200191612d24565b820191906000526020600020905b815481529060010190602001808311612d0757829003601f168201915b5050505050600084613436565b6001600160a01b03861660009081526020819052604090208054612e219190612d5990613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054612d8590613f62565b8015612dd25780601f10612da757610100808354040283529160200191612dd2565b820191906000526020600020905b815481529060010190602001808311612db557829003601f168201915b5050505050846002612de4919061411b565b6001600160a01b038916600090815260208190526040902080546002918891612e0c90613f62565b612e17929150614518565b612a809190614518565b604051602001612e32929190614fe0565b60408051601f198184030181529181526001600160a01b038716600090815260208181529190208251612e6a939192909101906137d7565b505b6001600160a01b038316600090815260208181526040918290209151612e959291849101614ff6565b60408051601f198184030181529181526001600160a01b038516600090815260208181529190208251612ecd939192909101906137d7565b50612ed9816000612818565b61ffff16836001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b6001600160a01b038416612f4a5760405162461bcd60e51b8152600401610a769061418b565b6001600160a01b038316612f705760405162461bcd60e51b8152600401610a76906141f3565b612f7a3383612793565b612f965760405162461bcd60e51b8152600401610a769061425b565b60005b6001600160a01b038516600090815260208190526040902080548491612fc291610d8490613f62565b61ffff1614158015612ff757506001600160a01b03851660009081526020819052604090208054612ff290613f62565b905081105b1561300e5761300760028261411b565b9050612f99565b6001600160a01b0385166000908152602081905260409020805461303190613f62565b905081106130515760405162461bcd60e51b8152600401610a76906142c3565b60005b6001805461306190613f62565b90508110156130aa57856001600160a01b031661308460018054610eca90613f62565b6001600160a01b03161415613098576130aa565b6130a360148261411b565b9050613054565b856001600160a01b03166130c460018054610eca90613f62565b6001600160a01b0316146130ea5760405162461bcd60e51b8152600401610a769061432b565b6130f686828785612894565b6131028686868661316b565b50505050505050565b61013e80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b156132b7576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906131c8903390899088908890600401615000565b602060405180830381600087803b1580156131e257600080fd5b505af1925050508015613212575060408051601f3d908101601f1916820190925261320f9181019061504f565b60015b61326c573d808015613240576040519150601f19603f3d011682016040523d82523d6000602084013e613245565b606091505b5080516132645760405162461bcd60e51b8152600401610a76906150c8565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612810565b506001949350505050565b6132cd8383836134fe565b611c7660008461331285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250612818915050565b61ffff166040518060200160405280600081525061316b565b6001600160a01b0382166000908152602081905260408120805482919061335190613f62565b80601f016020809104026020016040519081016040528092919081815260200182805461337d90613f62565b80156133ca5780601f1061339f576101008083540402835291602001916133ca565b820191906000526020600020905b8154815290600101906020018083116133ad57829003601f168201915b5050505050905060005b81518110156132b757836001600160a01b031661013b60006133f68585612818565b61ffff1681526020810191909152604001600020546001600160a01b031614613424576000925050506109b6565b61342f60028261411b565b90506133d4565b60608161344481601f61411b565b10156134625760405162461bcd60e51b8152600401610a769061510a565b61346c828461411b565b8451101561348c5760405162461bcd60e51b8152600401610a769061514c565b6060821580156134ab57604051915060008252602082016040526134f5565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156134e45780518352602092830192016134cc565b5050858452601f01601f1916604052505b50949350505050565b8061351b5760405162461bcd60e51b8152600401610a76906151b4565b613526600282614738565b156135435760405162461bcd60e51b8152600401610a769061521c565b6001600160a01b0383166000908152602081905260409020805461356690613f62565b151590506135ab5760018360601b604051602001613585929190614f9f565b604051602081830303815290604052600190805190602001906135a99291906137d7565b505b60005b818110156137525760026135f984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250612818915050565b61ffff16612710811061360e5761360e614750565b602081049091015460ff601f9092166101000a900416156136415760405162461bcd60e51b8152600401610a769061525e565b6001600261368685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250612818915050565b61ffff16612710811061369b5761369b614750565b602091828204019190066101000a81548160ff0219169083151502179055506136fb83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250612818915050565b61ffff16846001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461374b60028261411b565b90506135ae565b506001600160a01b03831660009081526020818152604091829020915161377e9291859185910161526e565b60408051601f198184030181529181526001600160a01b038516600090815260208181529190208251611c76939192909101906137d7565b604051806204e2000160405280612710906020820280368337509192915050565b8280546137e390613f62565b90600052602060002090601f016020900481019282613805576000855561384b565b82601f1061381e57805160ff191683800117855561384b565b8280016001018555821561384b579182015b8281111561384b578251825591602001919060010190613830565b50613857929150613891565b5090565b50805461386790613f62565b6000825580601f10613877575050565b601f01602090049060005260206000209081019061126291905b5b808211156138575760008155600101613892565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b811461126257600080fd5b80356109b6816138a6565b6000602082840312156138f5576138f5600080fd5b600061281084846138d5565b8015155b82525050565b602081016109b68284613901565b61ffff8116613905565b602081016109b68284613919565b60005b8381101561394c578181015183820152602001613934565b83811115611c765750506000910152565b6000613967825190565b80845260208401935061397e818560208601613931565b601f01601f19169290920192915050565b60208082528101611015818461395d565b806138ca565b80356109b6816139a0565b6000602082840312156139c6576139c6600080fd5b600061281084846139a6565b60006001600160a01b0382166109b6565b613905816139d2565b602081016109b682846139e3565b6138ca816139d2565b80356109b6816139fa565b60008060408385031215613a2457613a24600080fd5b6000613a308585613a03565b9250506020613a41858286016139a6565b9150509250929050565b600060208284031215613a6057613a60600080fd5b60006128108484613a03565b80613905565b602081016109b68284613a6c565b600080600060608486031215613a9857613a98600080fd5b6000613aa48686613a03565b9350506020613ab586828701613a03565b9250506040613ac6868287016139a6565b9150509250925092565b600080600060608486031215613ae857613ae8600080fd5b6000613af48686613a03565b9350506020613ab5868287016139a6565b60ff8116613905565b602081016109b68284613b05565b60008060008060808587031215613b3557613b35600080fd5b6000613b418787613a03565b9450506020613b52878288016139a6565b9350506040613b6387828801613a03565b9250506060613b74878288016139a6565b91505092959194509250565b60008083601f840112613b9557613b95600080fd5b50813567ffffffffffffffff811115613bb057613bb0600080fd5b602083019150836001820283011115613bcb57613bcb600080fd5b9250929050565b60008060208385031215613be857613be8600080fd5b823567ffffffffffffffff811115613c0257613c02600080fd5b613c0e85828601613b80565b92509250509250929050565b613c248282613901565b5060200190565b60200190565b6127108160005b82811015610fc0578151613c4c8682613c1a565b955050602082019150600101613c38565b6204e20081016109b68284613c31565b8015156138ca565b80356109b681613c6d565b60008060408385031215613c9657613c96600080fd5b6000613ca28585613a03565b9250506020613a4185828601613c75565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715613cef57613cef613cb3565b6040525050565b6000613d0160405190565b9050613d0d8282613cc9565b919050565b600067ffffffffffffffff821115613d2c57613d2c613cb3565b601f19601f83011660200192915050565b82818337506000910152565b6000613d5c613d5784613d12565b613cf6565b905082815260208101848484011115613d7757613d77600080fd5b613d82848285613d3d565b509392505050565b600082601f830112613d9e57613d9e600080fd5b8135612810848260208601613d49565b60008060008060808587031215613dc757613dc7600080fd5b6000613dd38787613a03565b9450506020613de487828801613a03565b9350506040613df5878288016139a6565b925050606085013567ffffffffffffffff811115613e1557613e15600080fd5b613b7487828801613d8a565b60008083601f840112613e3657613e36600080fd5b50813567ffffffffffffffff811115613e5157613e51600080fd5b602083019150836020820283011115613bcb57613bcb600080fd5b60008060008060008060608789031215613e8857613e88600080fd5b863567ffffffffffffffff811115613ea257613ea2600080fd5b613eae89828a01613b80565b9650965050602087013567ffffffffffffffff811115613ed057613ed0600080fd5b613edc89828a01613e21565b9450945050604087013567ffffffffffffffff811115613efe57613efe600080fd5b613f0a89828a01613e21565b92509250509295509295509295565b60008060408385031215613f2f57613f2f600080fd5b6000613f3b8585613a03565b9250506020613a4185828601613a03565b634e487b7160e01b600052602260045260246000fd5b600281046001821680613f7657607f821691505b60208210811415610c6a57610c6a613f4c565b601c8152602081017f4552433732313a20746f6b656e20646f6573206e6f742065786973740000000081529050613c2b565b602080825281016109b681613f89565b602b8152602081017f4552433732313a20617070726f766520717565727920666f72206e6f6e65786981527f7374656e7420746f6b656e000000000000000000000000000000000000000000602082015290505b60400190565b602080825281016109b681613fcb565b60468152602081017f4552433732313a2063616c6c6572206973206e6f7420746865206f776e65722081527f6e6f7220616e20617070726f766564206f70657261746f7220666f722074686560208201527f20746f6b656e0000000000000000000000000000000000000000000000000000604082015290505b60600190565b602080825281016109b681614035565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152613c2b565b602080825281016109b6816140c5565b634e487b7160e01b600052601160045260246000fd5b6000821982111561412e5761412e614105565b500190565b60278152602081017f4552433732313a2066726f6d2063616e6e6f7420626520746865207a65726f2081527f61646472657373000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b681614133565b60258152602081017f4552433732313a20746f2063616e6e6f7420626520746865207a65726f20616481527f64726573730000000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b68161419b565b60318152602081017f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f81527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020820152905061401f565b602080825281016109b681614203565b60238152602081017f4552433732313a2066726f6d20646f6573206e6f74206f776e2074686520746f81527f6b656e00000000000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b68161426b565b60228152602081017f4552433732313a2066726f6d206973206e6f7420696e206f776e657273206c6981527f73740000000000000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b6816142d3565b634e487b7160e01b600052601260045260246000fd5b6000826143605761436061433b565b500490565b60178152602081017f4552433732313a204f776e6572206e6f7420666f756e6400000000000000000081529050613c2b565b602080825281016109b681614365565b60008160001904831182151516156143c1576143c1614105565b500290565b60248152602081017f455243373231456e756d657261626c653a20696e646578206f7574206f66207281527f616e6765000000000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b6816143c6565b60118152602081017f5769746864726177616c206661696c656400000000000000000000000000000081529050613c2b565b602080825281016109b68161442e565b60208082527f4552433732313a20746f6b656e20696e646578206f7574206f662072616e67659101908152613c2b565b602080825281016109b681614470565b602c8152602081017f4552433732313a2063616c6c6572206973206e65697468657220617070726f7681527f6564206e6f72206f776e657200000000000000000000000000000000000000006020820152905061401f565b602080825281016109b6816144b0565b60008282101561452a5761452a614105565b500390565b60298152602081017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481527f656e7420746f6b656e00000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b68161452f565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050613c2b565b602080825281016109b681614597565b60148152602081017f5075626c69632073616c65206e6f74206f70656e00000000000000000000000081529050613c2b565b602080825281016109b6816145d9565b60138152602081017f446f6e277420626520746f6f206772656564790000000000000000000000000081529050613c2b565b602080825281016109b68161461b565b603f8152602081017f4576656e20696620796f7520617265206120666f756e6465722c20796f75206481527f6f6e277420646573657276652074686174206d616e7920447265616d657273006020820152905061401f565b602080825281016109b68161465d565b61412e828483613d3d565b60006109b68260601b90565b60006109b6826146d0565b6139056146f3826139d2565b6146dc565b90565b6147068186886146c5565b905061471281856146e7565b60140161471f8184613a6c565b60200161472c8183613a6c565b60200195945050505050565b815b915060008261474b5761474b61433b565b500690565b634e487b7160e01b600052603260045260246000fd5b6147708183613a6c565b602001919050565b600060001982141561478c5761478c614105565b5060010190565b60298152602081017f4552433732313a2063616e6e6f7420617070726f76652063616c6c657220617381527f206f70657261746f7200000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b681614793565b60278152602081017f4552433732313a2055524920717565727920666f72206e6f6e6578697374656e81527f7420746f6b656e000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b6816147fb565b604081016148718285613a6c565b6110156020830184613b05565b600061488c613d5784613d12565b9050828152602081018484840111156148a7576148a7600080fd5b613d82848285613931565b600082601f8301126148c6576148c6600080fd5b815161281084826020860161487e565b6000602082840312156148eb576148eb600080fd5b815167ffffffffffffffff81111561490557614905600080fd5b612810848285016148b2565b60288152602081017f456163682072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e64790000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b681614911565b825b925060007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156149af576149af600080fd5b6020830292506149c0838584613d3d565b50500190565b6149d181888a6146c5565b90506149dd81876146e7565b6014016149eb818587614979565b90506149f78184613a6c565b602001614a048183613a6c565b602001979650505050505050565b60006109b66146f861ffff841681565b61390581614a12565b602081016109b68284614a22565b80516109b6816139fa565b600060208284031215614a5957614a59600080fd5b60006128108484614a39565b60378152602081017f596f752063616e6e6f7420676976652063616e6469657320746f20612072756e81527f6e6572207468617420796f7520646f206e6f74206f776e0000000000000000006020820152905061401f565b602080825281016109b681614a65565b604f8152602081017f596f75722072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e64792c2077686f206b6e6f7773207768617420636f756c64206860208201527f617070656e206f74686572776973650000000000000000000000000000000000604082015290506140af565b602080825281016109b681614acd565b60ff90811690821661473a565b60ff8116905060ff8216915060008260ff0382111561412e5761412e614105565b8183526020830161497b565b60608101614ba382886139e3565b8181036020830152614bb6818688614b89565b90508181036040830152614bcb818486614b89565b979650505050505050565b60006109b6826139d2565b6138ca81614bd6565b80516109b681614be1565b600060208284031215614c0a57614c0a600080fd5b60006128108484614bea565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f64647265737300000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b681614c16565b601d8152602081017f596f75206861766520746f2070617920746865206261696c20626f6e6400000081529050613c2b565b602080825281016109b681614c7e565b60318152602081017f596f757220686f6d6520697320746f20736d616c6c20746f2077656c636f6d6581527f20736f206d616e7920647265616d6572730000000000000000000000000000006020820152905061401f565b602080825281016109b681614cc0565b614d338187896146c5565b9050614d3f81866146e7565b601401614d4c8185613a6c565b602001614d598184613a6c565b602001614d668183613a6c565b6020019695505050505050565b601f8152602081017f4552433732313a206f776e6572496e646578206f7574206f6620626f756e640081529050613c2b565b602080825281016109b681614d73565b602c8152602081017f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881527f697374656e7420746f6b656e00000000000000000000000000000000000000006020820152905061401f565b602080825281016109b681614db5565b60148152602081017f746f55696e7431365f6f75744f66426f756e647300000000000000000000000081529050613c2b565b602080825281016109b681614e1d565b60158152602081017f746f416464726573735f6f75744f66426f756e6473000000000000000000000081529050613c2b565b602080825281016109b681614e5f565b60288152602081017f4552433732313a207472616e736665722066726f6d206164647265737320697381527f20696e76616c69640000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b681614ea1565b60008154614f1681613f62565b600182168015614f2d5760018114614f3e57614f6e565b60ff19831686528186019350614f6e565b60008581526020902060005b83811015614f6657815488820152600190910190602001614f4a565b505081860193505b50505092915050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116613905565b614fa98184614f09565b9050614fb58183614f77565b60140192915050565b6000614fc8825190565b614fd6818560208601613931565b9290920192915050565b614fea8184614fbe565b90506110158183614fbe565b614fea8184614f09565b6080810161500e82876139e3565b61501b60208301866139e3565b6150286040830185613a6c565b818103606083015261503a818461395d565b9695505050505050565b80516109b6816138a6565b60006020828403121561506457615064600080fd5b60006128108484615044565b60328152602081017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e74657200000000000000000000000000006020820152905061401f565b602080825281016109b681615070565b600e8152602081017f736c6963655f6f766572666c6f7700000000000000000000000000000000000081529050613c2b565b602080825281016109b6816150d8565b60118152602081017f736c6963655f6f75744f66426f756e647300000000000000000000000000000081529050613c2b565b602080825281016109b68161511a565b60258152602081017f4552433732313a2063616e6e6f74206d696e742077697468206e6f20746f6b6581527f6e204964730000000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b68161515c565b602a8152602081017f4552433732313a20746f6b656e4964732073686f756c6420626520627974657381527f206f662075696e743136000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b6816151c4565b601c8152602081017f4552433732313a20746f6b656e20616c7265616479206578697374730000000081529050613c2b565b602080825281016109b68161522c565b6152788185614f09565b90506128108183856146c556fea264697066735822122046587b314b050c95aee2c01fa6c16505ba58492e42a5f478d8f70aa704ed6ad964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061032d5760003560e01c806370a08231116101a5578063b776c8a6116100ec578063d7822c9911610095578063f2fde38b1161006f578063f2fde38b146108ec578063f4b994241461090c578063f73c814b1461091f578063fac913231461093f57600080fd5b8063d7822c991461089a578063e985e9c5146108b1578063f0658ac9146108d157600080fd5b8063c87b56dd116100c6578063c87b56dd1461083a578063cb95f0691461085a578063d3d6005b1461087a57600080fd5b8063b776c8a6146107d9578063b88d4fde146107f9578063c074f4121461081957600080fd5b806395d89b411161014e578063a22cb46511610128578063a22cb46514610778578063a8e90b5714610798578063b5fcb339146107b957600080fd5b806395d89b41146107265780639913fc631461073b5780639c51792a1461075d57600080fd5b806389c8af831161017f57806389c8af83146106c75780638da5cb5b146106e75780639343eaa61461070657600080fd5b806370a0823114610671578063715018a6146106915780638392d804146106a657600080fd5b806323b872dd1161027457806342842e0e1161021d578063511ed382116101f7578063511ed382146105ec578063633574db1461060d5780636352211e1461063a5780636b318e6e1461065a57600080fd5b806342842e0e1461058c5780634f6ccce7146105ac578063511a9605146105cc57600080fd5b806333c12e171161024e57806333c12e17146105425780633ccfd60b14610557578063426a84931461056c57600080fd5b806323b872dd146104e257806325174f0e146105025780632f745c591461052257600080fd5b80630d77c756116102d65780631a6949e3116102b05780631a6949e3146104985780631e8858fb146104ad57806322afee07146104cd57600080fd5b80630d77c7561461043657806312b40a9f1461045657806318160ddd1461047657600080fd5b806306fdde031161030757806306fdde03146103c5578063081812fc146103e7578063095ea7b31461041457600080fd5b806301ffc9a7146103395780630216e3041461036f578063026ae1021461039257600080fd5b3661033457005b600080fd5b34801561034557600080fd5b506103596103543660046138e0565b610960565b604051610366919061390b565b60405180910390f35b34801561037b57600080fd5b5061038561271081565b6040516103669190613923565b34801561039e57600080fd5b50610280546103599074010000000000000000000000000000000000000000900460ff1681565b3480156103d157600080fd5b506103da6109bc565b604051610366919061398f565b3480156103f357600080fd5b506104076104023660046139b1565b610a4f565b60405161036691906139ec565b34801561042057600080fd5b5061043461042f366004613a0e565b610aa0565b005b34801561044257600080fd5b506104346104513660046139b1565b610b91565b34801561046257600080fd5b50610434610471366004613a4b565b610bc2565b34801561048257600080fd5b5061048b610c28565b6040516103669190613a72565b3480156104a457600080fd5b50610359610c70565b3480156104b957600080fd5b506104346104c8366004613a4b565b610c8b565b3480156104d957600080fd5b5061048b603281565b3480156104ee57600080fd5b506104346104fd366004613a80565b610ce6565b34801561050e57600080fd5b5061048b61051d366004613a4b565b610fc7565b34801561052e57600080fd5b5061048b61053d366004613a0e565b611046565b34801561054e57600080fd5b50610434611156565b34801561056357600080fd5b506104346111cf565b34801561057857600080fd5b50610434610587366004613ad0565b611265565b34801561059857600080fd5b506104346105a7366004613a80565b611388565b3480156105b857600080fd5b5061048b6105c73660046139b1565b6113a8565b3480156105d857600080fd5b506104346105e73660046139b1565b611563565b3480156105f857600080fd5b5061027f54610407906001600160a01b031681565b34801561061957600080fd5b5061062d6106283660046139b1565b611594565b6040516103669190613b0e565b34801561064657600080fd5b506104076106553660046139b1565b6115c0565b34801561066657600080fd5b5061048b6102825481565b34801561067d57600080fd5b5061048b61068c366004613a4b565b6115f0565b34801561069d57600080fd5b50610434611622565b3480156106b257600080fd5b5061014254610407906001600160a01b031681565b3480156106d357600080fd5b506104346106e2366004613b1c565b611659565b3480156106f357600080fd5b5061013e546001600160a01b0316610407565b34801561071257600080fd5b50610359610721366004613bd2565b61177c565b34801561073257600080fd5b506103da6119ae565b34801561074757600080fd5b506107506119be565b6040516103669190613c5d565b34801561076957600080fd5b5061048b66b1a2bc2ec5000081565b34801561078457600080fd5b50610434610793366004613c80565b611a1b565b3480156107a457600080fd5b5061028054610407906001600160a01b031681565b3480156107c557600080fd5b506104346107d4366004613a4b565b611ba9565b3480156107e557600080fd5b506104346107f4366004613a4b565b611c0f565b34801561080557600080fd5b50610434610814366004613dae565b611c6a565b34801561082557600080fd5b5061014054610407906001600160a01b031681565b34801561084657600080fd5b506103da6108553660046139b1565b611c7c565b34801561086657600080fd5b50610359610875366004613e6c565b611d7b565b34801561088657600080fd5b50610434610895366004613a4b565b6120c0565b3480156108a657600080fd5b5061048b6102845481565b3480156108bd57600080fd5b506103596108cc366004613f19565b612126565b3480156108dd57600080fd5b50610283546103599060ff1681565b3480156108f857600080fd5b50610434610907366004613a4b565b612258565b61035961091a366004613bd2565b6122b2565b34801561092b57600080fd5b5061043461093a366004613a4b565b612488565b34801561094b57600080fd5b5061014154610407906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806109b657506109b6826124dd565b92915050565b606061013c80546109cc90613f62565b80601f01602080910402602001604051908101604052809291908181526020018280546109f890613f62565b8015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b5050505050905090565b6000610a5a826125c0565b610a7f5760405162461bcd60e51b8152600401610a7690613fbb565b60405180910390fd5b5061ffff16600090815261013b60205260409020546001600160a01b031690565b6000610aab826125f2565b90506001600160a01b038116610ad35760405162461bcd60e51b8152600401610a7690614025565b61ffff8216600090815261013b60205260409020546001600160a01b0316331480610b0657506001600160a01b03811633145b610b225760405162461bcd60e51b8152600401610a76906140b5565b61ffff8216600090815261013b6020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61013e546001600160a01b03163314610bbc5760405162461bcd60e51b8152600401610a76906140f5565b61028255565b61013e546001600160a01b03163314610bed5760405162461bcd60e51b8152600401610a76906140f5565b61014080546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101438054909216179055565b600080805b60018054610c3a90613f62565b9050811015610c6a57610c4c816126cd565b610c56908361411b565b9150610c6360148261411b565b9050610c2d565b50919050565b60006102845442118015610c8657506102845415155b905090565b61013e546001600160a01b03163314610cb65760405162461bcd60e51b8152600401610a76906140f5565b610280805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038316610d0c5760405162461bcd60e51b8152600401610a769061418b565b6001600160a01b038216610d325760405162461bcd60e51b8152600401610a76906141f3565b610d3c3382612793565b610d585760405162461bcd60e51b8152600401610a769061425b565b60005b6001600160a01b038416600090815260208190526040902080548391610e0891610d8490613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054610db090613f62565b8015610dfd5780601f10610dd257610100808354040283529160200191610dfd565b820191906000526020600020905b815481529060010190602001808311610de057829003601f168201915b505050505083612818565b61ffff1614158015610e3d57506001600160a01b03841660009081526020819052604090208054610e3890613f62565b905081105b15610e5457610e4d60028261411b565b9050610d5b565b6001600160a01b03841660009081526020819052604090208054610e7790613f62565b90508110610e975760405162461bcd60e51b8152600401610a76906142c3565b60005b60018054610ea790613f62565b9050811015610f7457846001600160a01b0316610f4e60018054610eca90613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef690613f62565b8015610f435780601f10610f1857610100808354040283529160200191610f43565b820191906000526020600020905b815481529060010190602001808311610f2657829003601f168201915b50505050508361284e565b6001600160a01b03161415610f6257610f74565b610f6d60148261411b565b9050610e9a565b846001600160a01b0316610f8e60018054610eca90613f62565b6001600160a01b031614610fb45760405162461bcd60e51b8152600401610a769061432b565b610fc085828685612894565b5050505050565b6000805b60018054610fd890613f62565b905081101561102e57826001600160a01b0316610ffb60018054610eca90613f62565b6001600160a01b0316141561101c57611015601482614351565b9392505050565b61102760148261411b565b9050610fcb565b60405162461bcd60e51b8152600401610a7690614397565b6001600160a01b0382166000908152602081905260408120805461106990613f62565b90506110768360026143a7565b106110935760405162461bcd60e51b8152600401610a769061441e565b6001600160a01b0383166000908152602081905260409020805461114b91906110bb90613f62565b80601f01602080910402602001604051908101604052809291908181526020018280546110e790613f62565b80156111345780601f1061110957610100808354040283529160200191611134565b820191906000526020600020905b81548152906001019060200180831161111757829003601f168201915b505050505083600261114691906143a7565b612818565b61ffff169392505050565b61013e546001600160a01b031633146111815760405162461bcd60e51b8152600401610a76906140f5565b61028080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff8116740100000000000000000000000000000000000000009182900460ff1615909102179055565b61013e546001600160a01b031633146111fa5760405162461bcd60e51b8152600401610a76906140f5565b604051600090339047908381818185875af1925050503d806000811461123c576040519150601f19603f3d011682016040523d82523d6000602084013e611241565b606091505b50509050806112625760405162461bcd60e51b8152600401610a7690614460565b50565b61ffff8216600090815261013b60205260409020546001600160a01b031633146113475733600090815260208190526040902080546112a390613f62565b90506112b08260026143a7565b106112cd5760405162461bcd60e51b8152600401610a76906144a0565b336000908152602081905260409020805483916112ed916110bb90613f62565b61ffff161461130e5760405162461bcd60e51b8152600401610a7690614508565b60405182906001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590600090a45b5061ffff16600090815261013b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6113a383838360405180602001604052806000815250612f24565b505050565b600080805b8381116113db576113bd826126cd565b6113c7908261411b565b90506113d460148361411b565b91506113ad565b6113e6601483614518565b91506113f1826126cd565b6113fb9082614518565b90506115576000806114976001805461141390613f62565b80601f016020809104026020016040519081016040528092919081815260200182805461143f90613f62565b801561148c5780601f106114615761010080835404028352916020019161148c565b820191906000526020600020905b81548152906001019060200180831161146f57829003601f168201915b50505050508661284e565b6001600160a01b03166001600160a01b0316815260200190815260200160002080546114c290613f62565b80601f01602080910402602001604051908101604052809291908181526020018280546114ee90613f62565b801561153b5780601f106115105761010080835404028352916020019161153b565b820191906000526020600020905b81548152906001019060200180831161151e57829003601f168201915b5050505050828661154c9190614518565b6111469060026143a7565b61ffff16949350505050565b61013e546001600160a01b0316331461158e5760405162461bcd60e51b8152600401610a76906140f5565b61028455565b6101468161271081106115a657600080fd5b60209182820401919006915054906101000a900460ff1681565b60006115cb826125c0565b6115e75760405162461bcd60e51b8152600401610a7690614587565b6109b6826125f2565b6001600160a01b038116600090815260208190526040812080546002919061161790613f62565b6109b6929150614351565b61013e546001600160a01b0316331461164d5760405162461bcd60e51b8152600401610a76906140f5565b611657600061310b565b565b6001600160a01b03841661167f5760405162461bcd60e51b8152600401610a769061418b565b6001600160a01b0382166116a55760405162461bcd60e51b8152600401610a76906141f3565b6001600160a01b03841660009081526020819052604090208054600291906116cc90613f62565b6116d7929150614351565b81106116f55760405162461bcd60e51b8152600401610a76906144a0565b6001600160a01b0384166000908152602081905260408120805461171d91906110bb90613f62565b905061172d338261ffff16612793565b6117495760405162461bcd60e51b8152600401610a769061425b565b61175585858585612894565b61177485848361ffff166040518060200160405280600081525061316b565b505050505050565b6000600261013f5414156117a25760405162461bcd60e51b8152600401610a76906145c9565b600261013f5561013e546001600160a01b031633146117d35760405162461bcd60e51b8152600401610a76906140f5565b6117db610c70565b6117f75760405162461bcd60e51b8152600401610a769061460b565b6102835460ff161561181b5760405162461bcd60e51b8152600401610a769061464d565b611827603260026143a7565b8211156118465760405162461bcd60e51b8152600401610a76906146b5565b611852335b84846132c2565b6000838333424460405160200161186d9594939291906146fb565b60405160208183030381529060405280519060200120905060005b611893600285614351565b81101561198d5760006118e386868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111469250869150600290506143a7565b9050826118f1602084614738565b6020811061190157611901614750565b1a61014661ffff8316612710811061191b5761191b614750565b602091828204019190066101000a81548160ff021916908360ff1602179055506020826119489190614738565b601f141561197a57826040516020016119619190614766565b6040516020818303038152906040528051906020012092505b508061198581614778565b915050611888565b5050610283805460ff191660019081179091559050600161013f5592915050565b606061013d80546109cc90613f62565b6119c66137b6565b604080516204e2008101918290529060029061271090826000855b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116119e15790505050505050905090565b6001600160a01b038216331415611a445760405162461bcd60e51b8152600401610a76906147eb565b3360009081526020819052604081208054611a5e90613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8a90613f62565b8015611ad75780601f10611aac57610100808354040283529160200191611ad7565b820191906000526020600020905b815481529060010190602001808311611aba57829003601f168201915b5050505050905060005b8151811015611b585782611af6576000611af8565b835b61013b6000611b078585612818565b61ffff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611b5160028261411b565b9050611ae1565b506001600160a01b038316336001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3184604051611b9c919061390b565b60405180910390a3505050565b61013e546001600160a01b03163314611bd45760405162461bcd60e51b8152600401610a76906140f5565b61014180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101448054909216179055565b61013e546001600160a01b03163314611c3a5760405162461bcd60e51b8152600401610a76906140f5565b61027f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b611c7684848484612f24565b50505050565b6060611c8b8261ffff166125c0565b611ca75760405162461bcd60e51b8152600401610a7690614853565b610140546001600160a01b0316611ccc57505060408051602081019091526000815290565b610143546001600160a01b0316635cc518ba83610146816127108110611cf457611cf4614750565b602091828204019190069054906101000a900460ff166040518363ffffffff1660e01b8152600401611d27929190614863565b60006040518083038186803b158015611d3f57600080fd5b505afa158015611d53573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b691908101906148d6565b6000600261013f541415611da15760405162461bcd60e51b8152600401610a76906145c9565b600261013f819055611db49085906143a7565b8614611dd25760405162461bcd60e51b8152600401610a7690614969565b611ddd3388886132c2565b600087873388884244604051602001611dfc97969594939291906149c6565b60405160208183030381529060405280519060200120905060005b85811015612041576000611e688a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111469250869150600290506143a7565b610145546040517f6352211e00000000000000000000000000000000000000000000000000000000815291925033916001600160a01b0390911690636352211e90611eb7908590600401614a2b565b60206040518083038186803b158015611ecf57600080fd5b505afa158015611ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f079190614a44565b6001600160a01b031614611f2d5760405162461bcd60e51b8152600401610a7690614abd565b858583818110611f3f57611f3f614750565b90506020020135600114611f655760405162461bcd60e51b8152600401610a7690614b4b565b6004888884818110611f7957611f79614750565b90506020020135611f8a9190614b5b565b60fc84611f98602086614738565b60208110611fa857611fa8614750565b611fb6939291901a16614b68565b6101468261ffff166127108110611fcf57611fcf614750565b602091828204019190066101000a81548160ff021916908360ff160217905550602082611ffc9190614738565b601f141561202e57826040516020016120159190614766565b6040516020818303038152906040528051906020012092505b508061203981614778565b915050611e17565b50610144546001600160a01b0316636b20c45433888888886040518663ffffffff1660e01b8152600401612079959493929190614b95565b600060405180830381600087803b15801561209357600080fd5b505af11580156120a7573d6000803e3d6000fd5b505050506001915050600161013f559695505050505050565b61013e546001600160a01b031633146120eb5760405162461bcd60e51b8152600401610a76906140f5565b61014280546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101458054909216179055565b6102805460009074010000000000000000000000000000000000000000900460ff1661215d57612156838361332b565b90506109b6565b61027f546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c4552791906121a79086906004016139ec565b60206040518083038186803b1580156121bf57600080fd5b505afa1580156121d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f79190614bf5565b6001600160a01b0316826001600160a01b031614806122245750610280546001600160a01b038381169116145b8061224857506001600160a01b0382166000908152610281602052604090205460ff165b806110155750611015838361332b565b61013e546001600160a01b031633146122835760405162461bcd60e51b8152600401610a76906140f5565b6001600160a01b0381166122a95760405162461bcd60e51b8152600401610a7690614c6e565b6112628161310b565b6000600261013f5414156122d85760405162461bcd60e51b8152600401610a76906145c9565b600261013f556122e6610c70565b6123025760405162461bcd60e51b8152600401610a769061460b565b3466b1a2bc2ec50000612316600285614351565b61232091906143a7565b1461233d5760405162461bcd60e51b8152600401610a7690614cb0565b6102825461234c600284614351565b612355336115f0565b61235f919061411b565b111561237d5760405162461bcd60e51b8152600401610a7690614d18565b6123863361184b565b60008383333442446040516020016123a396959493929190614d28565b60405160208183030381529060405280519060200120905060005b8381101561247657600061240986868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250612818915050565b905082612417600284614351565b6020811061242757612427614750565b1a61014661ffff8316612710811061244157612441614750565b602091828204019190066101000a81548160ff021916908360ff1602179055505060028161246f919061411b565b90506123be565b506001915050600161013f5592915050565b61013e546001600160a01b031633146124b35760405162461bcd60e51b8152600401610a76906140f5565b6001600160a01b0316600090815261028160205260409020805460ff19811660ff90911615179055565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061257057507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806109b657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146109b6565b600060028261271081106125d6576125d6614750565b602081049091015460ff601f9092166101000a90041692915050565b600080805b6001805461260490613f62565b90508110156126c657600061261f60018054610eca90613f62565b905060005b6001600160a01b0382166000908152602081905260409020805461264790613f62565b905081101561269d576001600160a01b03821660009081526020819052604090208054879161267991610d8490613f62565b61ffff16141561268b5781935061269d565b61269660028261411b565b9050612624565b506001600160a01b038316156126b357506126c6565b506126bf60148261411b565b90506125f7565b5092915050565b6000600180546126dc90613f62565b905082106126fc5760405162461bcd60e51b8152600401610a7690614da5565b6109b661068c6001805461270f90613f62565b80601f016020809104026020016040519081016040528092919081815260200182805461273b90613f62565b80156127885780601f1061275d57610100808354040283529160200191612788565b820191906000526020600020905b81548152906001019060200180831161276b57829003601f168201915b50505050508461284e565b600061279e826125c0565b6127ba5760405162461bcd60e51b8152600401610a7690614e0d565b60006127c5836115c0565b9050806001600160a01b0316846001600160a01b031614806128005750836001600160a01b03166127f584610a4f565b6001600160a01b0316145b8061281057506128108185612126565b949350505050565b600061282582600261411b565b835110156128455760405162461bcd60e51b8152600401610a7690614e4f565b50016002015190565b600061285b82601461411b565b8351101561287b5760405162461bcd60e51b8152600401610a7690614e91565b5001602001516c01000000000000000000000000900490565b836001600160a01b031661293e600180546128ae90613f62565b80601f01602080910402602001604051908101604052809291908181526020018280546128da90613f62565b80156129275780601f106128fc57610100808354040283529160200191612927565b820191906000526020600020905b81548152906001019060200180831161290a57829003601f168201915b505050505085601461293991906143a7565b61284e565b6001600160a01b0316146129645760405162461bcd60e51b8152600401610a7690614ef9565b6001600160a01b0382166000908152602081905260409020805461298790613f62565b151590506129cc5760018260601b6040516020016129a6929190614f9f565b604051602081830303815290604052600190805190602001906129ca9291906137d7565b505b6001600160a01b03841660009081526020819052604081208054612a8591906129f490613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054612a2090613f62565b8015612a6d5780601f10612a4257610100808354040283529160200191612a6d565b820191906000526020600020905b815481529060010190602001808311612a5057829003601f168201915b505050505083846002612a80919061411b565b613436565b6001600160a01b0386166000908152602081905260409020805491925090612aac90613f62565b905060021415612c8357612b5360018054612ac690613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054612af290613f62565b8015612b3f5780601f10612b1457610100808354040283529160200191612b3f565b820191906000526020600020905b815481529060010190602001808311612b2257829003601f168201915b50505050506000866014612a8091906143a7565b612c2760018054612b6390613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054612b8f90613f62565b8015612bdc5780601f10612bb157610100808354040283529160200191612bdc565b820191906000526020600020905b815481529060010190602001808311612bbf57829003601f168201915b5050505050866001612bee919061411b565b612bf99060146143a7565b612c0488600161411b565b612c0f9060146143a7565b60018054612c1c90613f62565b612a80929150614518565b604051602001612c38929190614fe0565b60405160208183030381529060405260019080519060200190612c5c9291906137d7565b506001600160a01b0385166000908152602081905260408120612c7e9161385b565b612e6c565b6001600160a01b03851660009081526020819052604090208054612d319190612cab90613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054612cd790613f62565b8015612d245780601f10612cf957610100808354040283529160200191612d24565b820191906000526020600020905b815481529060010190602001808311612d0757829003601f168201915b5050505050600084613436565b6001600160a01b03861660009081526020819052604090208054612e219190612d5990613f62565b80601f0160208091040260200160405190810160405280929190818152602001828054612d8590613f62565b8015612dd25780601f10612da757610100808354040283529160200191612dd2565b820191906000526020600020905b815481529060010190602001808311612db557829003601f168201915b5050505050846002612de4919061411b565b6001600160a01b038916600090815260208190526040902080546002918891612e0c90613f62565b612e17929150614518565b612a809190614518565b604051602001612e32929190614fe0565b60408051601f198184030181529181526001600160a01b038716600090815260208181529190208251612e6a939192909101906137d7565b505b6001600160a01b038316600090815260208181526040918290209151612e959291849101614ff6565b60408051601f198184030181529181526001600160a01b038516600090815260208181529190208251612ecd939192909101906137d7565b50612ed9816000612818565b61ffff16836001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b6001600160a01b038416612f4a5760405162461bcd60e51b8152600401610a769061418b565b6001600160a01b038316612f705760405162461bcd60e51b8152600401610a76906141f3565b612f7a3383612793565b612f965760405162461bcd60e51b8152600401610a769061425b565b60005b6001600160a01b038516600090815260208190526040902080548491612fc291610d8490613f62565b61ffff1614158015612ff757506001600160a01b03851660009081526020819052604090208054612ff290613f62565b905081105b1561300e5761300760028261411b565b9050612f99565b6001600160a01b0385166000908152602081905260409020805461303190613f62565b905081106130515760405162461bcd60e51b8152600401610a76906142c3565b60005b6001805461306190613f62565b90508110156130aa57856001600160a01b031661308460018054610eca90613f62565b6001600160a01b03161415613098576130aa565b6130a360148261411b565b9050613054565b856001600160a01b03166130c460018054610eca90613f62565b6001600160a01b0316146130ea5760405162461bcd60e51b8152600401610a769061432b565b6130f686828785612894565b6131028686868661316b565b50505050505050565b61013e80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b156132b7576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906131c8903390899088908890600401615000565b602060405180830381600087803b1580156131e257600080fd5b505af1925050508015613212575060408051601f3d908101601f1916820190925261320f9181019061504f565b60015b61326c573d808015613240576040519150601f19603f3d011682016040523d82523d6000602084013e613245565b606091505b5080516132645760405162461bcd60e51b8152600401610a76906150c8565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612810565b506001949350505050565b6132cd8383836134fe565b611c7660008461331285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250612818915050565b61ffff166040518060200160405280600081525061316b565b6001600160a01b0382166000908152602081905260408120805482919061335190613f62565b80601f016020809104026020016040519081016040528092919081815260200182805461337d90613f62565b80156133ca5780601f1061339f576101008083540402835291602001916133ca565b820191906000526020600020905b8154815290600101906020018083116133ad57829003601f168201915b5050505050905060005b81518110156132b757836001600160a01b031661013b60006133f68585612818565b61ffff1681526020810191909152604001600020546001600160a01b031614613424576000925050506109b6565b61342f60028261411b565b90506133d4565b60608161344481601f61411b565b10156134625760405162461bcd60e51b8152600401610a769061510a565b61346c828461411b565b8451101561348c5760405162461bcd60e51b8152600401610a769061514c565b6060821580156134ab57604051915060008252602082016040526134f5565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156134e45780518352602092830192016134cc565b5050858452601f01601f1916604052505b50949350505050565b8061351b5760405162461bcd60e51b8152600401610a76906151b4565b613526600282614738565b156135435760405162461bcd60e51b8152600401610a769061521c565b6001600160a01b0383166000908152602081905260409020805461356690613f62565b151590506135ab5760018360601b604051602001613585929190614f9f565b604051602081830303815290604052600190805190602001906135a99291906137d7565b505b60005b818110156137525760026135f984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250612818915050565b61ffff16612710811061360e5761360e614750565b602081049091015460ff601f9092166101000a900416156136415760405162461bcd60e51b8152600401610a769061525e565b6001600261368685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250612818915050565b61ffff16612710811061369b5761369b614750565b602091828204019190066101000a81548160ff0219169083151502179055506136fb83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250612818915050565b61ffff16846001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461374b60028261411b565b90506135ae565b506001600160a01b03831660009081526020818152604091829020915161377e9291859185910161526e565b60408051601f198184030181529181526001600160a01b038516600090815260208181529190208251611c76939192909101906137d7565b604051806204e2000160405280612710906020820280368337509192915050565b8280546137e390613f62565b90600052602060002090601f016020900481019282613805576000855561384b565b82601f1061381e57805160ff191683800117855561384b565b8280016001018555821561384b579182015b8281111561384b578251825591602001919060010190613830565b50613857929150613891565b5090565b50805461386790613f62565b6000825580601f10613877575050565b601f01602090049060005260206000209081019061126291905b5b808211156138575760008155600101613892565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b811461126257600080fd5b80356109b6816138a6565b6000602082840312156138f5576138f5600080fd5b600061281084846138d5565b8015155b82525050565b602081016109b68284613901565b61ffff8116613905565b602081016109b68284613919565b60005b8381101561394c578181015183820152602001613934565b83811115611c765750506000910152565b6000613967825190565b80845260208401935061397e818560208601613931565b601f01601f19169290920192915050565b60208082528101611015818461395d565b806138ca565b80356109b6816139a0565b6000602082840312156139c6576139c6600080fd5b600061281084846139a6565b60006001600160a01b0382166109b6565b613905816139d2565b602081016109b682846139e3565b6138ca816139d2565b80356109b6816139fa565b60008060408385031215613a2457613a24600080fd5b6000613a308585613a03565b9250506020613a41858286016139a6565b9150509250929050565b600060208284031215613a6057613a60600080fd5b60006128108484613a03565b80613905565b602081016109b68284613a6c565b600080600060608486031215613a9857613a98600080fd5b6000613aa48686613a03565b9350506020613ab586828701613a03565b9250506040613ac6868287016139a6565b9150509250925092565b600080600060608486031215613ae857613ae8600080fd5b6000613af48686613a03565b9350506020613ab5868287016139a6565b60ff8116613905565b602081016109b68284613b05565b60008060008060808587031215613b3557613b35600080fd5b6000613b418787613a03565b9450506020613b52878288016139a6565b9350506040613b6387828801613a03565b9250506060613b74878288016139a6565b91505092959194509250565b60008083601f840112613b9557613b95600080fd5b50813567ffffffffffffffff811115613bb057613bb0600080fd5b602083019150836001820283011115613bcb57613bcb600080fd5b9250929050565b60008060208385031215613be857613be8600080fd5b823567ffffffffffffffff811115613c0257613c02600080fd5b613c0e85828601613b80565b92509250509250929050565b613c248282613901565b5060200190565b60200190565b6127108160005b82811015610fc0578151613c4c8682613c1a565b955050602082019150600101613c38565b6204e20081016109b68284613c31565b8015156138ca565b80356109b681613c6d565b60008060408385031215613c9657613c96600080fd5b6000613ca28585613a03565b9250506020613a4185828601613c75565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715613cef57613cef613cb3565b6040525050565b6000613d0160405190565b9050613d0d8282613cc9565b919050565b600067ffffffffffffffff821115613d2c57613d2c613cb3565b601f19601f83011660200192915050565b82818337506000910152565b6000613d5c613d5784613d12565b613cf6565b905082815260208101848484011115613d7757613d77600080fd5b613d82848285613d3d565b509392505050565b600082601f830112613d9e57613d9e600080fd5b8135612810848260208601613d49565b60008060008060808587031215613dc757613dc7600080fd5b6000613dd38787613a03565b9450506020613de487828801613a03565b9350506040613df5878288016139a6565b925050606085013567ffffffffffffffff811115613e1557613e15600080fd5b613b7487828801613d8a565b60008083601f840112613e3657613e36600080fd5b50813567ffffffffffffffff811115613e5157613e51600080fd5b602083019150836020820283011115613bcb57613bcb600080fd5b60008060008060008060608789031215613e8857613e88600080fd5b863567ffffffffffffffff811115613ea257613ea2600080fd5b613eae89828a01613b80565b9650965050602087013567ffffffffffffffff811115613ed057613ed0600080fd5b613edc89828a01613e21565b9450945050604087013567ffffffffffffffff811115613efe57613efe600080fd5b613f0a89828a01613e21565b92509250509295509295509295565b60008060408385031215613f2f57613f2f600080fd5b6000613f3b8585613a03565b9250506020613a4185828601613a03565b634e487b7160e01b600052602260045260246000fd5b600281046001821680613f7657607f821691505b60208210811415610c6a57610c6a613f4c565b601c8152602081017f4552433732313a20746f6b656e20646f6573206e6f742065786973740000000081529050613c2b565b602080825281016109b681613f89565b602b8152602081017f4552433732313a20617070726f766520717565727920666f72206e6f6e65786981527f7374656e7420746f6b656e000000000000000000000000000000000000000000602082015290505b60400190565b602080825281016109b681613fcb565b60468152602081017f4552433732313a2063616c6c6572206973206e6f7420746865206f776e65722081527f6e6f7220616e20617070726f766564206f70657261746f7220666f722074686560208201527f20746f6b656e0000000000000000000000000000000000000000000000000000604082015290505b60600190565b602080825281016109b681614035565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152613c2b565b602080825281016109b6816140c5565b634e487b7160e01b600052601160045260246000fd5b6000821982111561412e5761412e614105565b500190565b60278152602081017f4552433732313a2066726f6d2063616e6e6f7420626520746865207a65726f2081527f61646472657373000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b681614133565b60258152602081017f4552433732313a20746f2063616e6e6f7420626520746865207a65726f20616481527f64726573730000000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b68161419b565b60318152602081017f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f81527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020820152905061401f565b602080825281016109b681614203565b60238152602081017f4552433732313a2066726f6d20646f6573206e6f74206f776e2074686520746f81527f6b656e00000000000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b68161426b565b60228152602081017f4552433732313a2066726f6d206973206e6f7420696e206f776e657273206c6981527f73740000000000000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b6816142d3565b634e487b7160e01b600052601260045260246000fd5b6000826143605761436061433b565b500490565b60178152602081017f4552433732313a204f776e6572206e6f7420666f756e6400000000000000000081529050613c2b565b602080825281016109b681614365565b60008160001904831182151516156143c1576143c1614105565b500290565b60248152602081017f455243373231456e756d657261626c653a20696e646578206f7574206f66207281527f616e6765000000000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b6816143c6565b60118152602081017f5769746864726177616c206661696c656400000000000000000000000000000081529050613c2b565b602080825281016109b68161442e565b60208082527f4552433732313a20746f6b656e20696e646578206f7574206f662072616e67659101908152613c2b565b602080825281016109b681614470565b602c8152602081017f4552433732313a2063616c6c6572206973206e65697468657220617070726f7681527f6564206e6f72206f776e657200000000000000000000000000000000000000006020820152905061401f565b602080825281016109b6816144b0565b60008282101561452a5761452a614105565b500390565b60298152602081017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481527f656e7420746f6b656e00000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b68161452f565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050613c2b565b602080825281016109b681614597565b60148152602081017f5075626c69632073616c65206e6f74206f70656e00000000000000000000000081529050613c2b565b602080825281016109b6816145d9565b60138152602081017f446f6e277420626520746f6f206772656564790000000000000000000000000081529050613c2b565b602080825281016109b68161461b565b603f8152602081017f4576656e20696620796f7520617265206120666f756e6465722c20796f75206481527f6f6e277420646573657276652074686174206d616e7920447265616d657273006020820152905061401f565b602080825281016109b68161465d565b61412e828483613d3d565b60006109b68260601b90565b60006109b6826146d0565b6139056146f3826139d2565b6146dc565b90565b6147068186886146c5565b905061471281856146e7565b60140161471f8184613a6c565b60200161472c8183613a6c565b60200195945050505050565b815b915060008261474b5761474b61433b565b500690565b634e487b7160e01b600052603260045260246000fd5b6147708183613a6c565b602001919050565b600060001982141561478c5761478c614105565b5060010190565b60298152602081017f4552433732313a2063616e6e6f7420617070726f76652063616c6c657220617381527f206f70657261746f7200000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b681614793565b60278152602081017f4552433732313a2055524920717565727920666f72206e6f6e6578697374656e81527f7420746f6b656e000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b6816147fb565b604081016148718285613a6c565b6110156020830184613b05565b600061488c613d5784613d12565b9050828152602081018484840111156148a7576148a7600080fd5b613d82848285613931565b600082601f8301126148c6576148c6600080fd5b815161281084826020860161487e565b6000602082840312156148eb576148eb600080fd5b815167ffffffffffffffff81111561490557614905600080fd5b612810848285016148b2565b60288152602081017f456163682072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e64790000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b681614911565b825b925060007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156149af576149af600080fd5b6020830292506149c0838584613d3d565b50500190565b6149d181888a6146c5565b90506149dd81876146e7565b6014016149eb818587614979565b90506149f78184613a6c565b602001614a048183613a6c565b602001979650505050505050565b60006109b66146f861ffff841681565b61390581614a12565b602081016109b68284614a22565b80516109b6816139fa565b600060208284031215614a5957614a59600080fd5b60006128108484614a39565b60378152602081017f596f752063616e6e6f7420676976652063616e6469657320746f20612072756e81527f6e6572207468617420796f7520646f206e6f74206f776e0000000000000000006020820152905061401f565b602080825281016109b681614a65565b604f8152602081017f596f75722072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e64792c2077686f206b6e6f7773207768617420636f756c64206860208201527f617070656e206f74686572776973650000000000000000000000000000000000604082015290506140af565b602080825281016109b681614acd565b60ff90811690821661473a565b60ff8116905060ff8216915060008260ff0382111561412e5761412e614105565b8183526020830161497b565b60608101614ba382886139e3565b8181036020830152614bb6818688614b89565b90508181036040830152614bcb818486614b89565b979650505050505050565b60006109b6826139d2565b6138ca81614bd6565b80516109b681614be1565b600060208284031215614c0a57614c0a600080fd5b60006128108484614bea565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f64647265737300000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b681614c16565b601d8152602081017f596f75206861766520746f2070617920746865206261696c20626f6e6400000081529050613c2b565b602080825281016109b681614c7e565b60318152602081017f596f757220686f6d6520697320746f20736d616c6c20746f2077656c636f6d6581527f20736f206d616e7920647265616d6572730000000000000000000000000000006020820152905061401f565b602080825281016109b681614cc0565b614d338187896146c5565b9050614d3f81866146e7565b601401614d4c8185613a6c565b602001614d598184613a6c565b602001614d668183613a6c565b6020019695505050505050565b601f8152602081017f4552433732313a206f776e6572496e646578206f7574206f6620626f756e640081529050613c2b565b602080825281016109b681614d73565b602c8152602081017f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881527f697374656e7420746f6b656e00000000000000000000000000000000000000006020820152905061401f565b602080825281016109b681614db5565b60148152602081017f746f55696e7431365f6f75744f66426f756e647300000000000000000000000081529050613c2b565b602080825281016109b681614e1d565b60158152602081017f746f416464726573735f6f75744f66426f756e6473000000000000000000000081529050613c2b565b602080825281016109b681614e5f565b60288152602081017f4552433732313a207472616e736665722066726f6d206164647265737320697381527f20696e76616c69640000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b681614ea1565b60008154614f1681613f62565b600182168015614f2d5760018114614f3e57614f6e565b60ff19831686528186019350614f6e565b60008581526020902060005b83811015614f6657815488820152600190910190602001614f4a565b505081860193505b50505092915050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116613905565b614fa98184614f09565b9050614fb58183614f77565b60140192915050565b6000614fc8825190565b614fd6818560208601613931565b9290920192915050565b614fea8184614fbe565b90506110158183614fbe565b614fea8184614f09565b6080810161500e82876139e3565b61501b60208301866139e3565b6150286040830185613a6c565b818103606083015261503a818461395d565b9695505050505050565b80516109b6816138a6565b60006020828403121561506457615064600080fd5b60006128108484615044565b60328152602081017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e74657200000000000000000000000000006020820152905061401f565b602080825281016109b681615070565b600e8152602081017f736c6963655f6f766572666c6f7700000000000000000000000000000000000081529050613c2b565b602080825281016109b6816150d8565b60118152602081017f736c6963655f6f75744f66426f756e647300000000000000000000000000000081529050613c2b565b602080825281016109b68161511a565b60258152602081017f4552433732313a2063616e6e6f74206d696e742077697468206e6f20746f6b6581527f6e204964730000000000000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b68161515c565b602a8152602081017f4552433732313a20746f6b656e4964732073686f756c6420626520627974657381527f206f662075696e743136000000000000000000000000000000000000000000006020820152905061401f565b602080825281016109b6816151c4565b601c8152602081017f4552433732313a20746f6b656e20616c7265616479206578697374730000000081529050613c2b565b602080825281016109b68161522c565b6152788185614f09565b90506128108183856146c556fea264697066735822122046587b314b050c95aee2c01fa6c16505ba58492e42a5f478d8f70aa704ed6ad964736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "approve(address,uint256,uint256)": {
        "details": "Approve \"to\" to manage token Id",
        "params": {
          "to": "address The address which will manage the token Id",
          "tokenId": "uint256 The token Id to manage",
          "tokenIndex": "uint256 The index of the token in the owner's list"
        }
      },
      "balanceOf(address)": {
        "details": "There are two bytes per tokenId",
        "params": {
          "owner": "address The address we retrieve the balance for"
        },
        "returns": {
          "_0": "uint256 The number of tokens owned by the address"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getOwnerIndex(address)": {
        "details": "Returns the index of owner in the internal array of owners. Revert if not found.",
        "params": {
          "owner": "address The address we retrieve the index for"
        }
      },
      "getTokenExists()": {
        "details": "Returns the array of bool telling if a token exists or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "Modified for opensea and looksrare pre-approve so users can make truly gas less sales."
      },
      "mintBatchRunnersAccess(bytes,uint256[],uint256[])": {
        "details": "This mint function wraps the safeMintBatch to:      1) check that the minter owns the runner 2) use the candies 3) burn the candies",
        "params": {
          "candyAmounts": "should be an array of 1",
          "candyIds": "the same indexes as above but as a uint8 array",
          "tokenIds": "a bytes interpreted as an array of uint16"
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good      reason to call this function on chain.",
        "params": {
          "tokenId": "uint265 A given token id"
        },
        "returns": {
          "_0": "address The owner of the token."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,uint256,address,uint256)": {
        "details": "Transfer token with minimal computing since all the required data to check is given",
        "params": {
          "from": "address The address which you want to transfer the token from",
          "fromIndex": "uint256 The index of \"from\" in the owners bytes. This is to avoid a search in the array.",
          "to": "address The address which you want to transfer the token to",
          "tokenIndex": "uint256 The index of the token to transfer in the from's token list."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.",
        "params": {
          "_approved": "Whether to add or remove `operator` as an operator.",
          "operator": "The address of the operator to add or remove."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenByIndex(uint256)": {
        "details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
      },
      "totalSupply()": {
        "details": "Returns the total amount of tokens stored by the contract."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "opensea": {
        "details": "Copied from \\@naomsa's contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "flipProxyState(address)": {
        "notice": "Approve the communication and interaction with cross-collection interactions."
      },
      "looksrare()": {
        "notice": "LooksRare marketplace transfer manager."
      },
      "marketplacesApproved()": {
        "notice": "Check if marketplaces pre-approve is enabled."
      },
      "opensea()": {
        "notice": "OpenSea proxy registry."
      },
      "setLooksrare(address)": {
        "notice": "Set looksrare to `looksrare_`."
      },
      "setOpensea(address)": {
        "notice": "Set opensea to `opensea_`."
      },
      "toggleMarketplacesApproved()": {
        "notice": "Toggle pre-approve feature state for sender."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13358,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_tokensByOwner",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 13360,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "owners",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      },
      {
        "astId": 13367,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "tokenExists",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bool)10000_storage"
      },
      {
        "astId": 13371,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "315",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 13373,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_name",
        "offset": 0,
        "slot": "316",
        "type": "t_string_storage"
      },
      {
        "astId": 13375,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_symbol",
        "offset": 0,
        "slot": "317",
        "type": "t_string_storage"
      },
      {
        "astId": 225,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_owner",
        "offset": 0,
        "slot": "318",
        "type": "t_address"
      },
      {
        "astId": 425,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_status",
        "offset": 0,
        "slot": "319",
        "type": "t_uint256"
      },
      {
        "astId": 4185,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "renderingContractAddress",
        "offset": 0,
        "slot": "320",
        "type": "t_address"
      },
      {
        "astId": 4187,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "candyShopAddress",
        "offset": 0,
        "slot": "321",
        "type": "t_address"
      },
      {
        "astId": 4189,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "chainRunnersAddress",
        "offset": 0,
        "slot": "322",
        "type": "t_address"
      },
      {
        "astId": 4192,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "renderer",
        "offset": 0,
        "slot": "323",
        "type": "t_contract(IDreamersRenderer)8147"
      },
      {
        "astId": 4195,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "candyShop",
        "offset": 0,
        "slot": "324",
        "type": "t_contract(ICandyShop)8097"
      },
      {
        "astId": 4198,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "chainRunners",
        "offset": 0,
        "slot": "325",
        "type": "t_contract(IChainRunners)8114"
      },
      {
        "astId": 4202,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "dreamersCandies",
        "offset": 0,
        "slot": "326",
        "type": "t_array(t_uint8)10000_storage"
      },
      {
        "astId": 4208,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "opensea",
        "offset": 0,
        "slot": "639",
        "type": "t_address"
      },
      {
        "astId": 4211,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "looksrare",
        "offset": 0,
        "slot": "640",
        "type": "t_address"
      },
      {
        "astId": 4215,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "marketplacesApproved",
        "offset": 20,
        "slot": "640",
        "type": "t_bool"
      },
      {
        "astId": 4219,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "proxyToApproved",
        "offset": 0,
        "slot": "641",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4324,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "maxDreamersMintPublicSale",
        "offset": 0,
        "slot": "642",
        "type": "t_uint256"
      },
      {
        "astId": 4333,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "foundersMinted",
        "offset": 0,
        "slot": "643",
        "type": "t_bool"
      },
      {
        "astId": 4335,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "publicSaleStartTimestamp",
        "offset": 0,
        "slot": "644",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)10000_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[10000]",
        "numberOfBytes": "10016"
      },
      "t_array(t_uint8)10000_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[10000]",
        "numberOfBytes": "10016"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICandyShop)8097": {
        "encoding": "inplace",
        "label": "contract ICandyShop",
        "numberOfBytes": "20"
      },
      "t_contract(IChainRunners)8114": {
        "encoding": "inplace",
        "label": "contract IChainRunners",
        "numberOfBytes": "20"
      },
      "t_contract(IDreamersRenderer)8147": {
        "encoding": "inplace",
        "label": "contract IDreamersRenderer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}