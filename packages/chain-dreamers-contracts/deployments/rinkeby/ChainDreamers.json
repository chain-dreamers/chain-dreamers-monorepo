{
  "address": "0x0f377F2AD760FB57A9DE167cf4d1bC440dD6c1F5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_MINT_FOUNDERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_NUMBER_OF_TOKENS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_PUBLIC_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candyShopAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainRunnersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dreamersCandies",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        }
      ],
      "name": "flipProxyState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundersMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenExists",
      "outputs": [
        {
          "internalType": "bool[10000]",
          "name": "",
          "type": "bool[10000]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "looksrare",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplacesApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDreamersMintPublicSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        }
      ],
      "name": "mintBatchFounders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        }
      ],
      "name": "mintBatchPublicSale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "candyIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "candyAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatchRunnersAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "opensea",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candyShopContractAddress",
          "type": "address"
        }
      ],
      "name": "setCandyShopAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_chainRunnersContractAddress",
          "type": "address"
        }
      ],
      "name": "setChainRunnersContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "looksrare_",
          "type": "address"
        }
      ],
      "name": "setLooksrare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDreamersMintPublicSale",
          "type": "uint256"
        }
      ],
      "name": "setMaxDreamersMintPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "opensea_",
          "type": "address"
        }
      ],
      "name": "setOpensea",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_renderingContractAddress",
          "type": "address"
        }
      ],
      "name": "setRenderingContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleMarketplacesApproved",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x229ac32193587f04a01794746882a0b71d36d948925af5002f0eb678c3055e23",
  "receipt": {
    "to": null,
    "from": "0x145247853C6eeA1263757d22C5e8C3A4dBbF48b6",
    "contractAddress": "0x0f377F2AD760FB57A9DE167cf4d1bC440dD6c1F5",
    "transactionIndex": 10,
    "gasUsed": "4750140",
    "logsBloom": "0x
    "blockHash": "0xe13ac963befbe002cb50d66b0969a6348aeb1d9524572f41057f0b5a3d05c049",
    "transactionHash": "0x229ac32193587f04a01794746882a0b71d36d948925af5002f0eb678c3055e23",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 10095238,
        "transactionHash": "0x229ac32193587f04a01794746882a0b71d36d948925af5002f0eb678c3055e23",
        "address": "0x0f377F2AD760FB57A9DE167cf4d1bC440dD6c1F5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000145247853c6eea1263757d22c5e8c3a4dbbf48b6"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xe13ac963befbe002cb50d66b0969a6348aeb1d9524572f41057f0b5a3d05c049"
      }
    ],
    "blockNumber": 10095238,
    "cumulativeGasUsed": "19007575",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Chain Dreamers",
    "DRE"
  ],
  "numDeployments": 7,
  "solcInputHash": "5fb7fb77c14695dc08359df180d1e1b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MINT_FOUNDERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_OF_TOKENS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PUBLIC_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candyShopAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainRunnersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dreamersCandies\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"flipProxyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundersMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenExists\",\"outputs\":[{\"internalType\":\"bool[10000]\",\"name\":\"\",\"type\":\"bool[10000]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"looksrare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplacesApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDreamersMintPublicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"}],\"name\":\"mintBatchFounders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"}],\"name\":\"mintBatchPublicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"candyIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"candyAmounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatchRunnersAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opensea\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candyShopContractAddress\",\"type\":\"address\"}],\"name\":\"setCandyShopAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainRunnersContractAddress\",\"type\":\"address\"}],\"name\":\"setChainRunnersContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"looksrare_\",\"type\":\"address\"}],\"name\":\"setLooksrare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDreamersMintPublicSale\",\"type\":\"uint256\"}],\"name\":\"setMaxDreamersMintPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opensea_\",\"type\":\"address\"}],\"name\":\"setOpensea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_renderingContractAddress\",\"type\":\"address\"}],\"name\":\"setRenderingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMarketplacesApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"approve(address,uint256,uint256)\":{\"details\":\"Approve \\\"to\\\" to manage token Id\",\"params\":{\"to\":\"address The address which will manage the token Id\",\"tokenId\":\"uint256 The token Id to manage\",\"tokenIndex\":\"uint256 The index of the token in the owner's list\"}},\"balanceOf(address)\":{\"details\":\"There are two bytes per tokenId\",\"params\":{\"owner\":\"address The address we retrieve the balance for\"},\"returns\":{\"_0\":\"uint256 The number of tokens owned by the address\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getOwnerIndex(address)\":{\"details\":\"Returns the index of owner in the internal array of owners. Revert if not found.\",\"params\":{\"owner\":\"address The address we retrieve the index for\"}},\"getTokenExists()\":{\"details\":\"Returns the array of bool telling if a token exists or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Modified for opensea and looksrare pre-approve so users can make truly gas less sales.\"},\"mintBatchRunnersAccess(bytes,uint256[],uint256[])\":{\"details\":\"This mint function wraps the safeMintBatch to:      1) check that the minter owns the runner 2) use the candies 3) burn the candies\",\"params\":{\"candyAmounts\":\"should be an array of 1\",\"candyIds\":\"the same indexes as above but as a uint8 array\",\"tokenIds\":\"a bytes interpreted as an array of uint16\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good      reason to call this function on chain.\",\"params\":{\"tokenId\":\"uint265 A given token id\"},\"returns\":{\"_0\":\"address The owner of the token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,uint256,address,uint256)\":{\"details\":\"Transfer token with minimal computing since all the required data to check is given\",\"params\":{\"from\":\"address The address which you want to transfer the token from\",\"fromIndex\":\"uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\",\"to\":\"address The address which you want to transfer the token to\",\"tokenIndex\":\"uint256 The index of the token to transfer in the from's token list.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\",\"params\":{\"_approved\":\"Whether to add or remove `operator` as an operator.\",\"operator\":\"The address of the operator to add or remove.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"opensea\":{\"details\":\"Copied from \\\\@naomsa's contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"flipProxyState(address)\":{\"notice\":\"Approve the communication and interaction with cross-collection interactions.\"},\"looksrare()\":{\"notice\":\"LooksRare marketplace transfer manager.\"},\"marketplacesApproved()\":{\"notice\":\"Check if marketplaces pre-approve is enabled.\"},\"opensea()\":{\"notice\":\"OpenSea proxy registry.\"},\"setLooksrare(address)\":{\"notice\":\"Set looksrare to `looksrare_`.\"},\"setOpensea(address)\":{\"notice\":\"Set opensea to `opensea_`.\"},\"toggleMarketplacesApproved()\":{\"notice\":\"Toggle pre-approve feature state for sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dreamers/ChainDreamers.sol\":\"ChainDreamers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dreamers/ChainDreamers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {BytesLib} from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport {ERC721Enumerable, ERC721} from \\\"../tokens/ERC721Enumerable.sol\\\";\\nimport \\\"../interfaces/IDreamersRenderer.sol\\\";\\nimport \\\"../interfaces/ICandyShop.sol\\\";\\nimport \\\"../interfaces/IChainRunners.sol\\\";\\n\\ncontract OpenSeaProxyRegistry {\\n    mapping(address => address) public proxies;\\n}\\n\\ncontract ChainDreamers is ERC721Enumerable, Ownable, ReentrancyGuard {\\n    // Linked contracts\\n    address public renderingContractAddress;\\n    address public candyShopAddress;\\n    address public chainRunnersAddress;\\n    IDreamersRenderer renderer;\\n    ICandyShop candyShop;\\n    IChainRunners chainRunners;\\n\\n    uint8[MAX_NUMBER_OF_TOKENS] public dreamersCandies;\\n    uint8 private constant candyMask = 252; // \\\"11111100\\\" binary string, last 2 bits kept for candyId\\n    /// @dev Copied from \\\\@naomsa's contract\\n    /// @notice OpenSea proxy registry.\\n    address public opensea;\\n    /// @notice LooksRare marketplace transfer manager.\\n    address public looksrare;\\n    /// @notice Check if marketplaces pre-approve is enabled.\\n    bool public marketplacesApproved = true;\\n\\n    mapping(address => bool) proxyToApproved;\\n\\n    /// @notice Set opensea to `opensea_`.\\n    function setOpensea(address opensea_) external onlyOwner {\\n        opensea = opensea_;\\n    }\\n\\n    /// @notice Set looksrare to `looksrare_`.\\n    function setLooksrare(address looksrare_) external onlyOwner {\\n        looksrare = looksrare_;\\n    }\\n\\n    /// @notice Toggle pre-approve feature state for sender.\\n    function toggleMarketplacesApproved() external onlyOwner {\\n        marketplacesApproved = !marketplacesApproved;\\n    }\\n\\n    /// @notice Approve the communication and interaction with cross-collection interactions.\\n    function flipProxyState(address proxyAddress) public onlyOwner {\\n        proxyToApproved[proxyAddress] = !proxyToApproved[proxyAddress];\\n    }\\n\\n    /// @dev Modified for opensea and looksrare pre-approve so users can make truly gas less sales.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (!marketplacesApproved)\\n            return super.isApprovedForAll(owner, operator);\\n\\n        return\\n            operator == OpenSeaProxyRegistry(opensea).proxies(owner) ||\\n            operator == looksrare ||\\n            proxyToApproved[operator] ||\\n            super.isApprovedForAll(owner, operator);\\n    }\\n\\n    // Constants\\n    uint256 public maxDreamersMintPublicSale;\\n    uint256 public constant MINT_PUBLIC_PRICE = 0.05 ether;\\n    uint256 public constant MAX_MINT_FOUNDERS = 50;\\n    bool public foundersMinted = false;\\n\\n    // State variables\\n    uint256 public publicSaleStartTimestamp;\\n\\n    function setPublicSaleTimestamp(uint256 timestamp) external onlyOwner {\\n        publicSaleStartTimestamp = timestamp;\\n    }\\n\\n    function isPublicSaleOpen() public view returns (bool) {\\n        return\\n            block.timestamp > publicSaleStartTimestamp &&\\n            publicSaleStartTimestamp != 0;\\n    }\\n\\n    modifier whenPublicSaleActive() {\\n        require(isPublicSaleOpen(), \\\"Public sale not open\\\");\\n        _;\\n    }\\n\\n    function setRenderingContractAddress(address _renderingContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        renderingContractAddress = _renderingContractAddress;\\n        renderer = IDreamersRenderer(renderingContractAddress);\\n    }\\n\\n    function setCandyShopAddress(address _candyShopContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        candyShopAddress = _candyShopContractAddress;\\n        candyShop = ICandyShop(candyShopAddress);\\n    }\\n\\n    function setMaxDreamersMintPublicSale(uint256 _maxDreamersMintPublicSale)\\n        public\\n        onlyOwner\\n    {\\n        maxDreamersMintPublicSale = _maxDreamersMintPublicSale;\\n    }\\n\\n    function setChainRunnersContractAddress(\\n        address _chainRunnersContractAddress\\n    ) public onlyOwner {\\n        chainRunnersAddress = _chainRunnersContractAddress;\\n        chainRunners = IChainRunners(_chainRunnersContractAddress);\\n    }\\n\\n    constructor(string memory name_, string memory symbol_)\\n        ERC721(name_, symbol_)\\n    {}\\n\\n    /// @dev This mint function wraps the safeMintBatch to:\\n    ///      1) check that the minter owns the runner 2) use the candies 3) burn the candies\\n    /// @param tokenIds a bytes interpreted as an array of uint16\\n    /// @param candyIds the same indexes as above but as a uint8 array\\n    /// @param candyAmounts should be an array of 1\\n    function mintBatchRunnersAccess(\\n        bytes calldata tokenIds,\\n        uint256[] calldata candyIds,\\n        uint256[] calldata candyAmounts\\n    ) public nonReentrant returns (bool) {\\n        require(\\n            tokenIds.length == candyIds.length * 2,\\n            \\\"Each runner needs one and only one candy\\\"\\n        );\\n\\n        safeMintBatch(_msgSender(), tokenIds);\\n\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                tokenIds,\\n                msg.sender,\\n                candyIds,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n        for (uint256 i = 0; i < candyIds.length; i++) {\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i * 2);\\n            // ownerOf uses a simple mapping in OZ's ERC721 so should be cheap\\n            require(\\n                chainRunners.ownerOf(tokenId) == _msgSender(),\\n                \\\"You cannot give candies to a runner that you do not own\\\"\\n            );\\n            require(\\n                candyAmounts[i] == 1,\\n                \\\"Your runner needs one and only one candy, who knows what could happen otherwise\\\"\\n            );\\n            dreamersCandies[tokenId] =\\n                (uint8(candies[i % 32]) & candyMask) +\\n                (uint8(candyIds[i]) % 4);\\n            if (i % 32 == 31) {\\n                candies = keccak256(abi.encodePacked(candies));\\n            }\\n        }\\n\\n        candyShop.burnBatch(_msgSender(), candyIds, candyAmounts);\\n        return true;\\n    }\\n\\n    function mintBatchPublicSale(bytes calldata tokenIds)\\n        public\\n        payable\\n        nonReentrant\\n        whenPublicSaleActive\\n        returns (bool)\\n    {\\n        require(\\n            (tokenIds.length / 2) * MINT_PUBLIC_PRICE == msg.value,\\n            \\\"You have to pay the bail bond\\\"\\n        );\\n        require(\\n            ERC721.balanceOf(_msgSender()) + tokenIds.length / 2 <=\\n                maxDreamersMintPublicSale,\\n            \\\"Your home is to small to welcome so many dreamers\\\"\\n        );\\n        safeMintBatch(_msgSender(), tokenIds);\\n\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                tokenIds,\\n                msg.sender,\\n                msg.value,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n        for (uint256 i = 0; i < tokenIds.length; i += 2) {\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i);\\n            dreamersCandies[tokenId] = uint8(candies[i / 2]);\\n        }\\n\\n        return true;\\n    }\\n\\n    function mintBatchFounders(bytes calldata tokenIds)\\n        public\\n        nonReentrant\\n        onlyOwner\\n        whenPublicSaleActive\\n        returns (bool)\\n    {\\n        require(!foundersMinted, \\\"Don't be too greedy\\\");\\n        require(\\n            tokenIds.length <= MAX_MINT_FOUNDERS * 2,\\n            \\\"Even if you are a founder, you don't deserve that many Dreamers\\\"\\n        );\\n        safeMintBatch(_msgSender(), tokenIds);\\n\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                tokenIds,\\n                msg.sender,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n        for (uint256 i = 0; i < tokenIds.length / 2; i++) {\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i * 2);\\n            dreamersCandies[tokenId] = uint8(candies[i % 32]);\\n            if (i % 32 == 31) {\\n                candies = keccak256(abi.encodePacked(candies));\\n            }\\n        }\\n        foundersMinted = true;\\n        return true;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(uint16(_tokenId)),\\n            \\\"ERC721: URI query for nonexistent token\\\"\\n        );\\n\\n        if (renderingContractAddress == address(0)) {\\n            return \\\"\\\";\\n        }\\n\\n        return renderer.tokenURI(_tokenId, dreamersCandies[_tokenId]);\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = _msgSender().call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x53f0b35a636f60156ca8c5742a4e1cee4644c9b73985b6db5ff999de32b28100\",\"license\":\"MIT\"},\"contracts/interfaces/ICandyShop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICandyShop {\\n    function burnBatch(\\n        address from,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5149dbb72dc6f0f71424aac31612102da5860753e8e1d973aabe6e448aa2baa6\",\"license\":\"MIT\"},\"contracts/interfaces/IChainRunners.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IChainRunners {\\n    function getDna(uint256 _tokenId) external view returns (uint256);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x2ba2de325b98dfe751091f49497b5cc7c9bfb0d3d0f337b3990dda2cc86d3cef\",\"license\":\"MIT\"},\"contracts/interfaces/IDreamersRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IDreamersRenderer {\\n    function tokenURI(uint256 tokenId, uint8 candy)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x391be7de798d2fb8c8c6dcb46a565d5a02ac7c7c3d1f6c051e112de908ce57f2\",\"license\":\"MIT\"},\"contracts/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token optimized for batch minting\\n * @notice a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data\\n *      We use the uint16 / bytes2 tokenId\\n */\\nabstract contract ERC721 is IERC721, IERC721Metadata, Context, ERC165 {\\n    using Address for address;\\n\\n    // Mapping from address to tokenIds. This is the single source of truth for the data\\n    mapping(address => bytes) internal _tokensByOwner;\\n\\n    // Because mapping in solidity are not real hash tables, one needs to keep track of the keys.\\n    // One address is 20 bytes\\n    bytes internal owners;\\n\\n    // Number of tokens\\n    uint16 public constant MAX_NUMBER_OF_TOKENS = 10_000;\\n\\n    // Bool array to store if the token is minted. To save on gas for token lookup in _tokensByOwner.\\n    bool[MAX_NUMBER_OF_TOKENS] internal tokenExists;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint16 => address) internal _tokenApprovals;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev There are two bytes per tokenId\\n     * @param owner address The address we retrieve the balance for\\n     * @return uint256 The number of tokens owned by the address\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return _tokensByOwner[owner].length / 2;\\n    }\\n\\n    function _balanceOf(uint256 ownerIndex) internal view returns (uint256) {\\n        require(ownerIndex < owners.length, \\\"ERC721: ownerIndex out of bound\\\");\\n        return balanceOf(BytesLib.toAddress(owners, ownerIndex));\\n    }\\n\\n    /// @dev Returns the index of owner in the internal array of owners. Revert if not found.\\n    /// @param owner address The address we retrieve the index for\\n    function getOwnerIndex(address owner) public view returns (uint256) {\\n        uint256 index = 0;\\n        while (index < owners.length) {\\n            if (BytesLib.toAddress(owners, index) == owner) {\\n                return index / 20;\\n            }\\n            index += 20;\\n        }\\n        revert(\\\"ERC721: Owner not found\\\");\\n    }\\n\\n    /// @dev Returns the array of bool telling if a token exists or not.\\n    function getTokenExists()\\n        external\\n        view\\n        returns (bool[MAX_NUMBER_OF_TOKENS] memory)\\n    {\\n        return tokenExists;\\n    }\\n\\n    /**\\n     * @param tokenId uint16 A given token id\\n     * @return bool True if the token exists, false otherwise\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenExists[tokenId];\\n    }\\n\\n    /**\\n     * @dev This is copied from OpenZeppelin's implementation\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev This is the core unsafe implementation of a transfer.\\n    /// @param from address The address which you want to transfer the token from\\n    /// @param fromIndex uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\\n    /// @param to address The address which you want to transfer the token to\\n    /// @param tokenIndex uint256 The index of the token to transfer in the from's token list.\\n    function _transfer(\\n        address from,\\n        uint256 fromIndex,\\n        address to,\\n        uint256 tokenIndex\\n    ) private {\\n        require(\\n            BytesLib.toAddress(owners, fromIndex * 20) == from,\\n            \\\"ERC721: transfer from address is invalid\\\"\\n        );\\n        if (_tokensByOwner[to].length == 0) {\\n            owners = bytes.concat(owners, bytes20(to));\\n        }\\n        bytes memory tokenId = BytesLib.slice(\\n            _tokensByOwner[from],\\n            tokenIndex,\\n            tokenIndex + 2\\n        );\\n        if (_tokensByOwner[from].length == 2) {\\n            owners = bytes.concat(\\n                BytesLib.slice(owners, 0, fromIndex * 20),\\n                BytesLib.slice(\\n                    owners,\\n                    (fromIndex + 1) * 20,\\n                    owners.length - (fromIndex + 1) * 20\\n                )\\n            );\\n            delete _tokensByOwner[from];\\n        } else {\\n            _tokensByOwner[from] = bytes.concat(\\n                BytesLib.slice(_tokensByOwner[from], 0, tokenIndex),\\n                BytesLib.slice(\\n                    _tokensByOwner[from],\\n                    tokenIndex + 2,\\n                    _tokensByOwner[from].length - tokenIndex - 2\\n                )\\n            );\\n        }\\n        _tokensByOwner[to] = bytes.concat(_tokensByOwner[to], tokenId);\\n        emit Transfer(from, to, BytesLib.toUint16(tokenId, 0));\\n    }\\n\\n    /// @dev Transfer token with minimal computing since all the required data to check is given\\n    /// @param from address The address which you want to transfer the token from\\n    /// @param fromIndex uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\\n    /// @param to address The address which you want to transfer the token to\\n    /// @param tokenIndex uint256 The index of the token to transfer in the from's token list.\\n    function safeTransferFrom(\\n        address from,\\n        uint256 fromIndex,\\n        address to,\\n        uint256 tokenIndex\\n    ) external {\\n        require(from != address(0), \\\"ERC721: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721: to cannot be the zero address\\\");\\n        require(\\n            tokenIndex < _tokensByOwner[from].length / 2,\\n            \\\"ERC721: token index out of range\\\"\\n        );\\n        uint16 tokenId = BytesLib.toUint16(\\n            _tokensByOwner[from],\\n            tokenIndex * 2\\n        );\\n        require(\\n            _tokenApprovals[tokenId] == msg.sender || from == msg.sender,\\n            \\\"ERC721: caller is neither approved nor owner\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        _checkOnERC721Received(from, to, tokenId, \\\"\\\");\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev This is the core unsafe implementation of a mint.\\n     * @param to address The receiver of the tokens\\n     * @param tokenIds bytes The token ids to mint\\n     */\\n    function _mintBatch(address to, bytes calldata tokenIds) private {\\n        require(tokenIds.length > 0, \\\"ERC721: cannot mint with no token Ids\\\");\\n        require(\\n            tokenIds.length % 2 == 0,\\n            \\\"ERC721: tokenIds should be bytes of uint16\\\"\\n        );\\n        if (_tokensByOwner[to].length == 0) {\\n            owners = bytes.concat(owners, bytes20(to));\\n        }\\n        for (uint256 i = 0; i < tokenIds.length; i += 2) {\\n            require(\\n                !tokenExists[BytesLib.toUint16(tokenIds, i)],\\n                \\\"ERC721: token already exists\\\"\\n            );\\n            tokenExists[BytesLib.toUint16(tokenIds, i)] = true;\\n            emit Transfer(address(0), to, BytesLib.toUint16(tokenIds, i));\\n        }\\n        _tokensByOwner[to] = bytes.concat(_tokensByOwner[to], tokenIds);\\n    }\\n\\n    /// @dev Add a batch of token Ids given as a bytes array to the sender\\n    /// @param to address minting token to this address\\n    /// @param tokenIds bytes a bytes of tokenIds as bytes2 (uint16)\\n    function safeMintBatch(address to, bytes calldata tokenIds)\\n        internal\\n        virtual\\n    {\\n        _mintBatch(to, tokenIds);\\n        _checkOnERC721Received(\\n            address(0),\\n            to,\\n            BytesLib.toUint16(tokenIds, 0),\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /// @dev Approve \\\"to\\\" to manage token Id\\n    /// @param to address The address which will manage the token Id\\n    /// @param tokenId uint256 The token Id to manage\\n    /// @param tokenIndex uint256 The index of the token in the owner's list\\n    function approve(\\n        address to,\\n        uint256 tokenId,\\n        uint256 tokenIndex\\n    ) external {\\n        if (_tokenApprovals[uint16(tokenId)] != msg.sender) {\\n            // if sender is not approved, they need to be the owner\\n            require(\\n                tokenIndex * 2 < _tokensByOwner[msg.sender].length,\\n                \\\"ERC721: token index out of range\\\"\\n            );\\n            require(\\n                BytesLib.toUint16(_tokensByOwner[msg.sender], tokenIndex * 2) ==\\n                    tokenId,\\n                \\\"ERC721: caller is neither approved nor owner\\\"\\n            );\\n            emit Approval(msg.sender, to, tokenId);\\n        }\\n        _tokenApprovals[uint16(tokenId)] = to;\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        require(_exists(tokenId), \\\"ERC721: token does not exist\\\");\\n        return _tokenApprovals[uint16(tokenId)];\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     * @param operator The address of the operator to add or remove.\\n     * @param _approved Whether to add or remove `operator` as an operator.\\n     */\\n    function setApprovalForAll(address operator, bool _approved)\\n        external\\n        override\\n    {\\n        require(\\n            operator != msg.sender,\\n            \\\"ERC721: cannot approve caller as operator\\\"\\n        );\\n        bytes memory tokens = _tokensByOwner[msg.sender];\\n        for (uint256 i = 0; i < tokens.length; i += 2) {\\n            _tokenApprovals[BytesLib.toUint16(tokens, i)] = _approved\\n                ? operator\\n                : address(0);\\n        }\\n\\n        emit ApprovalForAll(msg.sender, operator, _approved);\\n    }\\n\\n    /**\\n     * @dev Returns whether `operator` is an approved operator for the caller.\\n     * @param owner The address of the owner to check.\\n     * @param operator The address of the operator to check.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        bytes memory tokens = _tokensByOwner[owner];\\n        for (uint256 i = 0; i < tokens.length; i += 2) {\\n            if (_tokenApprovals[BytesLib.toUint16(tokens, i)] != operator) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////////\\n    // Functions that should not be used but here for compatibility with ERC721\\n    // These are gassy.\\n    ///////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override {\\n        require(from != address(0), \\\"ERC721: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721: to cannot be the zero address\\\");\\n        require(\\n            _tokenApprovals[uint16(tokenId)] == msg.sender ||\\n                from == msg.sender,\\n            \\\"ERC721: caller is not approved for all tokens\\\"\\n        );\\n        uint256 tokenIndex = 0;\\n        while (\\n            BytesLib.toUint16(_tokensByOwner[from], tokenIndex) != tokenId &&\\n            tokenIndex < _tokensByOwner[from].length\\n        ) {\\n            tokenIndex += 2;\\n        }\\n        require(\\n            tokenIndex < _tokensByOwner[from].length,\\n            \\\"ERC721: from does not own the token\\\"\\n        );\\n\\n        uint256 fromIndex;\\n        for (fromIndex = 0; fromIndex < owners.length; fromIndex += 20) {\\n            if (BytesLib.toAddress(owners, fromIndex) == from) {\\n                break;\\n            }\\n        }\\n        require(\\n            BytesLib.toAddress(owners, fromIndex) == from,\\n            \\\"ERC721: from is not in owners list\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        safeTransferFrom(from, to, tokenId, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override {\\n        require(from != address(0), \\\"ERC721: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721: to cannot be the zero address\\\");\\n        require(\\n            _tokenApprovals[uint16(tokenId)] == msg.sender ||\\n                from == msg.sender,\\n            \\\"ERC721: caller is not approved for all tokens\\\"\\n        );\\n        uint256 tokenIndex = 0;\\n        while (\\n            BytesLib.toUint16(_tokensByOwner[from], tokenIndex) != tokenId &&\\n            tokenIndex < _tokensByOwner[from].length\\n        ) {\\n            tokenIndex += 2;\\n        }\\n        require(\\n            tokenIndex < _tokensByOwner[from].length,\\n            \\\"ERC721: from does not own the token\\\"\\n        );\\n\\n        uint256 fromIndex;\\n        for (fromIndex = 0; fromIndex < owners.length; fromIndex += 20) {\\n            if (BytesLib.toAddress(owners, fromIndex) == from) {\\n                break;\\n            }\\n        }\\n        require(\\n            BytesLib.toAddress(owners, fromIndex) == from,\\n            \\\"ERC721: from is not in owners list\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev For each owner, we go through all their tokens and check if the sought token is in the list. This lookup\\n     *      is gassy but we do not expect to pay them often as we provide other mean of doing the transfers.\\n     * @param tokenId uint16 A given token id\\n     * @return address The owner of the token, might be 0x0 if not found\\n     */\\n    function _ownerOf(uint256 tokenId) private view returns (address) {\\n        address owner = address(0);\\n        for (uint256 i = 0; i < owners.length; i += 20) {\\n            address currentOwner = BytesLib.toAddress(owners, i);\\n            for (\\n                uint256 j = 0;\\n                j < _tokensByOwner[currentOwner].length;\\n                j += 2\\n            ) {\\n                if (\\n                    BytesLib.toUint16(_tokensByOwner[currentOwner], j) ==\\n                    tokenId\\n                ) {\\n                    owner = currentOwner;\\n                    break;\\n                }\\n            }\\n            if (owner != address(0)) {\\n                break;\\n            }\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good\\n     *      reason to call this function on chain.\\n     * @param tokenId uint265 A given token id\\n     * @return address The owner of the token.\\n     */\\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: owner query for nonexistent token\\\");\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external override {\\n        address owner = _ownerOf(tokenId);\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: approve query for nonexistent token\\\"\\n        );\\n        require(\\n            _tokenApprovals[uint16(tokenId)] == msg.sender ||\\n                owner == msg.sender,\\n            \\\"ERC721: caller is not the owner nor an approved operator for the token\\\"\\n        );\\n        _tokenApprovals[uint16(tokenId)] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x6f3d9161e1a2345edec32e2bd1bd62fb992ad7d9f59ae7cb106d20771dba25e9\",\"license\":\"MIT\"},\"contracts/tokens/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC721} from \\\"./ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token optimized for batch minting with enumerable interface\\n * @notice a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data\\n *      We use the uint16 / bytes2 tokenId\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    function totalSupply() external view override returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < owners.length; i += 20) {\\n            total += _balanceOf(i);\\n        }\\n        return total;\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        override\\n        returns (uint256 tokenId)\\n    {\\n        require(\\n            index * 2 < _tokensByOwner[owner].length,\\n            \\\"ERC721Enumerable: index out of range\\\"\\n        );\\n        return BytesLib.toUint16(_tokensByOwner[owner], index * 2);\\n    }\\n\\n    function tokenByIndex(uint256 index)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 ownerIndex = 0;\\n        uint256 count;\\n        while (count <= index) {\\n            count += _balanceOf(ownerIndex);\\n            ownerIndex += 20;\\n        }\\n        ownerIndex -= 20;\\n        count -= _balanceOf(ownerIndex);\\n        return\\n            BytesLib.toUint16(\\n                _tokensByOwner[BytesLib.toAddress(owners, ownerIndex)],\\n                (index - count) * 2\\n            );\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC721)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xb7d84da5beaff9ce02a65b9f46dd0ea7d5d77462aec310e58ed79788f434cb87\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061032d5760003560e01c806370a08231116101a5578063b776c8a6116100ec578063d7822c9911610095578063f2fde38b1161006f578063f2fde38b146108ec578063f4b994241461090c578063f73c814b1461091f578063fac913231461093f57600080fd5b8063d7822c991461089a578063e985e9c5146108b1578063f0658ac9146108d157600080fd5b8063c87b56dd116100c6578063c87b56dd1461083a578063cb95f0691461085a578063d3d6005b1461087a57600080fd5b8063b776c8a6146107d9578063b88d4fde146107f9578063c074f4121461081957600080fd5b806395d89b411161014e578063a22cb46511610128578063a22cb46514610778578063a8e90b5714610798578063b5fcb339146107b957600080fd5b806395d89b41146107265780639913fc631461073b5780639c51792a1461075d57600080fd5b806389c8af831161017f57806389c8af83146106c75780638da5cb5b146106e75780639343eaa61461070657600080fd5b806370a0823114610671578063715018a6146106915780638392d804146106a657600080fd5b806323b872dd1161027457806342842e0e1161021d578063511ed382116101f7578063511ed382146105ec578063633574db1461060d5780636352211e1461063a5780636b318e6e1461065a57600080fd5b806342842e0e1461058c5780634f6ccce7146105ac578063511a9605146105cc57600080fd5b806333c12e171161024e57806333c12e17146105425780633ccfd60b14610557578063426a84931461056c57600080fd5b806323b872dd146104e257806325174f0e146105025780632f745c591461052257600080fd5b80630d77c756116102d65780631a6949e3116102b05780631a6949e3146104985780631e8858fb146104ad57806322afee07146104cd57600080fd5b80630d77c7561461043657806312b40a9f1461045657806318160ddd1461047657600080fd5b806306fdde031161030757806306fdde03146103c5578063081812fc146103e7578063095ea7b31461041457600080fd5b806301ffc9a7146103395780630216e3041461036f578063026ae1021461039257600080fd5b3661033457005b600080fd5b34801561034557600080fd5b5061035961035436600461398f565b610960565b60405161036691906139ba565b60405180910390f35b34801561037b57600080fd5b5061038561271081565b60405161036691906139d2565b34801561039e57600080fd5b50610280546103599074010000000000000000000000000000000000000000900460ff1681565b3480156103d157600080fd5b506103da6109bc565b6040516103669190613a3e565b3480156103f357600080fd5b50610407610402366004613a60565b610a4f565b6040516103669190613a9b565b34801561042057600080fd5b5061043461042f366004613abd565b610aa0565b005b34801561044257600080fd5b50610434610451366004613a60565b610b91565b34801561046257600080fd5b50610434610471366004613afa565b610bc2565b34801561048257600080fd5b5061048b610c28565b6040516103669190613b21565b3480156104a457600080fd5b50610359610c70565b3480156104b957600080fd5b506104346104c8366004613afa565b610c8b565b3480156104d957600080fd5b5061048b603281565b3480156104ee57600080fd5b506104346104fd366004613b2f565b610ce6565b34801561050e57600080fd5b5061048b61051d366004613afa565b611031565b34801561052e57600080fd5b5061048b61053d366004613abd565b6110b0565b34801561054e57600080fd5b506104346111c0565b34801561056357600080fd5b50610434611239565b34801561057857600080fd5b50610434610587366004613b7f565b6112cf565b34801561059857600080fd5b506104346105a7366004613b2f565b6113f2565b3480156105b857600080fd5b5061048b6105c7366004613a60565b611412565b3480156105d857600080fd5b506104346105e7366004613a60565b6115cd565b3480156105f857600080fd5b5061027f54610407906001600160a01b031681565b34801561061957600080fd5b5061062d610628366004613a60565b6115fe565b6040516103669190613bbd565b34801561064657600080fd5b50610407610655366004613a60565b61162a565b34801561066657600080fd5b5061048b6102825481565b34801561067d57600080fd5b5061048b61068c366004613afa565b61165a565b34801561069d57600080fd5b5061043461168c565b3480156106b257600080fd5b5061014254610407906001600160a01b031681565b3480156106d357600080fd5b506104346106e2366004613bcb565b6116c3565b3480156106f357600080fd5b5061013e546001600160a01b0316610407565b34801561071257600080fd5b50610359610721366004613c81565b611851565b34801561073257600080fd5b506103da611a83565b34801561074757600080fd5b50610750611a93565b6040516103669190613d13565b34801561076957600080fd5b5061048b66b1a2bc2ec5000081565b34801561078457600080fd5b50610434610793366004613d36565b611af0565b3480156107a457600080fd5b5061028054610407906001600160a01b031681565b3480156107c557600080fd5b506104346107d4366004613afa565b611c7e565b3480156107e557600080fd5b506104346107f4366004613afa565b611ce4565b34801561080557600080fd5b50610434610814366004613e64565b611d3f565b34801561082557600080fd5b5061014054610407906001600160a01b031681565b34801561084657600080fd5b506103da610855366004613a60565b611f90565b34801561086657600080fd5b50610359610875366004613f22565b61208f565b34801561088657600080fd5b50610434610895366004613afa565b6123d4565b3480156108a657600080fd5b5061048b6102845481565b3480156108bd57600080fd5b506103596108cc366004613fcf565b61243a565b3480156108dd57600080fd5b50610283546103599060ff1681565b3480156108f857600080fd5b50610434610907366004613afa565b61256c565b61035961091a366004613c81565b6125c6565b34801561092b57600080fd5b5061043461093a366004613afa565b61279c565b34801561094b57600080fd5b5061014154610407906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806109b657506109b6826127f1565b92915050565b606061013c80546109cc90614018565b80601f01602080910402602001604051908101604052809291908181526020018280546109f890614018565b8015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b5050505050905090565b6000610a5a826128d4565b610a7f5760405162461bcd60e51b8152600401610a7690614071565b60405180910390fd5b5061ffff16600090815261013b60205260409020546001600160a01b031690565b6000610aab82612906565b90506001600160a01b038116610ad35760405162461bcd60e51b8152600401610a76906140db565b61ffff8216600090815261013b60205260409020546001600160a01b0316331480610b0657506001600160a01b03811633145b610b225760405162461bcd60e51b8152600401610a769061416b565b61ffff8216600090815261013b6020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61013e546001600160a01b03163314610bbc5760405162461bcd60e51b8152600401610a76906141ab565b61028255565b61013e546001600160a01b03163314610bed5760405162461bcd60e51b8152600401610a76906141ab565b61014080546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101438054909216179055565b600080805b60018054610c3a90614018565b9050811015610c6a57610c4c816129e1565b610c5690836141d1565b9150610c636014826141d1565b9050610c2d565b50919050565b60006102845442118015610c8657506102845415155b905090565b61013e546001600160a01b03163314610cb65760405162461bcd60e51b8152600401610a76906141ab565b610280805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038316610d0c5760405162461bcd60e51b8152600401610a7690614241565b6001600160a01b038216610d325760405162461bcd60e51b8152600401610a76906142a9565b61ffff8116600090815261013b60205260409020546001600160a01b0316331480610d6557506001600160a01b03831633145b610d815760405162461bcd60e51b8152600401610a7690614311565b60005b6001600160a01b038416600090815260208190526040902080548391610e3191610dad90614018565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd990614018565b8015610e265780601f10610dfb57610100808354040283529160200191610e26565b820191906000526020600020905b815481529060010190602001808311610e0957829003601f168201915b505050505083612aa7565b61ffff1614158015610e6657506001600160a01b03841660009081526020819052604090208054610e6190614018565b905081105b15610e7d57610e766002826141d1565b9050610d84565b6001600160a01b03841660009081526020819052604090208054610ea090614018565b90508110610ec05760405162461bcd60e51b8152600401610a7690614379565b60005b60018054610ed090614018565b9050811015610f9d57846001600160a01b0316610f7760018054610ef390614018565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1f90614018565b8015610f6c5780601f10610f4157610100808354040283529160200191610f6c565b820191906000526020600020905b815481529060010190602001808311610f4f57829003601f168201915b505050505083612add565b6001600160a01b03161415610f8b57610f9d565b610f966014826141d1565b9050610ec3565b846001600160a01b0316610fb760018054610ef390614018565b6001600160a01b031614610fdd5760405162461bcd60e51b8152600401610a76906143e1565b610fe985828685612b23565b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b6000805b6001805461104290614018565b905081101561109857826001600160a01b031661106560018054610ef390614018565b6001600160a01b031614156110865761107f601482614407565b9392505050565b6110916014826141d1565b9050611035565b60405162461bcd60e51b8152600401610a769061444d565b6001600160a01b038216600090815260208190526040812080546110d390614018565b90506110e083600261445d565b106110fd5760405162461bcd60e51b8152600401610a76906144d4565b6001600160a01b038316600090815260208190526040902080546111b5919061112590614018565b80601f016020809104026020016040519081016040528092919081815260200182805461115190614018565b801561119e5780601f106111735761010080835404028352916020019161119e565b820191906000526020600020905b81548152906001019060200180831161118157829003601f168201915b50505050508360026111b0919061445d565b612aa7565b61ffff169392505050565b61013e546001600160a01b031633146111eb5760405162461bcd60e51b8152600401610a76906141ab565b61028080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff8116740100000000000000000000000000000000000000009182900460ff1615909102179055565b61013e546001600160a01b031633146112645760405162461bcd60e51b8152600401610a76906141ab565b604051600090339047908381818185875af1925050503d80600081146112a6576040519150601f19603f3d011682016040523d82523d6000602084013e6112ab565b606091505b50509050806112cc5760405162461bcd60e51b8152600401610a7690614516565b50565b61ffff8216600090815261013b60205260409020546001600160a01b031633146113b157336000908152602081905260409020805461130d90614018565b905061131a82600261445d565b106113375760405162461bcd60e51b8152600401610a7690614556565b336000908152602081905260409020805483916113579161112590614018565b61ffff16146113785760405162461bcd60e51b8152600401610a76906145be565b60405182906001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590600090a45b5061ffff16600090815261013b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61140d83838360405180602001604052806000815250611d3f565b505050565b600080805b83811161144557611427826129e1565b61143190826141d1565b905061143e6014836141d1565b9150611417565b6114506014836145ce565b915061145b826129e1565b61146590826145ce565b90506115c16000806115016001805461147d90614018565b80601f01602080910402602001604051908101604052809291908181526020018280546114a990614018565b80156114f65780601f106114cb576101008083540402835291602001916114f6565b820191906000526020600020905b8154815290600101906020018083116114d957829003601f168201915b505050505086612add565b6001600160a01b03166001600160a01b03168152602001908152602001600020805461152c90614018565b80601f016020809104026020016040519081016040528092919081815260200182805461155890614018565b80156115a55780601f1061157a576101008083540402835291602001916115a5565b820191906000526020600020905b81548152906001019060200180831161158857829003601f168201915b505050505082866115b691906145ce565b6111b090600261445d565b61ffff16949350505050565b61013e546001600160a01b031633146115f85760405162461bcd60e51b8152600401610a76906141ab565b61028455565b61014681612710811061161057600080fd5b60209182820401919006915054906101000a900460ff1681565b6000611635826128d4565b6116515760405162461bcd60e51b8152600401610a769061463d565b6109b682612906565b6001600160a01b038116600090815260208190526040812080546002919061168190614018565b6109b6929150614407565b61013e546001600160a01b031633146116b75760405162461bcd60e51b8152600401610a76906141ab565b6116c160006131b3565b565b6001600160a01b0384166116e95760405162461bcd60e51b8152600401610a7690614241565b6001600160a01b03821661170f5760405162461bcd60e51b8152600401610a76906142a9565b6001600160a01b038416600090815260208190526040902080546002919061173690614018565b611741929150614407565b811061175f5760405162461bcd60e51b8152600401610a7690614556565b6001600160a01b03841660009081526020819052604081208054611787919061112590614018565b61ffff8116600090815261013b60205260409020549091506001600160a01b03163314806117bd57506001600160a01b03851633145b6117d95760405162461bcd60e51b8152600401610a76906145be565b6117e585858585612b23565b61180485848361ffff1660405180602001604052806000815250613213565b508061ffff16836001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b6000600261013f5414156118775760405162461bcd60e51b8152600401610a769061467f565b600261013f5561013e546001600160a01b031633146118a85760405162461bcd60e51b8152600401610a76906141ab565b6118b0610c70565b6118cc5760405162461bcd60e51b8152600401610a76906146c1565b6102835460ff16156118f05760405162461bcd60e51b8152600401610a7690614703565b6118fc6032600261445d565b82111561191b5760405162461bcd60e51b8152600401610a769061476b565b611927335b848461336b565b600083833342446040516020016119429594939291906147b1565b60405160208183030381529060405280519060200120905060005b611968600285614407565b811015611a625760006119b886868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111b092508691506002905061445d565b9050826119c66020846147ee565b602081106119d6576119d6614806565b1a61014661ffff831661271081106119f0576119f0614806565b602091828204019190066101000a81548160ff021916908360ff160217905550602082611a1d91906147ee565b601f1415611a4f5782604051602001611a36919061481c565b6040516020818303038152906040528051906020012092505b5080611a5a8161482e565b91505061195d565b5050610283805460ff191660019081179091559050600161013f5592915050565b606061013d80546109cc90614018565b611a9b613865565b604080516204e2008101918290529060029061271090826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411611ab65790505050505050905090565b6001600160a01b038216331415611b195760405162461bcd60e51b8152600401610a76906148a1565b3360009081526020819052604081208054611b3390614018565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5f90614018565b8015611bac5780601f10611b8157610100808354040283529160200191611bac565b820191906000526020600020905b815481529060010190602001808311611b8f57829003601f168201915b5050505050905060005b8151811015611c2d5782611bcb576000611bcd565b835b61013b6000611bdc8585612aa7565b61ffff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611c266002826141d1565b9050611bb6565b50826001600160a01b0316336001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3184604051611c7191906139ba565b60405180910390a3505050565b61013e546001600160a01b03163314611ca95760405162461bcd60e51b8152600401610a76906141ab565b61014180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101448054909216179055565b61013e546001600160a01b03163314611d0f5760405162461bcd60e51b8152600401610a76906141ab565b61027f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038416611d655760405162461bcd60e51b8152600401610a7690614241565b6001600160a01b038316611d8b5760405162461bcd60e51b8152600401610a76906142a9565b61ffff8216600090815261013b60205260409020546001600160a01b0316331480611dbe57506001600160a01b03841633145b611dda5760405162461bcd60e51b8152600401610a7690614311565b60005b6001600160a01b038516600090815260208190526040902080548491611e0691610dad90614018565b61ffff1614158015611e3b57506001600160a01b03851660009081526020819052604090208054611e3690614018565b905081105b15611e5257611e4b6002826141d1565b9050611ddd565b6001600160a01b03851660009081526020819052604090208054611e7590614018565b90508110611e955760405162461bcd60e51b8152600401610a7690614379565b60005b60018054611ea590614018565b9050811015611eee57856001600160a01b0316611ec860018054610ef390614018565b6001600160a01b03161415611edc57611eee565b611ee76014826141d1565b9050611e98565b856001600160a01b0316611f0860018054610ef390614018565b6001600160a01b031614611f2e5760405162461bcd60e51b8152600401610a76906143e1565b611f3a86828785612b23565b611f4686868686613213565b5083856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6060611f9f8261ffff166128d4565b611fbb5760405162461bcd60e51b8152600401610a7690614909565b610140546001600160a01b0316611fe057505060408051602081019091526000815290565b610143546001600160a01b0316635cc518ba8361014681612710811061200857612008614806565b602091828204019190069054906101000a900460ff166040518363ffffffff1660e01b815260040161203b929190614919565b60006040518083038186803b15801561205357600080fd5b505afa158015612067573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b6919081019061498c565b6000600261013f5414156120b55760405162461bcd60e51b8152600401610a769061467f565b600261013f8190556120c890859061445d565b86146120e65760405162461bcd60e51b8152600401610a7690614a1f565b6120f133888861336b565b6000878733888842446040516020016121109796959493929190614a7c565b60405160208183030381529060405280519060200120905060005b8581101561235557600061217c8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111b092508691506002905061445d565b610145546040517f6352211e00000000000000000000000000000000000000000000000000000000815291925033916001600160a01b0390911690636352211e906121cb908590600401614ae1565b60206040518083038186803b1580156121e357600080fd5b505afa1580156121f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221b9190614afa565b6001600160a01b0316146122415760405162461bcd60e51b8152600401610a7690614b73565b85858381811061225357612253614806565b905060200201356001146122795760405162461bcd60e51b8152600401610a7690614c01565b600488888481811061228d5761228d614806565b9050602002013561229e9190614c11565b60fc846122ac6020866147ee565b602081106122bc576122bc614806565b6122ca939291901a16614c1e565b6101468261ffff1661271081106122e3576122e3614806565b602091828204019190066101000a81548160ff021916908360ff16021790555060208261231091906147ee565b601f14156123425782604051602001612329919061481c565b6040516020818303038152906040528051906020012092505b508061234d8161482e565b91505061212b565b50610144546001600160a01b0316636b20c45433888888886040518663ffffffff1660e01b815260040161238d959493929190614c4b565b600060405180830381600087803b1580156123a757600080fd5b505af11580156123bb573d6000803e3d6000fd5b505050506001915050600161013f559695505050505050565b61013e546001600160a01b031633146123ff5760405162461bcd60e51b8152600401610a76906141ab565b61014280546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff1992831681179091556101458054909216179055565b6102805460009074010000000000000000000000000000000000000000900460ff166124715761246a83836133da565b90506109b6565b61027f546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c4552791906124bb908690600401613a9b565b60206040518083038186803b1580156124d357600080fd5b505afa1580156124e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250b9190614afa565b6001600160a01b0316826001600160a01b031614806125385750610280546001600160a01b038381169116145b8061255c57506001600160a01b0382166000908152610281602052604090205460ff165b8061107f575061107f83836133da565b61013e546001600160a01b031633146125975760405162461bcd60e51b8152600401610a76906141ab565b6001600160a01b0381166125bd5760405162461bcd60e51b8152600401610a7690614ce4565b6112cc816131b3565b6000600261013f5414156125ec5760405162461bcd60e51b8152600401610a769061467f565b600261013f556125fa610c70565b6126165760405162461bcd60e51b8152600401610a76906146c1565b3466b1a2bc2ec5000061262a600285614407565b612634919061445d565b146126515760405162461bcd60e51b8152600401610a7690614d26565b61028254612660600284614407565b6126693361165a565b61267391906141d1565b11156126915760405162461bcd60e51b8152600401610a7690614d8e565b61269a33611920565b60008383333442446040516020016126b796959493929190614d9e565b60405160208183030381529060405280519060200120905060005b8381101561278a57600061271d86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250612aa7915050565b90508261272b600284614407565b6020811061273b5761273b614806565b1a61014661ffff8316612710811061275557612755614806565b602091828204019190066101000a81548160ff021916908360ff1602179055505060028161278391906141d1565b90506126d2565b506001915050600161013f5592915050565b61013e546001600160a01b031633146127c75760405162461bcd60e51b8152600401610a76906141ab565b6001600160a01b0316600090815261028160205260409020805460ff19811660ff90911615179055565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061288457507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806109b657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146109b6565b600060028261271081106128ea576128ea614806565b602081049091015460ff601f9092166101000a90041692915050565b600080805b6001805461291890614018565b90508110156129da57600061293360018054610ef390614018565b905060005b6001600160a01b0382166000908152602081905260409020805461295b90614018565b90508110156129b1576001600160a01b03821660009081526020819052604090208054879161298d91610dad90614018565b61ffff16141561299f578193506129b1565b6129aa6002826141d1565b9050612938565b506001600160a01b038316156129c757506129da565b506129d36014826141d1565b905061290b565b5092915050565b6000600180546129f090614018565b90508210612a105760405162461bcd60e51b8152600401610a7690614e1b565b6109b661068c60018054612a2390614018565b80601f0160208091040260200160405190810160405280929190818152602001828054612a4f90614018565b8015612a9c5780601f10612a7157610100808354040283529160200191612a9c565b820191906000526020600020905b815481529060010190602001808311612a7f57829003601f168201915b505050505084612add565b6000612ab48260026141d1565b83511015612ad45760405162461bcd60e51b8152600401610a7690614e5d565b50016002015190565b6000612aea8260146141d1565b83511015612b0a5760405162461bcd60e51b8152600401610a7690614e9f565b5001602001516c01000000000000000000000000900490565b836001600160a01b0316612bcd60018054612b3d90614018565b80601f0160208091040260200160405190810160405280929190818152602001828054612b6990614018565b8015612bb65780601f10612b8b57610100808354040283529160200191612bb6565b820191906000526020600020905b815481529060010190602001808311612b9957829003601f168201915b5050505050856014612bc8919061445d565b612add565b6001600160a01b031614612bf35760405162461bcd60e51b8152600401610a7690614f07565b6001600160a01b03821660009081526020819052604090208054612c1690614018565b15159050612c5b5760018260601b604051602001612c35929190614fad565b60405160208183030381529060405260019080519060200190612c59929190613886565b505b6001600160a01b03841660009081526020819052604081208054612d149190612c8390614018565b80601f0160208091040260200160405190810160405280929190818152602001828054612caf90614018565b8015612cfc5780601f10612cd157610100808354040283529160200191612cfc565b820191906000526020600020905b815481529060010190602001808311612cdf57829003601f168201915b505050505083846002612d0f91906141d1565b6134e5565b6001600160a01b0386166000908152602081905260409020805491925090612d3b90614018565b905060021415612f1257612de260018054612d5590614018565b80601f0160208091040260200160405190810160405280929190818152602001828054612d8190614018565b8015612dce5780601f10612da357610100808354040283529160200191612dce565b820191906000526020600020905b815481529060010190602001808311612db157829003601f168201915b50505050506000866014612d0f919061445d565b612eb660018054612df290614018565b80601f0160208091040260200160405190810160405280929190818152602001828054612e1e90614018565b8015612e6b5780601f10612e4057610100808354040283529160200191612e6b565b820191906000526020600020905b815481529060010190602001808311612e4e57829003601f168201915b5050505050866001612e7d91906141d1565b612e8890601461445d565b612e938860016141d1565b612e9e90601461445d565b60018054612eab90614018565b612d0f9291506145ce565b604051602001612ec7929190614fee565b60405160208183030381529060405260019080519060200190612eeb929190613886565b506001600160a01b0385166000908152602081905260408120612f0d9161390a565b6130fb565b6001600160a01b03851660009081526020819052604090208054612fc09190612f3a90614018565b80601f0160208091040260200160405190810160405280929190818152602001828054612f6690614018565b8015612fb35780601f10612f8857610100808354040283529160200191612fb3565b820191906000526020600020905b815481529060010190602001808311612f9657829003601f168201915b50505050506000846134e5565b6001600160a01b038616600090815260208190526040902080546130b09190612fe890614018565b80601f016020809104026020016040519081016040528092919081815260200182805461301490614018565b80156130615780601f1061303657610100808354040283529160200191613061565b820191906000526020600020905b81548152906001019060200180831161304457829003601f168201915b505050505084600261307391906141d1565b6001600160a01b03891660009081526020819052604090208054600291889161309b90614018565b6130a69291506145ce565b612d0f91906145ce565b6040516020016130c1929190614fee565b60408051601f198184030181529181526001600160a01b0387166000908152602081815291902082516130f993919290910190613886565b505b6001600160a01b0383166000908152602081815260409182902091516131249291849101615004565b60408051601f198184030181529181526001600160a01b03851660009081526020818152919020825161315c93919290910190613886565b50613168816000612aa7565b61ffff16836001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b61013e80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b1561335f576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061327090339089908890889060040161500e565b602060405180830381600087803b15801561328a57600080fd5b505af19250505080156132ba575060408051601f3d908101601f191682019092526132b79181019061505d565b60015b613314573d8080156132e8576040519150601f19603f3d011682016040523d82523d6000602084013e6132ed565b606091505b50805161330c5760405162461bcd60e51b8152600401610a76906150d6565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050613363565b5060015b949350505050565b6133768383836135ad565b6133d46000846133bb85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250612aa7915050565b61ffff1660405180602001604052806000815250613213565b50505050565b6001600160a01b0382166000908152602081905260408120805482919061340090614018565b80601f016020809104026020016040519081016040528092919081815260200182805461342c90614018565b80156134795780601f1061344e57610100808354040283529160200191613479565b820191906000526020600020905b81548152906001019060200180831161345c57829003601f168201915b5050505050905060005b815181101561335f57836001600160a01b031661013b60006134a58585612aa7565b61ffff1681526020810191909152604001600020546001600160a01b0316146134d3576000925050506109b6565b6134de6002826141d1565b9050613483565b6060816134f381601f6141d1565b10156135115760405162461bcd60e51b8152600401610a7690615118565b61351b82846141d1565b8451101561353b5760405162461bcd60e51b8152600401610a769061515a565b60608215801561355a57604051915060008252602082016040526135a4565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561359357805183526020928301920161357b565b5050858452601f01601f1916604052505b50949350505050565b806135ca5760405162461bcd60e51b8152600401610a76906151c2565b6135d56002826147ee565b156135f25760405162461bcd60e51b8152600401610a769061522a565b6001600160a01b0383166000908152602081905260409020805461361590614018565b1515905061365a5760018360601b604051602001613634929190614fad565b60405160208183030381529060405260019080519060200190613658929190613886565b505b60005b818110156138015760026136a884848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250612aa7915050565b61ffff1661271081106136bd576136bd614806565b602081049091015460ff601f9092166101000a900416156136f05760405162461bcd60e51b8152600401610a769061526c565b6001600261373585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250612aa7915050565b61ffff16612710811061374a5761374a614806565b602091828204019190066101000a81548160ff0219169083151502179055506137aa83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250612aa7915050565b61ffff16846001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46137fa6002826141d1565b905061365d565b506001600160a01b03831660009081526020818152604091829020915161382d9291859185910161527c565b60408051601f198184030181529181526001600160a01b0385166000908152602081815291902082516133d493919290910190613886565b604051806204e2000160405280612710906020820280368337509192915050565b82805461389290614018565b90600052602060002090601f0160209004810192826138b457600085556138fa565b82601f106138cd57805160ff19168380011785556138fa565b828001600101855582156138fa579182015b828111156138fa5782518255916020019190600101906138df565b50613906929150613940565b5090565b50805461391690614018565b6000825580601f10613926575050565b601f0160209004906000526020600020908101906112cc91905b5b808211156139065760008155600101613941565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b81146112cc57600080fd5b80356109b681613955565b6000602082840312156139a4576139a4600080fd5b60006133638484613984565b8015155b82525050565b602081016109b682846139b0565b61ffff81166139b4565b602081016109b682846139c8565b60005b838110156139fb5781810151838201526020016139e3565b838111156133d45750506000910152565b6000613a16825190565b808452602084019350613a2d8185602086016139e0565b601f01601f19169290920192915050565b6020808252810161107f8184613a0c565b80613979565b80356109b681613a4f565b600060208284031215613a7557613a75600080fd5b60006133638484613a55565b60006001600160a01b0382166109b6565b6139b481613a81565b602081016109b68284613a92565b61397981613a81565b80356109b681613aa9565b60008060408385031215613ad357613ad3600080fd5b6000613adf8585613ab2565b9250506020613af085828601613a55565b9150509250929050565b600060208284031215613b0f57613b0f600080fd5b60006133638484613ab2565b806139b4565b602081016109b68284613b1b565b600080600060608486031215613b4757613b47600080fd5b6000613b538686613ab2565b9350506020613b6486828701613ab2565b9250506040613b7586828701613a55565b9150509250925092565b600080600060608486031215613b9757613b97600080fd5b6000613ba38686613ab2565b9350506020613b6486828701613a55565b60ff81166139b4565b602081016109b68284613bb4565b60008060008060808587031215613be457613be4600080fd5b6000613bf08787613ab2565b9450506020613c0187828801613a55565b9350506040613c1287828801613ab2565b9250506060613c2387828801613a55565b91505092959194509250565b60008083601f840112613c4457613c44600080fd5b50813567ffffffffffffffff811115613c5f57613c5f600080fd5b602083019150836001820283011115613c7a57613c7a600080fd5b9250929050565b60008060208385031215613c9757613c97600080fd5b823567ffffffffffffffff811115613cb157613cb1600080fd5b613cbd85828601613c2f565b92509250509250929050565b613cd382826139b0565b5060200190565b60200190565b6127108160005b82811015613d0c578151613cfb8682613cc9565b955050602082019150600101613ce7565b5050505050565b6204e20081016109b68284613ce0565b801515613979565b80356109b681613d23565b60008060408385031215613d4c57613d4c600080fd5b6000613d588585613ab2565b9250506020613af085828601613d2b565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715613da557613da5613d69565b6040525050565b6000613db760405190565b9050613dc38282613d7f565b919050565b600067ffffffffffffffff821115613de257613de2613d69565b601f19601f83011660200192915050565b82818337506000910152565b6000613e12613e0d84613dc8565b613dac565b905082815260208101848484011115613e2d57613e2d600080fd5b613e38848285613df3565b509392505050565b600082601f830112613e5457613e54600080fd5b8135613363848260208601613dff565b60008060008060808587031215613e7d57613e7d600080fd5b6000613e898787613ab2565b9450506020613e9a87828801613ab2565b9350506040613eab87828801613a55565b925050606085013567ffffffffffffffff811115613ecb57613ecb600080fd5b613c2387828801613e40565b60008083601f840112613eec57613eec600080fd5b50813567ffffffffffffffff811115613f0757613f07600080fd5b602083019150836020820283011115613c7a57613c7a600080fd5b60008060008060008060608789031215613f3e57613f3e600080fd5b863567ffffffffffffffff811115613f5857613f58600080fd5b613f6489828a01613c2f565b9650965050602087013567ffffffffffffffff811115613f8657613f86600080fd5b613f9289828a01613ed7565b9450945050604087013567ffffffffffffffff811115613fb457613fb4600080fd5b613fc089828a01613ed7565b92509250509295509295509295565b60008060408385031215613fe557613fe5600080fd5b6000613ff18585613ab2565b9250506020613af085828601613ab2565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061402c57607f821691505b60208210811415610c6a57610c6a614002565b601c8152602081017f4552433732313a20746f6b656e20646f6573206e6f742065786973740000000081529050613cda565b602080825281016109b68161403f565b602b8152602081017f4552433732313a20617070726f766520717565727920666f72206e6f6e65786981527f7374656e7420746f6b656e000000000000000000000000000000000000000000602082015290505b60400190565b602080825281016109b681614081565b60468152602081017f4552433732313a2063616c6c6572206973206e6f7420746865206f776e65722081527f6e6f7220616e20617070726f766564206f70657261746f7220666f722074686560208201527f20746f6b656e0000000000000000000000000000000000000000000000000000604082015290505b60600190565b602080825281016109b6816140eb565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152613cda565b602080825281016109b68161417b565b634e487b7160e01b600052601160045260246000fd5b600082198211156141e4576141e46141bb565b500190565b60278152602081017f4552433732313a2066726f6d2063616e6e6f7420626520746865207a65726f2081527f6164647265737300000000000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b6816141e9565b60258152602081017f4552433732313a20746f2063616e6e6f7420626520746865207a65726f20616481527f6472657373000000000000000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b681614251565b602d8152602081017f4552433732313a2063616c6c6572206973206e6f7420617070726f766564206681527f6f7220616c6c20746f6b656e7300000000000000000000000000000000000000602082015290506140d5565b602080825281016109b6816142b9565b60238152602081017f4552433732313a2066726f6d20646f6573206e6f74206f776e2074686520746f81527f6b656e0000000000000000000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b681614321565b60228152602081017f4552433732313a2066726f6d206973206e6f7420696e206f776e657273206c6981527f7374000000000000000000000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b681614389565b634e487b7160e01b600052601260045260246000fd5b600082614416576144166143f1565b500490565b60178152602081017f4552433732313a204f776e6572206e6f7420666f756e6400000000000000000081529050613cda565b602080825281016109b68161441b565b6000816000190483118215151615614477576144776141bb565b500290565b60248152602081017f455243373231456e756d657261626c653a20696e646578206f7574206f66207281527f616e676500000000000000000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b68161447c565b60118152602081017f5769746864726177616c206661696c656400000000000000000000000000000081529050613cda565b602080825281016109b6816144e4565b60208082527f4552433732313a20746f6b656e20696e646578206f7574206f662072616e67659101908152613cda565b602080825281016109b681614526565b602c8152602081017f4552433732313a2063616c6c6572206973206e65697468657220617070726f7681527f6564206e6f72206f776e65720000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b681614566565b6000828210156145e0576145e06141bb565b500390565b60298152602081017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b6816145e5565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050613cda565b602080825281016109b68161464d565b60148152602081017f5075626c69632073616c65206e6f74206f70656e00000000000000000000000081529050613cda565b602080825281016109b68161468f565b60138152602081017f446f6e277420626520746f6f206772656564790000000000000000000000000081529050613cda565b602080825281016109b6816146d1565b603f8152602081017f4576656e20696620796f7520617265206120666f756e6465722c20796f75206481527f6f6e277420646573657276652074686174206d616e7920447265616d65727300602082015290506140d5565b602080825281016109b681614713565b6141e4828483613df3565b60006109b68260601b90565b60006109b682614786565b6139b46147a982613a81565b614792565b90565b6147bc81868861477b565b90506147c8818561479d565b6014016147d58184613b1b565b6020016147e28183613b1b565b60200195945050505050565b815b9150600082614801576148016143f1565b500690565b634e487b7160e01b600052603260045260246000fd5b6148268183613b1b565b602001919050565b6000600019821415614842576148426141bb565b5060010190565b60298152602081017f4552433732313a2063616e6e6f7420617070726f76652063616c6c657220617381527f206f70657261746f720000000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b681614849565b60278152602081017f4552433732313a2055524920717565727920666f72206e6f6e6578697374656e81527f7420746f6b656e00000000000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b6816148b1565b604081016149278285613b1b565b61107f6020830184613bb4565b6000614942613e0d84613dc8565b90508281526020810184848401111561495d5761495d600080fd5b613e388482856139e0565b600082601f83011261497c5761497c600080fd5b8151613363848260208601614934565b6000602082840312156149a1576149a1600080fd5b815167ffffffffffffffff8111156149bb576149bb600080fd5b61336384828501614968565b60288152602081017f456163682072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e6479000000000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b6816149c7565b825b925060007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614a6557614a65600080fd5b602083029250614a76838584613df3565b50500190565b614a8781888a61477b565b9050614a93818761479d565b601401614aa1818587614a2f565b9050614aad8184613b1b565b602001614aba8183613b1b565b602001979650505050505050565b60006109b66147ae61ffff841681565b6139b481614ac8565b602081016109b68284614ad8565b80516109b681613aa9565b600060208284031215614b0f57614b0f600080fd5b60006133638484614aef565b60378152602081017f596f752063616e6e6f7420676976652063616e6469657320746f20612072756e81527f6e6572207468617420796f7520646f206e6f74206f776e000000000000000000602082015290506140d5565b602080825281016109b681614b1b565b604f8152602081017f596f75722072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e64792c2077686f206b6e6f7773207768617420636f756c64206860208201527f617070656e206f7468657277697365000000000000000000000000000000000060408201529050614165565b602080825281016109b681614b83565b60ff9081169082166147f0565b60ff8116905060ff8216915060008260ff038211156141e4576141e46141bb565b81835260208301614a31565b60608101614c598288613a92565b8181036020830152614c6c818688614c3f565b90508181036040830152614c81818486614c3f565b979650505050505050565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b681614c8c565b601d8152602081017f596f75206861766520746f2070617920746865206261696c20626f6e6400000081529050613cda565b602080825281016109b681614cf4565b60318152602081017f596f757220686f6d6520697320746f20736d616c6c20746f2077656c636f6d6581527f20736f206d616e7920647265616d657273000000000000000000000000000000602082015290506140d5565b602080825281016109b681614d36565b614da981878961477b565b9050614db5818661479d565b601401614dc28185613b1b565b602001614dcf8184613b1b565b602001614ddc8183613b1b565b6020019695505050505050565b601f8152602081017f4552433732313a206f776e6572496e646578206f7574206f6620626f756e640081529050613cda565b602080825281016109b681614de9565b60148152602081017f746f55696e7431365f6f75744f66426f756e647300000000000000000000000081529050613cda565b602080825281016109b681614e2b565b60158152602081017f746f416464726573735f6f75744f66426f756e6473000000000000000000000081529050613cda565b602080825281016109b681614e6d565b60288152602081017f4552433732313a207472616e736665722066726f6d206164647265737320697381527f20696e76616c6964000000000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b681614eaf565b60008154614f2481614018565b600182168015614f3b5760018114614f4c57614f7c565b60ff19831686528186019350614f7c565b60008581526020902060005b83811015614f7457815488820152600190910190602001614f58565b505081860193505b50505092915050565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000081166139b4565b614fb78184614f17565b9050614fc38183614f85565b60140192915050565b6000614fd6825190565b614fe48185602086016139e0565b9290920192915050565b614ff88184614fcc565b905061107f8183614fcc565b614ff88184614f17565b6080810161501c8287613a92565b6150296020830186613a92565b6150366040830185613b1b565b81810360608301526150488184613a0c565b9695505050505050565b80516109b681613955565b60006020828403121561507257615072600080fd5b60006133638484615052565b60328152602081017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015290506140d5565b602080825281016109b68161507e565b600e8152602081017f736c6963655f6f766572666c6f7700000000000000000000000000000000000081529050613cda565b602080825281016109b6816150e6565b60118152602081017f736c6963655f6f75744f66426f756e647300000000000000000000000000000081529050613cda565b602080825281016109b681615128565b60258152602081017f4552433732313a2063616e6e6f74206d696e742077697468206e6f20746f6b6581527f6e20496473000000000000000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b68161516a565b602a8152602081017f4552433732313a20746f6b656e4964732073686f756c6420626520627974657381527f206f662075696e74313600000000000000000000000000000000000000000000602082015290506140d5565b602080825281016109b6816151d2565b601c8152602081017f4552433732313a20746f6b656e20616c7265616479206578697374730000000081529050613cda565b602080825281016109b68161523a565b6152868185614f17565b905061336381838561477b56fea26469706673582212207047f8f1c985c3694d9688cf4c547fe64b0e361cd8323f0f91ae1d723ce78d1764736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "approve(address,uint256,uint256)": {
        "details": "Approve \"to\" to manage token Id",
        "params": {
          "to": "address The address which will manage the token Id",
          "tokenId": "uint256 The token Id to manage",
          "tokenIndex": "uint256 The index of the token in the owner's list"
        }
      },
      "balanceOf(address)": {
        "details": "There are two bytes per tokenId",
        "params": {
          "owner": "address The address we retrieve the balance for"
        },
        "returns": {
          "_0": "uint256 The number of tokens owned by the address"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getOwnerIndex(address)": {
        "details": "Returns the index of owner in the internal array of owners. Revert if not found.",
        "params": {
          "owner": "address The address we retrieve the index for"
        }
      },
      "getTokenExists()": {
        "details": "Returns the array of bool telling if a token exists or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "Modified for opensea and looksrare pre-approve so users can make truly gas less sales."
      },
      "mintBatchRunnersAccess(bytes,uint256[],uint256[])": {
        "details": "This mint function wraps the safeMintBatch to:      1) check that the minter owns the runner 2) use the candies 3) burn the candies",
        "params": {
          "candyAmounts": "should be an array of 1",
          "candyIds": "the same indexes as above but as a uint8 array",
          "tokenIds": "a bytes interpreted as an array of uint16"
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good      reason to call this function on chain.",
        "params": {
          "tokenId": "uint265 A given token id"
        },
        "returns": {
          "_0": "address The owner of the token."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,uint256,address,uint256)": {
        "details": "Transfer token with minimal computing since all the required data to check is given",
        "params": {
          "from": "address The address which you want to transfer the token from",
          "fromIndex": "uint256 The index of \"from\" in the owners bytes. This is to avoid a search in the array.",
          "to": "address The address which you want to transfer the token to",
          "tokenIndex": "uint256 The index of the token to transfer in the from's token list."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.",
        "params": {
          "_approved": "Whether to add or remove `operator` as an operator.",
          "operator": "The address of the operator to add or remove."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenByIndex(uint256)": {
        "details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
      },
      "totalSupply()": {
        "details": "Returns the total amount of tokens stored by the contract."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "opensea": {
        "details": "Copied from \\@naomsa's contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "flipProxyState(address)": {
        "notice": "Approve the communication and interaction with cross-collection interactions."
      },
      "looksrare()": {
        "notice": "LooksRare marketplace transfer manager."
      },
      "marketplacesApproved()": {
        "notice": "Check if marketplaces pre-approve is enabled."
      },
      "opensea()": {
        "notice": "OpenSea proxy registry."
      },
      "setLooksrare(address)": {
        "notice": "Set looksrare to `looksrare_`."
      },
      "setOpensea(address)": {
        "notice": "Set opensea to `opensea_`."
      },
      "toggleMarketplacesApproved()": {
        "notice": "Toggle pre-approve feature state for sender."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13341,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_tokensByOwner",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 13343,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "owners",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      },
      {
        "astId": 13350,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "tokenExists",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bool)10000_storage"
      },
      {
        "astId": 13354,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "315",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 13356,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_name",
        "offset": 0,
        "slot": "316",
        "type": "t_string_storage"
      },
      {
        "astId": 13358,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_symbol",
        "offset": 0,
        "slot": "317",
        "type": "t_string_storage"
      },
      {
        "astId": 225,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_owner",
        "offset": 0,
        "slot": "318",
        "type": "t_address"
      },
      {
        "astId": 425,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_status",
        "offset": 0,
        "slot": "319",
        "type": "t_uint256"
      },
      {
        "astId": 4183,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "renderingContractAddress",
        "offset": 0,
        "slot": "320",
        "type": "t_address"
      },
      {
        "astId": 4185,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "candyShopAddress",
        "offset": 0,
        "slot": "321",
        "type": "t_address"
      },
      {
        "astId": 4187,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "chainRunnersAddress",
        "offset": 0,
        "slot": "322",
        "type": "t_address"
      },
      {
        "astId": 4190,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "renderer",
        "offset": 0,
        "slot": "323",
        "type": "t_contract(IDreamersRenderer)8130"
      },
      {
        "astId": 4193,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "candyShop",
        "offset": 0,
        "slot": "324",
        "type": "t_contract(ICandyShop)8080"
      },
      {
        "astId": 4196,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "chainRunners",
        "offset": 0,
        "slot": "325",
        "type": "t_contract(IChainRunners)8097"
      },
      {
        "astId": 4200,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "dreamersCandies",
        "offset": 0,
        "slot": "326",
        "type": "t_array(t_uint8)10000_storage"
      },
      {
        "astId": 4206,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "opensea",
        "offset": 0,
        "slot": "639",
        "type": "t_address"
      },
      {
        "astId": 4209,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "looksrare",
        "offset": 0,
        "slot": "640",
        "type": "t_address"
      },
      {
        "astId": 4213,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "marketplacesApproved",
        "offset": 20,
        "slot": "640",
        "type": "t_bool"
      },
      {
        "astId": 4217,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "proxyToApproved",
        "offset": 0,
        "slot": "641",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4319,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "maxDreamersMintPublicSale",
        "offset": 0,
        "slot": "642",
        "type": "t_uint256"
      },
      {
        "astId": 4328,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "foundersMinted",
        "offset": 0,
        "slot": "643",
        "type": "t_bool"
      },
      {
        "astId": 4330,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "publicSaleStartTimestamp",
        "offset": 0,
        "slot": "644",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)10000_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[10000]",
        "numberOfBytes": "10016"
      },
      "t_array(t_uint8)10000_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[10000]",
        "numberOfBytes": "10016"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICandyShop)8080": {
        "encoding": "inplace",
        "label": "contract ICandyShop",
        "numberOfBytes": "20"
      },
      "t_contract(IChainRunners)8097": {
        "encoding": "inplace",
        "label": "contract IChainRunners",
        "numberOfBytes": "20"
      },
      "t_contract(IDreamersRenderer)8130": {
        "encoding": "inplace",
        "label": "contract IDreamersRenderer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}