{
  "address": "0x671175ef467FfeB59b2B3e96f41f7974106bDb11",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        }
      ],
      "name": "BatchMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINT_PUBLIC_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint16[]",
          "name": "tokenIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "candyIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "candyAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "airDropBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candyShopAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainRunnersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dreamers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "candy",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        }
      ],
      "name": "flipProxyState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "looksrare",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplacesApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDreamersMintPublicSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "ownerTokenIndexes",
          "type": "bytes"
        }
      ],
      "name": "mintBatchPublicSale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "ownerTokenIndexes",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "candyIdsBytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "candyIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "candyAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatchRunnersAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "opensea",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_candyShopContractAddress",
          "type": "address"
        }
      ],
      "name": "setCandyShopAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_chainRunnersContractAddress",
          "type": "address"
        }
      ],
      "name": "setChainRunnersContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "looksrare_",
          "type": "address"
        }
      ],
      "name": "setLooksrare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDreamersMintPublicSale",
          "type": "uint256"
        }
      ],
      "name": "setMaxDreamersMintPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "opensea_",
          "type": "address"
        }
      ],
      "name": "setOpensea",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_renderingContractAddress",
          "type": "address"
        }
      ],
      "name": "setRenderingContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleMarketplacesApproved",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xadc2061dd5a96d6b58a69c964f48f2dafaf476a63bd691a07253b89fa16ada5e",
  "receipt": {
    "to": null,
    "from": "0x145247853C6eeA1263757d22C5e8C3A4dBbF48b6",
    "contractAddress": "0x671175ef467FfeB59b2B3e96f41f7974106bDb11",
    "transactionIndex": 19,
    "gasUsed": "4455469",
    "logsBloom": "0x
    "blockHash": "0xdb6d9af29bea4d5f2de69d4d769ef0812c81569ffc824ecb96822e060c4f995c",
    "transactionHash": "0xadc2061dd5a96d6b58a69c964f48f2dafaf476a63bd691a07253b89fa16ada5e",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 10089173,
        "transactionHash": "0xadc2061dd5a96d6b58a69c964f48f2dafaf476a63bd691a07253b89fa16ada5e",
        "address": "0x671175ef467FfeB59b2B3e96f41f7974106bDb11",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000145247853c6eea1263757d22c5e8c3a4dbbf48b6"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0xdb6d9af29bea4d5f2de69d4d769ef0812c81569ffc824ecb96822e060c4f995c"
      }
    ],
    "blockNumber": 10089173,
    "cumulativeGasUsed": "6173874",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Chain Dreamers",
    "DRE"
  ],
  "numDeployments": 3,
  "solcInputHash": "63519b101941059542759d2182eb6c68",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"}],\"name\":\"BatchMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_PUBLIC_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"candyIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"candyAmounts\",\"type\":\"uint256[]\"}],\"name\":\"airDropBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candyShopAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainRunnersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dreamers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"candy\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"flipProxyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"looksrare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplacesApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDreamersMintPublicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ownerTokenIndexes\",\"type\":\"bytes\"}],\"name\":\"mintBatchPublicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ownerTokenIndexes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"candyIdsBytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"candyIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"candyAmounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatchRunnersAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opensea\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candyShopContractAddress\",\"type\":\"address\"}],\"name\":\"setCandyShopAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainRunnersContractAddress\",\"type\":\"address\"}],\"name\":\"setChainRunnersContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"looksrare_\",\"type\":\"address\"}],\"name\":\"setLooksrare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDreamersMintPublicSale\",\"type\":\"uint256\"}],\"name\":\"setMaxDreamersMintPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opensea_\",\"type\":\"address\"}],\"name\":\"setOpensea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_renderingContractAddress\",\"type\":\"address\"}],\"name\":\"setRenderingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMarketplacesApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Modified for opensea and looksrare pre-approve so users can make truly gas less sales.\"},\"mintBatchRunnersAccess(bytes,bytes,bytes,uint256[],uint256[])\":{\"params\":{\"candyAmounts\":\"should be an array of 1\",\"candyIds\":\"the same indexes as above but as a uint8 array\",\"candyIdsBytes\":\"a bytes interpreted as an array of uint8\",\"ownerTokenIndexes\":\"a bytes interpreted as an array of uint16. Given here to avoid indexes computation and save gas\",\"tokenIds\":\"a bytes interpreted as an array of uint16\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"opensea\":{\"details\":\"Copied from ApeRunner's contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"airDropBatch(address,uint16[],uint256[],uint256[])\":{\"notice\":\"Use this to AirDrop the tokens to the owner instead of minting them for lower gas costs.\"},\"flipProxyState(address)\":{\"notice\":\"Approve the communication and interaction with cross-collection interactions.\"},\"looksrare()\":{\"notice\":\"LooksRare marketplace transfer manager.\"},\"marketplacesApproved()\":{\"notice\":\"Check if marketplaces pre-approve is enabled.\"},\"opensea()\":{\"notice\":\"OpenSea proxy registry.\"},\"setLooksrare(address)\":{\"notice\":\"Set looksrare to `looksrare_`.\"},\"setOpensea(address)\":{\"notice\":\"Set opensea to `opensea_`.\"},\"toggleMarketplacesApproved()\":{\"notice\":\"Toggle pre-approve feature state for sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dreamers/ChainDreamers.sol\":\"ChainDreamers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dreamers/ChainDreamers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../tokens/ERC721Enumerable.sol\\\";\\nimport \\\"../interfaces/IDreamersRenderer.sol\\\";\\nimport \\\"../interfaces/ICandyShop.sol\\\";\\nimport \\\"../interfaces/IChainRunners.sol\\\";\\n\\ncontract OpenSeaProxyRegistry {\\n    mapping(address => address) public proxies;\\n}\\n\\ncontract ChainDreamers is ERC721Enumerable, Ownable, ReentrancyGuard {\\n    // Linked contracts\\n    address public renderingContractAddress;\\n    address public candyShopAddress;\\n    address public chainRunnersAddress;\\n    IDreamersRenderer renderer;\\n    ICandyShop candyShop;\\n    IChainRunners chainRunners;\\n\\n    /// @dev Copied from ApeRunner's contract\\n    /// @notice OpenSea proxy registry.\\n    address public opensea;\\n    /// @notice LooksRare marketplace transfer manager.\\n    address public looksrare;\\n    /// @notice Check if marketplaces pre-approve is enabled.\\n    bool public marketplacesApproved = true;\\n\\n    mapping(address => bool) proxyToApproved;\\n\\n    /// @notice Set opensea to `opensea_`.\\n    function setOpensea(address opensea_) external onlyOwner {\\n        opensea = opensea_;\\n    }\\n\\n    /// @notice Set looksrare to `looksrare_`.\\n    function setLooksrare(address looksrare_) external onlyOwner {\\n        looksrare = looksrare_;\\n    }\\n\\n    /// @notice Toggle pre-approve feature state for sender.\\n    function toggleMarketplacesApproved() external onlyOwner {\\n        marketplacesApproved = !marketplacesApproved;\\n    }\\n\\n    /// @notice Approve the communication and interaction with cross-collection interactions.\\n    function flipProxyState(address proxyAddress) public onlyOwner {\\n        proxyToApproved[proxyAddress] = !proxyToApproved[proxyAddress];\\n    }\\n\\n    /// @dev Modified for opensea and looksrare pre-approve so users can make truly gas less sales.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (!marketplacesApproved)\\n            return super.isApprovedForAll(owner, operator);\\n\\n        return\\n            operator == OpenSeaProxyRegistry(opensea).proxies(owner) ||\\n            operator == looksrare ||\\n            proxyToApproved[operator] ||\\n            super.isApprovedForAll(owner, operator);\\n    }\\n\\n    // Constants\\n    uint256 public maxDreamersMintPublicSale;\\n    uint256 public constant MINT_PUBLIC_PRICE = 0.03 ether;\\n\\n    // State variables\\n    uint256 public publicSaleStartTimestamp;\\n\\n    function setPublicSaleTimestamp(uint256 timestamp) external onlyOwner {\\n        publicSaleStartTimestamp = timestamp;\\n    }\\n\\n    function isPublicSaleOpen() public view returns (bool) {\\n        return\\n            block.timestamp > publicSaleStartTimestamp &&\\n            publicSaleStartTimestamp != 0;\\n    }\\n\\n    modifier whenPublicSaleActive() {\\n        require(isPublicSaleOpen(), \\\"Public sale not open\\\");\\n        _;\\n    }\\n\\n    function setRenderingContractAddress(address _renderingContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        renderingContractAddress = _renderingContractAddress;\\n        renderer = IDreamersRenderer(renderingContractAddress);\\n    }\\n\\n    function setCandyShopAddress(address _candyShopContractAddress)\\n        public\\n        onlyOwner\\n    {\\n        candyShopAddress = _candyShopContractAddress;\\n        candyShop = ICandyShop(candyShopAddress);\\n    }\\n\\n    function setMaxDreamersMintPublicSale(uint256 _maxDreamersMintPublicSale)\\n        public\\n        onlyOwner\\n    {\\n        maxDreamersMintPublicSale = _maxDreamersMintPublicSale;\\n    }\\n\\n    function setChainRunnersContractAddress(\\n        address _chainRunnersContractAddress\\n    ) public onlyOwner {\\n        chainRunnersAddress = _chainRunnersContractAddress;\\n        chainRunners = IChainRunners(_chainRunnersContractAddress);\\n    }\\n\\n    constructor(string memory name_, string memory symbol_)\\n        ERC721(name_, symbol_)\\n    {}\\n\\n    /// @notice Use this to AirDrop the tokens to the owner instead of minting them for lower gas costs.\\n    function airDropBatch(\\n        address to,\\n        uint16[] memory tokenIds,\\n        uint256[] memory candyIds,\\n        uint256[] memory candyAmounts\\n    ) external nonReentrant onlyOwner {\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                candyIds,\\n                tokenIds,\\n                msg.sender,\\n                block.timestamp,\\n                block.difficulty,\\n                to\\n            )\\n        );\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(_owners[tokenIds[i]] == address(0), \\\"Token already exists\\\");\\n            _owners[tokenIds[i]] = to;\\n            dreamers[tokenIds[i]] = ChainDreamersTypes.ChainDreamer(\\n                ((uint8(candies[0]) >> 2) << 2) + (uint8(candyIds[i]) % 4)\\n            );\\n            candies >>= 1;\\n        }\\n        _balances[to] += uint16(tokenIds.length);\\n        candyShop.burnBatch(to, candyIds, candyAmounts);\\n    }\\n\\n    /// @param tokenIds a bytes interpreted as an array of uint16\\n    /// @param ownerTokenIndexes a bytes interpreted as an array of uint16. Given here to avoid indexes computation and save gas\\n    /// @param candyIdsBytes a bytes interpreted as an array of uint8\\n    /// @param candyIds the same indexes as above but as a uint8 array\\n    /// @param candyAmounts should be an array of 1\\n    function mintBatchRunnersAccess(\\n        bytes calldata tokenIds,\\n        bytes calldata ownerTokenIndexes,\\n        bytes calldata candyIdsBytes,\\n        uint256[] calldata candyIds,\\n        uint256[] calldata candyAmounts\\n    ) public nonReentrant returns (bool) {\\n        require(\\n            candyIdsBytes.length == candyIds.length,\\n            \\\"Candy ids should have the same length\\\"\\n        );\\n        require(\\n            tokenIds.length == candyIdsBytes.length * 2,\\n            \\\"Each runner needs its own candy\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tokenIds.length; i += 2) {\\n            require(\\n                chainRunners.ownerOf(BytesLib.toUint16(tokenIds, i)) ==\\n                    _msgSender(),\\n                \\\"You cannot give candies to a runner that you do not own\\\"\\n            );\\n            require(\\n                uint8(candyIds[i / 2]) == uint8(candyIdsBytes[i / 2]),\\n                \\\"Candy ids should be the same\\\"\\n            );\\n            require(\\n                candyAmounts[i / 2] == 1,\\n                \\\"Your runner needs one and only one candy, who knows what could happen otherwise\\\"\\n            );\\n        }\\n        _safeMintBatchWithCandies(\\n            _msgSender(),\\n            tokenIds,\\n            ownerTokenIndexes,\\n            candyIdsBytes\\n        );\\n        candyShop.burnBatch(_msgSender(), candyIds, candyAmounts);\\n        return true;\\n    }\\n\\n    function mintBatchPublicSale(\\n        bytes calldata tokenIds,\\n        bytes calldata ownerTokenIndexes\\n    ) public payable nonReentrant whenPublicSaleActive returns (bool) {\\n        require(\\n            (tokenIds.length / 2) * MINT_PUBLIC_PRICE == msg.value,\\n            \\\"You have to pay the bail bond\\\"\\n        );\\n        require(\\n            ERC721.balanceOf(_msgSender()) + tokenIds.length / 2 <=\\n                maxDreamersMintPublicSale,\\n            \\\"Your home is to small to welcome so many dreamers\\\"\\n        );\\n        _safeMintBatch(_msgSender(), tokenIds, ownerTokenIndexes);\\n        return true;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(uint16(_tokenId)),\\n            \\\"ERC721: URI query for nonexistent token\\\"\\n        );\\n\\n        if (renderingContractAddress == address(0)) {\\n            return \\\"\\\";\\n        }\\n\\n        return renderer.tokenURI(_tokenId, dreamers[uint16(_tokenId)]);\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = _msgSender().call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x93809f9510abf61ea808dfa9da45b326f648ae479cd44402e50306a33a5147b8\",\"license\":\"MIT\"},\"contracts/dreamers/ChainDreamersTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ChainDreamersTypes {\\n    struct ChainDreamer {\\n        uint8 candy;\\n    }\\n}\\n\",\"keccak256\":\"0x860fa681ea591f9dc38cc1e02884937f92545bb011fb26672101ef13d9d2d4c8\",\"license\":\"MIT\"},\"contracts/interfaces/ICandyShop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICandyShop {\\n    function burnBatch(\\n        address from,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5149dbb72dc6f0f71424aac31612102da5860753e8e1d973aabe6e448aa2baa6\",\"license\":\"MIT\"},\"contracts/interfaces/IChainRunners.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IChainRunners {\\n    function getDna(uint256 _tokenId) external view returns (uint256);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x2ba2de325b98dfe751091f49497b5cc7c9bfb0d3d0f337b3990dda2cc86d3cef\",\"license\":\"MIT\"},\"contracts/interfaces/IDreamersRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../dreamers/ChainDreamersTypes.sol\\\";\\n\\ninterface IDreamersRenderer {\\n    function tokenURI(\\n        uint256 tokenId,\\n        ChainDreamersTypes.ChainDreamer memory dreamer\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x4e8a35e7b1c1e1aa0cabfa542b131b9f430d2aae11e3f9b9967e428d149a48da\",\"license\":\"MIT\"},\"contracts/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\n// This file is copied from OpenZeppelin with the addition of a _safeMintBatch function tailored for the Dreamers\\n// mechanism.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport \\\"../dreamers/ChainDreamersTypes.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint16;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint16 => address) internal _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint16) internal _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint16 => address) internal _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n    // Mapping from tokenId to Dreamer\\n    mapping(uint256 => ChainDreamersTypes.ChainDreamer) public dreamers;\\n\\n    // Event for batch minting\\n    event BatchMint(address indexed to, bytes indexed tokenIds);\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return uint256(_balances[owner]);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address owner = _owners[uint16(tokenId)];\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: owner query for nonexistent token\\\"\\n        );\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, uint16(tokenId));\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(uint16(tokenId)),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[uint16(tokenId)];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), uint16(tokenId)),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, uint16(tokenId));\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, uint16(tokenId), \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), uint16(tokenId)),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, uint16(tokenId), _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint16 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint16 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint16 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint16 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint16 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    function _safeMintBatchWithCandies(\\n        address to,\\n        bytes calldata tokenIds,\\n        bytes calldata ownerTokenIndexes,\\n        bytes calldata candyIds\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(\\n            tokenIds.length < 512,\\n            \\\"You can mint by batches up to 256 tokens at a time\\\"\\n        );\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                candyIds,\\n                tokenIds,\\n                msg.sender,\\n                msg.value,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n\\n        _beforeBatchMint(to, tokenIds, ownerTokenIndexes);\\n\\n        for (uint256 i = 0; i < tokenIds.length / 2; i++) {\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i * 2);\\n            require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n            _owners[tokenId] = to;\\n            dreamers[tokenId] = ChainDreamersTypes.ChainDreamer(\\n                ((uint8(candies[0]) >> 2) << 2) + (uint8(candyIds[i]) % 4)\\n            );\\n            candies >>= 1;\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n        _balances[to] += uint16(tokenIds.length) / 2;\\n        emit BatchMint(to, tokenIds);\\n\\n        require(\\n            _checkOnERC721Received(\\n                address(0),\\n                to,\\n                BytesLib.toUint16(tokenIds, 0),\\n                \\\"\\\"\\n            ),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    function _safeMintBatch(\\n        address to,\\n        bytes calldata tokenIds,\\n        bytes calldata ownerTokenIndexes\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(\\n            tokenIds.length < 256,\\n            \\\"You can mint by batches up to 256 tokens at a time\\\"\\n        );\\n        bytes32 candies = keccak256(\\n            abi.encodePacked(\\n                tokenIds,\\n                ownerTokenIndexes,\\n                msg.sender,\\n                msg.value,\\n                block.timestamp,\\n                block.difficulty\\n            )\\n        );\\n\\n        _beforeBatchMint(to, tokenIds, ownerTokenIndexes);\\n\\n        for (uint256 i = 0; i < tokenIds.length / 2; i++) {\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i * 2);\\n            require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n            _owners[tokenId] = to;\\n            dreamers[tokenId] = ChainDreamersTypes.ChainDreamer(\\n                uint8(candies[0])\\n            );\\n            candies >>= 1;\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n        _balances[to] += uint16(tokenIds.length) / 2;\\n        emit BatchMint(to, tokenIds);\\n\\n        require(\\n            _checkOnERC721Received(\\n                address(0),\\n                to,\\n                BytesLib.toUint16(tokenIds, 0),\\n                \\\"\\\"\\n            ),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint16 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint16 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint16 tokenId\\n    ) internal virtual {\\n        require(\\n            ERC721.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint16 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint16 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint16 tokenId\\n    ) internal virtual {}\\n\\n    function _beforeBatchMint(\\n        address to,\\n        bytes calldata tokenIds,\\n        bytes calldata ownerTokenIndexes\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x87a63f4f622d37d89b22d58ebfae77ce48397c0e109e818533a07c6b66dd997e\",\"license\":\"MIT\"},\"contracts/tokens/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\n/**\\n * @dev This implementation leverages the fact that there is 10k runners and so at most 10k dreamers as well.\\n *      We then used bytes to stores tokens and indexes and uses uint16 (bytes2) everywhere.\\n *      Using bytes.concat to batch mint will save heaps of gas.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => bytes) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    bytes private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration, two bytes per tokenId (uint16)\\n    bytes private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint16 => uint16) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC721)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            index < ERC721.balanceOf(owner),\\n            \\\"ERC721Enumerable: owner index out of bounds\\\"\\n        );\\n        return BytesLib.toUint16(_ownedTokens[owner], index * 2);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length / 2;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            index < ERC721Enumerable.totalSupply(),\\n            \\\"ERC721Enumerable: global index out of bounds\\\"\\n        );\\n        return BytesLib.toUint16(_allTokens, index * 2);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint16 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            // Token is minted, add it to the global list\\n            uint16 tokenIndex = uint16(_allTokens.length);\\n            _allTokensIndex[tokenId] = tokenIndex;\\n            _allTokens = bytes.concat(_allTokens, bytes2(tokenId));\\n\\n            // Add it to the minter list as well\\n            bytes2 length = bytes2(uint16(_ownedTokens[to].length));\\n            _ownedTokensIndex = bytes.concat(_ownedTokensIndex, length);\\n            _ownedTokens[to] = bytes.concat(_ownedTokens[to], bytes2(tokenId));\\n        } else if (to == address(0)) {\\n            // Token is burnt, remove it from the global list\\n            uint16 tokenIndex = _allTokensIndex[tokenId];\\n\\n            _allTokens = bytes.concat(\\n                BytesLib.slice(_allTokens, 0, tokenIndex),\\n                BytesLib.slice(\\n                    _allTokens,\\n                    tokenIndex + 2,\\n                    _allTokens.length - tokenIndex - 2\\n                )\\n            );\\n\\n            uint16 tokenIndexForOwner = BytesLib.toUint16(\\n                _ownedTokensIndex,\\n                tokenIndex\\n            );\\n\\n            _ownedTokens[from] = bytes.concat(\\n                BytesLib.slice(_ownedTokens[from], 0, tokenIndexForOwner),\\n                BytesLib.slice(\\n                    _ownedTokens[from],\\n                    tokenIndexForOwner + 2,\\n                    _ownedTokens[from].length - tokenIndexForOwner - 2\\n                )\\n            );\\n        } else if (from != to) {\\n            // Get indexes in global bytes and in owner's bytes\\n            uint16 tokenIndex = _allTokensIndex[tokenId];\\n            uint16 tokenIndexForOwner = BytesLib.toUint16(\\n                _ownedTokensIndex,\\n                tokenIndex\\n            );\\n\\n            // Remove from \\\"from\\\" bytes and add to \\\"to\\\" one's\\n            _ownedTokens[from] = bytes.concat(\\n                BytesLib.slice(_ownedTokens[from], 0, tokenIndexForOwner),\\n                BytesLib.slice(\\n                    _ownedTokens[from],\\n                    tokenIndexForOwner + 2,\\n                    _ownedTokens[from].length - tokenIndexForOwner - 2\\n                )\\n            );\\n            bytes2 length = bytes2(uint16(_ownedTokens[to].length));\\n            _ownedTokens[to] = bytes.concat(_ownedTokens[to], bytes2(tokenId));\\n\\n            // Update owner's index\\n            _ownedTokensIndex[tokenIndex] = length[0];\\n            _ownedTokensIndex[tokenIndex + 1] = length[1];\\n        }\\n    }\\n\\n    function _beforeBatchMint(\\n        address to,\\n        bytes calldata tokenIds,\\n        bytes calldata ownerTokenIndexes\\n    ) internal virtual override {\\n        uint16 firstIndex = BytesLib.toUint16(ownerTokenIndexes, 0);\\n        require(\\n            tokenIds.length == ownerTokenIndexes.length,\\n            \\\"ownerIndexes must have the same length as tokenIds\\\"\\n        );\\n        require(\\n            _ownedTokens[to].length == firstIndex * 2,\\n            \\\"The given ownerTokenIndexes do not start from the current owner count\\\"\\n        );\\n\\n        // Add them to the minter list\\n        _ownedTokensIndex = bytes.concat(_ownedTokensIndex, ownerTokenIndexes);\\n        _ownedTokens[to] = bytes.concat(_ownedTokens[to], tokenIds);\\n\\n        // Add tokens to the global list\\n        uint16 tokenIndex = uint16(_allTokens.length);\\n        for (uint16 i = 0; i < tokenIds.length; i += 2) {\\n            require(\\n                BytesLib.toUint16(ownerTokenIndexes, i) == firstIndex + i / 2,\\n                \\\"ownerTokenIndexes must be a sequence\\\"\\n            );\\n            uint16 tokenId = BytesLib.toUint16(tokenIds, i);\\n            _allTokensIndex[tokenId] = tokenIndex + i;\\n        }\\n        _allTokens = bytes.concat(_allTokens, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xe497dd018c6228445f1812523e6028b7d6a40819c73346317aeefbe9057b5b06\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040526014805460ff60a01b1916600160a01b1790553480156200002457600080fd5b5060405162005132380380620051328339810160408190526200004791620002d9565b81518290829062000060906000906020850190620000f6565b50805162000076906001906020840190620000f6565b505050620000936200008d620000a060201b60201c565b620000a4565b50506001600c556200039c565b3390565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805462000104906200036b565b90600052602060002090601f01602090048101928262000128576000855562000173565b82601f106200014357805160ff191683800117855562000173565b8280016001018555821562000173579182015b828111156200017357825182559160200191906001019062000156565b506200018192915062000185565b5090565b5b8082111562000181576000815560010162000186565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b0381118282101715620001da57620001da6200019c565b6040525050565b6000620001ed60405190565b9050620001fb8282620001b2565b919050565b60006001600160401b038211156200021c576200021c6200019c565b601f19601f83011660200192915050565b60005b838110156200024a57818101518382015260200162000230565b838111156200025a576000848401525b50505050565b600062000277620002718462000200565b620001e1565b905082815260208101848484011115620002945762000294600080fd5b620002a18482856200022d565b509392505050565b600082601f830112620002bf57620002bf600080fd5b8151620002d184826020860162000260565b949350505050565b60008060408385031215620002f157620002f1600080fd5b82516001600160401b038111156200030c576200030c600080fd5b6200031a85828601620002a9565b602085015190935090506001600160401b038111156200033d576200033d600080fd5b6200034b85828601620002a9565b9150509250929050565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200038057607f821691505b6020821081141562000396576200039662000355565b50919050565b614d8680620003ac6000396000f3fe6080604052600436106102e05760003560e01c80636b318e6e11610184578063b5fcb339116100d6578063d3d6005b1161008a578063f2fde38b11610064578063f2fde38b146107e5578063f73c814b14610805578063fac913231461082557600080fd5b8063d3d6005b1461078f578063d7822c99146107af578063e985e9c5146107c557600080fd5b8063b88d4fde116100bb578063b88d4fde1461072f578063c074f4121461074f578063c87b56dd1461076f57600080fd5b8063b5fcb339146106ef578063b776c8a61461070f57600080fd5b80638da5cb5b116101385780639c51792a116101125780639c51792a14610694578063a22cb465146106af578063a8e90b57146106cf57600080fd5b80638da5cb5b1461064157806395a97a631461065f57806395d89b411461067f57600080fd5b8063715018a611610169578063715018a6146105ec57806382503c91146106015780638392d8041461062157600080fd5b80636b318e6e146105b657806370a08231146105cc57600080fd5b80631e8858fb1161023d5780633ccfd60b116101f1578063511a9605116101cb578063511a960514610556578063511ed382146105765780636352211e1461059657600080fd5b80633ccfd60b1461050157806342842e0e146105165780634f6ccce71461053657600080fd5b80632a133e35116102225780632a133e35146104b95780632f745c59146104cc57806333c12e17146104ec57600080fd5b80631e8858fb1461047957806323b872dd1461049957600080fd5b8063095ea7b31161029457806312b40a9f1161027957806312b40a9f1461042257806318160ddd146104425780631a6949e31461046457600080fd5b8063095ea7b3146103e05780630d77c7561461040257600080fd5b806306fdde03116102c557806306fdde031461035457806307c5bde314610376578063081812fc146103b357600080fd5b806301ffc9a7146102ec578063026ae1021461032257600080fd5b366102e757005b600080fd5b3480156102f857600080fd5b5061030c6103073660046131ba565b610845565b60405161031991906131e5565b60405180910390f35b34801561032e57600080fd5b5060145461030c9074010000000000000000000000000000000000000000900460ff1681565b34801561036057600080fd5b506103696108a1565b6040516103199190613251565b34801561038257600080fd5b506103a6610391366004613273565b60066020526000908152604090205460ff1681565b604051610319919061329d565b3480156103bf57600080fd5b506103d36103ce366004613273565b610933565b60405161031991906132c5565b3480156103ec57600080fd5b506104006103fb3660046132e7565b610995565b005b34801561040e57600080fd5b5061040061041d366004613273565b610a1b565b34801561042e57600080fd5b5061040061043d366004613324565b610a4a565b34801561044e57600080fd5b50610457610aa0565b604051610319919061334b565b34801561047057600080fd5b5061030c610ac1565b34801561048557600080fd5b50610400610494366004613324565b610ad8565b3480156104a557600080fd5b506104006104b4366004613359565b610b24565b61030c6104c73660046133fb565b610b55565b3480156104d857600080fd5b506104576104e73660046132e7565b610c39565b3480156104f857600080fd5b50610400610d25565b34801561050d57600080fd5b50610400610d9c565b34801561052257600080fd5b50610400610531366004613359565b610e31565b34801561054257600080fd5b50610457610551366004613273565b610e50565b34801561056257600080fd5b50610400610571366004613273565b610e92565b34801561058257600080fd5b506013546103d3906001600160a01b031681565b3480156105a257600080fd5b506103d36105b1366004613273565b610ec1565b3480156105c257600080fd5b5061045760165481565b3480156105d857600080fd5b506104576105e7366004613324565b610efb565b3480156105f857600080fd5b50610400610f43565b34801561060d57600080fd5b5061040061061c366004613601565b610f79565b34801561062d57600080fd5b50600f546103d3906001600160a01b031681565b34801561064d57600080fd5b50600b546001600160a01b03166103d3565b34801561066b57600080fd5b5061030c61067a366004613701565b611249565b34801561068b57600080fd5b50610369611513565b3480156106a057600080fd5b50610457666a94d74f43000081565b3480156106bb57600080fd5b506104006106ca366004613828565b611522565b3480156106db57600080fd5b506014546103d3906001600160a01b031681565b3480156106fb57600080fd5b5061040061070a366004613324565b611531565b34801561071b57600080fd5b5061040061072a366004613324565b611587565b34801561073b57600080fd5b5061040061074a3660046138f2565b6115d3565b34801561075b57600080fd5b50600d546103d3906001600160a01b031681565b34801561077b57600080fd5b5061036961078a366004613273565b61160b565b34801561079b57600080fd5b506104006107aa366004613324565b611724565b3480156107bb57600080fd5b5061045760175481565b3480156107d157600080fd5b5061030c6107e0366004613965565b61177a565b3480156107f157600080fd5b50610400610800366004613324565b6118ed565b34801561081157600080fd5b50610400610820366004613324565b611946565b34801561083157600080fd5b50600e546103d3906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061089b575061089b82611999565b92915050565b6060600080546108b0906139ae565b80601f01602080910402602001604051908101604052809291908181526020018280546108dc906139ae565b80156109295780601f106108fe57610100808354040283529160200191610929565b820191906000526020600020905b81548152906001019060200180831161090c57829003601f168201915b5050505050905090565b61ffff81166000908152600260205260408120546001600160a01b03166109755760405162461bcd60e51b815260040161096c90613a35565b60405180910390fd5b5061ffff166000908152600460205260409020546001600160a01b031690565b60006109a082610ec1565b9050806001600160a01b0316836001600160a01b031614156109d45760405162461bcd60e51b815260040161096c90613a9d565b336001600160a01b03821614806109f057506109f0813361177a565b610a0c5760405162461bcd60e51b815260040161096c90613b05565b610a168383611a7c565b505050565b600b546001600160a01b03163314610a455760405162461bcd60e51b815260040161096c90613b47565b601655565b600b546001600160a01b03163314610a745760405162461bcd60e51b815260040161096c90613b47565b600d80546001600160a01b039092166001600160a01b0319928316811790915560108054909216179055565b6000600260098054610ab1906139ae565b610abc929150613b83565b905090565b600060175442118015610abc575050601754151590565b600b546001600160a01b03163314610b025760405162461bcd60e51b815260040161096c90613b47565b601480546001600160a01b0319166001600160a01b0392909216919091179055565b610b2e3382611aed565b610b4a5760405162461bcd60e51b815260040161096c90613bf3565b610a16838383611b8c565b60006002600c541415610b7a5760405162461bcd60e51b815260040161096c90613c35565b6002600c55610b87610ac1565b610ba35760405162461bcd60e51b815260040161096c90613c77565b34666a94d74f430000610bb7600287613b83565b610bc19190613c87565b14610bde5760405162461bcd60e51b815260040161096c90613cd8565b601654610bec600286613b83565b610bf533610efb565b610bff9190613ce8565b1115610c1d5760405162461bcd60e51b815260040161096c90613d58565b610c2a3386868686611cf5565b50600180600c55949350505050565b6000610c4483610efb565b8210610c625760405162461bcd60e51b815260040161096c90613dc0565b6001600160a01b03831660009081526007602052604090208054610d1a9190610c8a906139ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb6906139ae565b8015610d035780601f10610cd857610100808354040283529160200191610d03565b820191906000526020600020905b815481529060010190602001808311610ce657829003601f168201915b5050505050836002610d159190613c87565b611fdc565b61ffff169392505050565b600b546001600160a01b03163314610d4f5760405162461bcd60e51b815260040161096c90613b47565b601480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff8116740100000000000000000000000000000000000000009182900460ff1615909102179055565b600b546001600160a01b03163314610dc65760405162461bcd60e51b815260040161096c90613b47565b604051600090339047908381818185875af1925050503d8060008114610e08576040519150601f19603f3d011682016040523d82523d6000602084013e610e0d565b606091505b5050905080610e2e5760405162461bcd60e51b815260040161096c90613e02565b50565b610a1683838361ffff16604051806020016040528060008152506115d3565b6000610e5a610aa0565b8210610e785760405162461bcd60e51b815260040161096c90613e6a565b610e8860098054610c8a906139ae565b61ffff1692915050565b600b546001600160a01b03163314610ebc5760405162461bcd60e51b815260040161096c90613b47565b601755565b61ffff81166000908152600260205260408120546001600160a01b03168061089b5760405162461bcd60e51b815260040161096c90613ed2565b60006001600160a01b038216610f235760405162461bcd60e51b815260040161096c90613f3a565b506001600160a01b031660009081526003602052604090205461ffff1690565b600b546001600160a01b03163314610f6d5760405162461bcd60e51b815260040161096c90613b47565b610f776000612012565b565b6002600c541415610f9c5760405162461bcd60e51b815260040161096c90613c35565b6002600c55600b546001600160a01b03163314610fcb5760405162461bcd60e51b815260040161096c90613b47565b6000828433424489604051602001610fe896959493929190614010565b60405160208183030381529060405280519060200120905060005b84518110156111715760006001600160a01b03166002600087848151811061102d5761102d614066565b60209081029190910181015161ffff168252810191909152604001600020546001600160a01b0316146110725760405162461bcd60e51b815260040161096c906140ae565b856002600087848151811061108957611089614066565b602002602001015161ffff1661ffff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604051806020016040528060048684815181106110ea576110ea614066565b60200260200101516110fc91906140be565b61110e906103fc600087901a166140d9565b60ff168152506006600087848151811061112a5761112a614066565b60209081029190910181015161ffff1682528101919091526040016000209051815460ff191660ff90911617905560019190911c9080611169816140fa565b915050611003565b5083516001600160a01b038616600090815260036020526040812080549091906111a090849061ffff16614115565b825461ffff9182166101009390930a9283029190920219909116179055506011546040517f6b20c4540000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690636b20c4549061120b90889087908790600401614176565b600060405180830381600087803b15801561122557600080fd5b505af1158015611239573d6000803e3d6000fd5b50506001600c5550505050505050565b60006002600c54141561126e5760405162461bcd60e51b815260040161096c90613c35565b6002600c558584146112925760405162461bcd60e51b815260040161096c9061420b565b61129d866002613c87565b8a146112bb5760405162461bcd60e51b815260040161096c9061424d565b60005b8a81101561148457336001600160a01b0316601260009054906101000a90046001600160a01b03166001600160a01b0316636352211e6113358f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250611fdc915050565b6040518263ffffffff1660e01b81526004016113519190614276565b60206040518083038186803b15801561136957600080fd5b505afa15801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a1919061428f565b6001600160a01b0316146113c75760405162461bcd60e51b815260040161096c90614308565b87876113d4600284613b83565b8181106113e3576113e3614066565b919091013560f81c905086866113fa600285613b83565b81811061140957611409614066565b9050602002013560ff16146114305760405162461bcd60e51b815260040161096c9061434a565b838361143d600284613b83565b81811061144c5761144c614066565b905060200201356001146114725760405162461bcd60e51b815260040161096c906143da565b61147d600282613ce8565b90506112be565b50611494338c8c8c8c8c8c612064565b6011546001600160a01b0316636b20c45433878787876040518663ffffffff1660e01b81526004016114ca95949392919061443c565b600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b50505050600190506001600c559a9950505050505050505050565b6060600180546108b0906139ae565b61152d338383612386565b5050565b600b546001600160a01b0316331461155b5760405162461bcd60e51b815260040161096c90613b47565b600e80546001600160a01b039092166001600160a01b0319928316811790915560118054909216179055565b600b546001600160a01b031633146115b15760405162461bcd60e51b815260040161096c90613b47565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6115dd3383611aed565b6115f95760405162461bcd60e51b815260040161096c90613bf3565b61160584848484612429565b50505050565b60606116328261ffff166000908152600260205260409020546001600160a01b0316151590565b61164e5760405162461bcd60e51b815260040161096c906144d5565b600d546001600160a01b031661167257505060408051602081019091526000815290565b60105461ffff83166000908152600660205260409081902090517f48a621a90000000000000000000000000000000000000000000000000000000081526001600160a01b03909216916348a621a9916116d091869190600401614507565b60006040518083038186803b1580156116e857600080fd5b505afa1580156116fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261089b919081019061457a565b600b546001600160a01b0316331461174e5760405162461bcd60e51b815260040161096c90613b47565b600f80546001600160a01b039092166001600160a01b0319928316811790915560128054909216179055565b60145460009074010000000000000000000000000000000000000000900460ff166117ce57506001600160a01b0382811660009081526005602090815260408083209385168352929052205460ff1661089b565b6013546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c4552791906118179086906004016132c5565b60206040518083038186803b15801561182f57600080fd5b505afa158015611843573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611867919061428f565b6001600160a01b0316826001600160a01b0316148061189357506014546001600160a01b038381169116145b806118b657506001600160a01b03821660009081526015602052604090205460ff165b806118e657506001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff165b9392505050565b600b546001600160a01b031633146119175760405162461bcd60e51b815260040161096c90613b47565b6001600160a01b03811661193d5760405162461bcd60e51b815260040161096c9061460d565b610e2e81612012565b600b546001600160a01b031633146119705760405162461bcd60e51b815260040161096c90613b47565b6001600160a01b03166000908152601560205260409020805460ff19811660ff90911615179055565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611a2c57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061089b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461089b565b61ffff8116600081815260046020526040902080546001600160a01b0319166001600160a01b038516908117909155611ab482610ec1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61ffff81166000908152600260205260408120546001600160a01b0316611b265760405162461bcd60e51b815260040161096c90614675565b6000611b358361ffff16610ec1565b9050806001600160a01b0316846001600160a01b03161480611b745750836001600160a01b0316611b698461ffff16610933565b6001600160a01b0316145b80611b845750611b84818561177a565b949350505050565b826001600160a01b0316611ba38261ffff16610ec1565b6001600160a01b031614611bc95760405162461bcd60e51b815260040161096c906146dd565b6001600160a01b038216611bef5760405162461bcd60e51b815260040161096c90614745565b611bfa83838361245c565b611c05600082611a7c565b6001600160a01b0383166000908152600360205260408120805460019290611c3290849061ffff16614755565b82546101009290920a61ffff8181021990931691831602179091556001600160a01b03841660009081526003602052604081208054600194509092611c7991859116614115565b82546101009290920a61ffff818102199093169183160217909155821660008181526002602052604080822080546001600160a01b0319166001600160a01b0388811691821790925591519394509092908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038516611d1b5760405162461bcd60e51b815260040161096c906147a8565b6101008310611d3c5760405162461bcd60e51b815260040161096c90614810565b60008484848433344244604051602001611d5d98979695949392919061482b565b604051602081830303815290604052805190602001209050611d828686868686612c0d565b60005b611d90600286613b83565b811015611ec1576000611de087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d15925086915060029050613c87565b9050611e078161ffff166000908152600260205260409020546001600160a01b0316151590565b15611e245760405162461bcd60e51b815260040161096c906148b7565b61ffff8116600081815260026020908152604080832080546001600160a01b0319166001600160a01b038e169081179091558151808401835288851a815285855260069093528184209251835460ff191660ff909116179092555160019690961c959091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45080611eb9816140fa565b915050611d85565b50611ecd6002856148c7565b6001600160a01b03871660009081526003602052604081208054909190611ef990849061ffff16614115565b92506101000a81548161ffff021916908361ffff1602179055508484604051611f239291906148d5565b604051908190038120906001600160a01b038816907f8af827b1e5b28d31f4e58c98834e77a022ec56ea126a1bc51c28f4d24b88a81990600090a3611fb8600087611fa388888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611fdc915050565b60405180602001604052806000815250612ec8565b611fd45760405162461bcd60e51b815260040161096c90614938565b505050505050565b6000611fe9826002613ce8565b835110156120095760405162461bcd60e51b815260040161096c9061497a565b50016002015190565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03871661208a5760405162461bcd60e51b815260040161096c906147a8565b61020085106120ab5760405162461bcd60e51b815260040161096c90614810565b600082828888333442446040516020016120cc98979695949392919061482b565b6040516020818303038152906040528051906020012090506120f18888888888612c0d565b60005b6120ff600288613b83565b81101561227e57600061214f89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d15925086915060029050613c87565b90506121768161ffff166000908152600260205260409020546001600160a01b0316151590565b156121935760405162461bcd60e51b815260040161096c906148b7565b61ffff811660009081526002602090815260409182902080546001600160a01b0319166001600160a01b038e1617905581519081019091528060048787868181106121e0576121e0614066565b6121f19392013560f81c90506140be565b612203906103fc600088901a166140d9565b60ff90811690915261ffff83166000818152600660205260408082209451855460ff1916941693909317909355905160019590951c9490916001600160a01b038d16917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45080612276816140fa565b9150506120f4565b5061228a6002876148c7565b6001600160a01b038916600090815260036020526040812080549091906122b690849061ffff16614115565b92506101000a81548161ffff021916908361ffff16021790555086866040516122e09291906148d5565b604051908190038120906001600160a01b038a16907f8af827b1e5b28d31f4e58c98834e77a022ec56ea126a1bc51c28f4d24b88a81990600090a3612360600089611fa38a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611fdc915050565b61237c5760405162461bcd60e51b815260040161096c90614938565b5050505050505050565b816001600160a01b0316836001600160a01b031614156123b85760405162461bcd60e51b815260040161096c906149bc565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319061241c9085906131e5565b60405180910390a3505050565b612434848484611b8c565b61244084848484612ec8565b6116055760405162461bcd60e51b815260040161096c90614938565b6001600160a01b0383166125ab57600060098054612479906139ae565b61ffff8481166000908152600a6020908152604091829020805461ffff191693851693909317909255519193506124ba925060099160f086901b9101614a62565b604051602081830303815290604052600990805190602001906124de9291906130e7565b506001600160a01b03831660009081526007602052604081208054612502906139ae565b905060f01b905060088160405160200161251d929190614a62565b604051602081830303815290604052600890805190602001906125419291906130e7565b506001600160a01b0384166000908152600760209081526040918290209151612571929160f087901b9101614a62565b60408051601f198184030181529181526001600160a01b0386166000908152600760209081529190208251611fd4939192909101906130e7565b6001600160a01b03821661296e5761ffff8082166000908152600a602052604090205460098054919092169161266e916125e4906139ae565b80601f0160208091040260200160405190810160405280929190818152602001828054612610906139ae565b801561265d5780601f106126325761010080835404028352916020019161265d565b820191906000526020600020905b81548152906001019060200180831161264057829003601f168201915b505050505060008361ffff1661301f565b61273b6009805461267e906139ae565b80601f01602080910402602001604051908101604052809291908181526020018280546126aa906139ae565b80156126f75780601f106126cc576101008083540402835291602001916126f7565b820191906000526020600020905b8154815290600101906020018083116126da57829003601f168201915b50505050508360026127099190614115565b61ffff1660028561ffff1660098054612721906139ae565b61272c929150614a81565b6127369190614a81565b61301f565b60405160200161274c929190614aa9565b604051602081830303815290604052600990805190602001906127709291906130e7565b50600061280b60088054612783906139ae565b80601f01602080910402602001604051908101604052809291908181526020018280546127af906139ae565b80156127fc5780601f106127d1576101008083540402835291602001916127fc565b820191906000526020600020905b8154815290600101906020018083116127df57829003601f168201915b50505050508361ffff16611fdc565b6001600160a01b03861660009081526007602052604090208054919250612835916125e4906139ae565b6001600160a01b03861660009081526007602052604090208054612923919061285d906139ae565b80601f0160208091040260200160405190810160405280929190818152602001828054612889906139ae565b80156128d65780601f106128ab576101008083540402835291602001916128d6565b820191906000526020600020905b8154815290600101906020018083116128b957829003601f168201915b50505050508360026128e89190614115565b61ffff1660028561ffff16600760008c6001600160a01b03166001600160a01b031681526020019081526020016000208054612721906139ae565b604051602001612934929190614aa9565b60408051601f198184030181529181526001600160a01b0387166000908152600760209081529190208251611fd4939192909101906130e7565b816001600160a01b0316836001600160a01b031614610a165761ffff8082166000908152600a60205260408120546008805491909316926129b291612783906139ae565b6001600160a01b038616600090815260076020526040902080549192506129dc916125e4906139ae565b6001600160a01b03861660009081526007602052604090208054612a04919061285d906139ae565b604051602001612a15929190614aa9565b60408051601f198184030181529181526001600160a01b0387166000908152600760209081529190208251612a4f939192909101906130e7565b506001600160a01b03841660009081526007602052604081208054612a73906139ae565b905060f01b905060076000866001600160a01b03166001600160a01b031681526020019081526020016000208460f01b604051602001612ab4929190614a62565b60408051601f198184030181529181526001600160a01b0387166000908152600760209081529190208251612aee939192909101906130e7565b508060001a60f81b60088461ffff168154612b08906139ae565b8110612b1657612b16614066565b815460011615612b355790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555080600160028110612b8057612b80614066565b1a60f81b6008612b91856001614115565b61ffff168154612ba0906139ae565b8110612bae57612bae614066565b815460011615612bcd5790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f010000000000000000000000000000000000000000000000000000000000000084040217905550505050505050565b6000612c4e83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611fdc915050565b9050838214612c6f5760405162461bcd60e51b815260040161096c90614b17565b612c7a816002614b27565b6001600160a01b0387166000908152600760205260409020805461ffff9290921691612ca5906139ae565b905014612cc45760405162461bcd60e51b815260040161096c90614bcd565b60088383604051602001612cda93929190614bdd565b60405160208183030381529060405260089080519060200190612cfe9291906130e7565b506001600160a01b0386166000908152600760209081526040918290209151612d2c92918891889101614bdd565b60408051601f198184030181529181526001600160a01b0388166000908152600760209081529190208251612d66939192909101906130e7565b50600060098054612d76906139ae565b9050905060005b61ffff8116861115612e8d57612d946002826148c7565b612d9e9084614115565b61ffff16612de686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505061ffff85169050611fdc565b61ffff1614612e075760405162461bcd60e51b815260040161096c90614c4c565b6000612e4d88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505061ffff85169050611fdc565b9050612e598284614115565b61ffff9182166000908152600a60205260409020805461ffff191691909216179055612e86600282614115565b9050612d7d565b5060098686604051602001612ea493929190614bdd565b6040516020818303038152906040526009908051906020019061237c9291906130e7565b60006001600160a01b0384163b15613014576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290612f25903390899088908890600401614c5c565b602060405180830381600087803b158015612f3f57600080fd5b505af1925050508015612f6f575060408051601f3d908101601f19168201909252612f6c91810190614cab565b60015b612fc9573d808015612f9d576040519150601f19603f3d011682016040523d82523d6000602084013e612fa2565b606091505b508051612fc15760405162461bcd60e51b815260040161096c90614938565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611b84565b506001949350505050565b60608161302d81601f613ce8565b101561304b5760405162461bcd60e51b815260040161096c90614cfe565b6130558284613ce8565b845110156130755760405162461bcd60e51b815260040161096c90614d40565b60608215801561309457604051915060008252602082016040526130de565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156130cd5780518352602092830192016130b5565b5050858452601f01601f1916604052505b50949350505050565b8280546130f3906139ae565b90600052602060002090601f016020900481019282613115576000855561315b565b82601f1061312e57805160ff191683800117855561315b565b8280016001018555821561315b579182015b8281111561315b578251825591602001919060010190613140565b5061316792915061316b565b5090565b5b80821115613167576000815560010161316c565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b8114610e2e57600080fd5b803561089b81613180565b6000602082840312156131cf576131cf600080fd5b6000611b8484846131af565b8015155b82525050565b6020810161089b82846131db565b60005b8381101561320e5781810151838201526020016131f6565b838111156116055750506000910152565b6000613229825190565b8084526020840193506132408185602086016131f3565b601f01601f19169290920192915050565b602080825281016118e6818461321f565b806131a4565b803561089b81613262565b60006020828403121561328857613288600080fd5b6000611b848484613268565b60ff81166131df565b6020810161089b8284613294565b60006001600160a01b03821661089b565b6131df816132ab565b6020810161089b82846132bc565b6131a4816132ab565b803561089b816132d3565b600080604083850312156132fd576132fd600080fd5b600061330985856132dc565b925050602061331a85828601613268565b9150509250929050565b60006020828403121561333957613339600080fd5b6000611b8484846132dc565b806131df565b6020810161089b8284613345565b60008060006060848603121561337157613371600080fd5b600061337d86866132dc565b935050602061338e868287016132dc565b925050604061339f86828701613268565b9150509250925092565b60008083601f8401126133be576133be600080fd5b50813567ffffffffffffffff8111156133d9576133d9600080fd5b6020830191508360018202830111156133f4576133f4600080fd5b9250929050565b6000806000806040858703121561341457613414600080fd5b843567ffffffffffffffff81111561342e5761342e600080fd5b61343a878288016133a9565b9450945050602085013567ffffffffffffffff81111561345c5761345c600080fd5b613468878288016133a9565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156134b0576134b0613474565b6040525050565b60006134c260405190565b90506134ce828261348a565b919050565b600067ffffffffffffffff8211156134ed576134ed613474565b5060209081020190565b61ffff81166131a4565b803561089b816134f7565b600061351f61351a846134d3565b6134b7565b8381529050602080820190840283018581111561353e5761353e600080fd5b835b81811015613560576135528782613501565b835260209283019201613540565b5050509392505050565b600082601f83011261357e5761357e600080fd5b8135611b8484826020860161350c565b600061359c61351a846134d3565b838152905060208082019084028301858111156135bb576135bb600080fd5b835b81811015613560576135cf8782613268565b8352602092830192016135bd565b600082601f8301126135f1576135f1600080fd5b8135611b8484826020860161358e565b6000806000806080858703121561361a5761361a600080fd5b600061362687876132dc565b945050602085013567ffffffffffffffff81111561364657613646600080fd5b6136528782880161356a565b935050604085013567ffffffffffffffff81111561367257613672600080fd5b61367e878288016135dd565b925050606085013567ffffffffffffffff81111561369e5761369e600080fd5b6136aa878288016135dd565b91505092959194509250565b60008083601f8401126136cb576136cb600080fd5b50813567ffffffffffffffff8111156136e6576136e6600080fd5b6020830191508360208202830111156133f4576133f4600080fd5b60008060008060008060008060008060a08b8d03121561372357613723600080fd5b8a3567ffffffffffffffff81111561373d5761373d600080fd5b6137498d828e016133a9565b9a509a505060208b013567ffffffffffffffff81111561376b5761376b600080fd5b6137778d828e016133a9565b985098505060408b013567ffffffffffffffff81111561379957613799600080fd5b6137a58d828e016133a9565b965096505060608b013567ffffffffffffffff8111156137c7576137c7600080fd5b6137d38d828e016136b6565b945094505060808b013567ffffffffffffffff8111156137f5576137f5600080fd5b6138018d828e016136b6565b92509250509295989b9194979a5092959850565b8015156131a4565b803561089b81613815565b6000806040838503121561383e5761383e600080fd5b600061384a85856132dc565b925050602061331a8582860161381d565b600067ffffffffffffffff82111561387557613875613474565b601f19601f83011660200192915050565b82818337506000910152565b60006138a061351a8461385b565b9050828152602081018484840111156138bb576138bb600080fd5b6138c6848285613886565b509392505050565b600082601f8301126138e2576138e2600080fd5b8135611b84848260208601613892565b6000806000806080858703121561390b5761390b600080fd5b600061391787876132dc565b9450506020613928878288016132dc565b935050604061393987828801613268565b925050606085013567ffffffffffffffff81111561395957613959600080fd5b6136aa878288016138ce565b6000806040838503121561397b5761397b600080fd5b600061398785856132dc565b925050602061331a858286016132dc565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806139c257607f821691505b602082108114156139d5576139d5613998565b50919050565b602c8152602081017f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161089b816139db565b60218152602081017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6581527f720000000000000000000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613a45565b60388152602081017f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060208201529050613a2f565b6020808252810161089b81613aad565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b6020808252810161089b81613b15565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b815b9150600082613b9657613b96613b57565b500490565b60318152602081017f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f81527f776e6572206e6f7220617070726f76656400000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613b9b565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050613b41565b6020808252810161089b81613c03565b60148152602081017f5075626c69632073616c65206e6f74206f70656e00000000000000000000000081529050613b41565b6020808252810161089b81613c45565b6000816000190483118215151615613ca157613ca1613b6d565b500290565b601d8152602081017f596f75206861766520746f2070617920746865206261696c20626f6e6400000081529050613b41565b6020808252810161089b81613ca6565b60008219821115613cfb57613cfb613b6d565b500190565b60318152602081017f596f757220686f6d6520697320746f20736d616c6c20746f2077656c636f6d6581527f20736f206d616e7920647265616d65727300000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613d00565b602b8152602081017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581527f74206f6620626f756e647300000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613d68565b60118152602081017f5769746864726177616c206661696c656400000000000000000000000000000081529050613b41565b6020808252810161089b81613dd0565b602c8152602081017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81527f7574206f6620626f756e6473000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613e12565b60298152602081017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481527f656e7420746f6b656e000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613e7a565b602a8152602081017f4552433732313a2062616c616e636520717565727920666f7220746865207a6581527f726f20616464726573730000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613ee2565b613f548282613345565b5060200190565b6000613f65825190565b6020830160005b82811015613f91578151613f808782613f4a565b965050602082019150600101613f6c565b5093949350505050565b61ffff81166131df565b613f548282613f9b565b6000613fb9825190565b6020830160005b82811015613f91578151613fd48782613fa5565b965050602082019150600101613fc0565b600061089b8260601b90565b600061089b82613fe5565b6131df614008826132ab565b613ff1565b90565b61401a8188613f5b565b90506140268187613faf565b90506140328186613ffc565b60140161403f8185613345565b60200161404c8184613345565b6020016140598183613ffc565b6014019695505050505050565b634e487b7160e01b600052603260045260246000fd5b60148152602081017f546f6b656e20616c72656164792065786973747300000000000000000000000081529050613b41565b6020808252810161089b8161407c565b60ff91821691166000826140d4576140d4613b57565b500690565b60ff8116905060ff8216915060008260ff03821115613cfb57613cfb613b6d565b600060001982141561410e5761410e613b6d565b5060010190565b61ffff8116905061ffff8216915060008261ffff03821115613cfb57613cfb613b6d565b6000614143825190565b808452602093840193830160005b82811015613f915781516141658782613f4a565b965050602082019150600101614151565b6060810161418482866132bc565b81810360208301526141968185614139565b905081810360408301526141aa8184614139565b95945050505050565b60258152602081017f43616e6479206964732073686f756c642068617665207468652073616d65206c81527f656e67746800000000000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b816141b3565b601f8152602081017f456163682072756e6e6572206e6565647320697473206f776e2063616e64790081529050613b41565b6020808252810161089b8161421b565b600061089b61400d61ffff841681565b6131df8161425d565b6020810161089b828461426d565b805161089b816132d3565b6000602082840312156142a4576142a4600080fd5b6000611b848484614284565b60378152602081017f596f752063616e6e6f7420676976652063616e6469657320746f20612072756e81527f6e6572207468617420796f7520646f206e6f74206f776e00000000000000000060208201529050613a2f565b6020808252810161089b816142b0565b601c8152602081017f43616e6479206964732073686f756c64206265207468652073616d650000000081529050613b41565b6020808252810161089b81614318565b604f8152602081017f596f75722072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e64792c2077686f206b6e6f7773207768617420636f756c64206860208201527f617070656e206f74686572776973650000000000000000000000000000000000604082015290505b60600190565b6020808252810161089b8161435a565b81835260208301925060007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561442557614425600080fd5b602083029250614436838584613886565b50500190565b6060810161444a82886132bc565b818103602083015261445d8186886143ea565b905081810360408301526144728184866143ea565b979650505050505050565b60278152602081017f4552433732313a2055524920717565727920666f72206e6f6e6578697374656e81527f7420746f6b656e0000000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b8161447d565b600060ff821661089b565b80546144fb816144e5565b9050610a168382613294565b604081016145158285613345565b6118e660208301846144f0565b600061453061351a8461385b565b90508281526020810184848401111561454b5761454b600080fd5b6138c68482856131f3565b600082601f83011261456a5761456a600080fd5b8151611b84848260208601614522565b60006020828403121561458f5761458f600080fd5b815167ffffffffffffffff8111156145a9576145a9600080fd5b611b8484828501614556565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b816145b5565b602c8152602081017f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881527f697374656e7420746f6b656e000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b8161461d565b60298152602081017f4552433732313a207472616e73666572206f6620746f6b656e2074686174206981527f73206e6f74206f776e000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81614685565b60248152602081017f4552433732313a207472616e7366657220746f20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b816146ed565b61ffff9081169082165b915060008282101561477357614773613b6d565b500390565b60208082527f4552433732313a206d696e7420746f20746865207a65726f20616464726573739101908152613b41565b6020808252810161089b81614778565b60328152602081017f596f752063616e206d696e74206279206261746368657320757020746f20323581527f3620746f6b656e7320617420612074696d65000000000000000000000000000060208201529050613a2f565b6020808252810161089b816147b8565b613cfb828483613886565b61483681898b614820565b9050614843818789614820565b905061484f8186613ffc565b60140161485c8185613345565b6020016148698184613345565b6020016148768183613345565b60200198975050505050505050565b601c8152602081017f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081529050613b41565b6020808252810161089b81614885565b61ffff908116908216613b85565b6118e6818385614820565b60328152602081017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e746572000000000000000000000000000060208201529050613a2f565b6020808252810161089b816148e0565b60148152602081017f746f55696e7431365f6f75744f66426f756e647300000000000000000000000081529050613b41565b6020808252810161089b81614948565b60198152602081017f4552433732313a20617070726f766520746f2063616c6c65720000000000000081529050613b41565b6020808252810161089b8161498a565b600081546149d9816139ae565b6001821680156149f05760018114614a0157614a31565b60ff19831686528186019350614a31565b60008581526020902060005b83811015614a2957815488820152600190910190602001614a0d565b505081860193505b50505092915050565b7fffff00000000000000000000000000000000000000000000000000000000000081166131df565b614a6c81846149cc565b9050614a788183614a3a565b60020192915050565b8161475f565b6000614a91825190565b614a9f8185602086016131f3565b9290920192915050565b614ab38184614a87565b90506118e68183614a87565b60328152602081017f6f776e6572496e6465786573206d7573742068617665207468652073616d652081527f6c656e67746820617320746f6b656e496473000000000000000000000000000060208201529050613a2f565b6020808252810161089b81614abf565b61ffff8116905061ffff8216915060008161ffff0483118215151615613ca157613ca1613b6d565b60458152602081017f54686520676976656e206f776e6572546f6b656e496e646578657320646f206e81527f6f742073746172742066726f6d207468652063757272656e74206f776e65722060208201527f636f756e74000000000000000000000000000000000000000000000000000000604082015290506143d4565b6020808252810161089b81614b4f565b614be781856149cc565b9050611b84818385614820565b60248152602081017f6f776e6572546f6b656e496e6465786573206d7573742062652061207365717581527f656e63650000000000000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81614bf4565b60808101614c6a82876132bc565b614c7760208301866132bc565b614c84604083018561426d565b8181036060830152614c96818461321f565b9695505050505050565b805161089b81613180565b600060208284031215614cc057614cc0600080fd5b6000611b848484614ca0565b600e8152602081017f736c6963655f6f766572666c6f7700000000000000000000000000000000000081529050613b41565b6020808252810161089b81614ccc565b60118152602081017f736c6963655f6f75744f66426f756e647300000000000000000000000000000081529050613b41565b6020808252810161089b81614d0e56fea2646970667358221220d119b1b441fcd8fab64e7adf11c7e1409c29a029b4022b28a754ac5b751649c064736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106102e05760003560e01c80636b318e6e11610184578063b5fcb339116100d6578063d3d6005b1161008a578063f2fde38b11610064578063f2fde38b146107e5578063f73c814b14610805578063fac913231461082557600080fd5b8063d3d6005b1461078f578063d7822c99146107af578063e985e9c5146107c557600080fd5b8063b88d4fde116100bb578063b88d4fde1461072f578063c074f4121461074f578063c87b56dd1461076f57600080fd5b8063b5fcb339146106ef578063b776c8a61461070f57600080fd5b80638da5cb5b116101385780639c51792a116101125780639c51792a14610694578063a22cb465146106af578063a8e90b57146106cf57600080fd5b80638da5cb5b1461064157806395a97a631461065f57806395d89b411461067f57600080fd5b8063715018a611610169578063715018a6146105ec57806382503c91146106015780638392d8041461062157600080fd5b80636b318e6e146105b657806370a08231146105cc57600080fd5b80631e8858fb1161023d5780633ccfd60b116101f1578063511a9605116101cb578063511a960514610556578063511ed382146105765780636352211e1461059657600080fd5b80633ccfd60b1461050157806342842e0e146105165780634f6ccce71461053657600080fd5b80632a133e35116102225780632a133e35146104b95780632f745c59146104cc57806333c12e17146104ec57600080fd5b80631e8858fb1461047957806323b872dd1461049957600080fd5b8063095ea7b31161029457806312b40a9f1161027957806312b40a9f1461042257806318160ddd146104425780631a6949e31461046457600080fd5b8063095ea7b3146103e05780630d77c7561461040257600080fd5b806306fdde03116102c557806306fdde031461035457806307c5bde314610376578063081812fc146103b357600080fd5b806301ffc9a7146102ec578063026ae1021461032257600080fd5b366102e757005b600080fd5b3480156102f857600080fd5b5061030c6103073660046131ba565b610845565b60405161031991906131e5565b60405180910390f35b34801561032e57600080fd5b5060145461030c9074010000000000000000000000000000000000000000900460ff1681565b34801561036057600080fd5b506103696108a1565b6040516103199190613251565b34801561038257600080fd5b506103a6610391366004613273565b60066020526000908152604090205460ff1681565b604051610319919061329d565b3480156103bf57600080fd5b506103d36103ce366004613273565b610933565b60405161031991906132c5565b3480156103ec57600080fd5b506104006103fb3660046132e7565b610995565b005b34801561040e57600080fd5b5061040061041d366004613273565b610a1b565b34801561042e57600080fd5b5061040061043d366004613324565b610a4a565b34801561044e57600080fd5b50610457610aa0565b604051610319919061334b565b34801561047057600080fd5b5061030c610ac1565b34801561048557600080fd5b50610400610494366004613324565b610ad8565b3480156104a557600080fd5b506104006104b4366004613359565b610b24565b61030c6104c73660046133fb565b610b55565b3480156104d857600080fd5b506104576104e73660046132e7565b610c39565b3480156104f857600080fd5b50610400610d25565b34801561050d57600080fd5b50610400610d9c565b34801561052257600080fd5b50610400610531366004613359565b610e31565b34801561054257600080fd5b50610457610551366004613273565b610e50565b34801561056257600080fd5b50610400610571366004613273565b610e92565b34801561058257600080fd5b506013546103d3906001600160a01b031681565b3480156105a257600080fd5b506103d36105b1366004613273565b610ec1565b3480156105c257600080fd5b5061045760165481565b3480156105d857600080fd5b506104576105e7366004613324565b610efb565b3480156105f857600080fd5b50610400610f43565b34801561060d57600080fd5b5061040061061c366004613601565b610f79565b34801561062d57600080fd5b50600f546103d3906001600160a01b031681565b34801561064d57600080fd5b50600b546001600160a01b03166103d3565b34801561066b57600080fd5b5061030c61067a366004613701565b611249565b34801561068b57600080fd5b50610369611513565b3480156106a057600080fd5b50610457666a94d74f43000081565b3480156106bb57600080fd5b506104006106ca366004613828565b611522565b3480156106db57600080fd5b506014546103d3906001600160a01b031681565b3480156106fb57600080fd5b5061040061070a366004613324565b611531565b34801561071b57600080fd5b5061040061072a366004613324565b611587565b34801561073b57600080fd5b5061040061074a3660046138f2565b6115d3565b34801561075b57600080fd5b50600d546103d3906001600160a01b031681565b34801561077b57600080fd5b5061036961078a366004613273565b61160b565b34801561079b57600080fd5b506104006107aa366004613324565b611724565b3480156107bb57600080fd5b5061045760175481565b3480156107d157600080fd5b5061030c6107e0366004613965565b61177a565b3480156107f157600080fd5b50610400610800366004613324565b6118ed565b34801561081157600080fd5b50610400610820366004613324565b611946565b34801561083157600080fd5b50600e546103d3906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061089b575061089b82611999565b92915050565b6060600080546108b0906139ae565b80601f01602080910402602001604051908101604052809291908181526020018280546108dc906139ae565b80156109295780601f106108fe57610100808354040283529160200191610929565b820191906000526020600020905b81548152906001019060200180831161090c57829003601f168201915b5050505050905090565b61ffff81166000908152600260205260408120546001600160a01b03166109755760405162461bcd60e51b815260040161096c90613a35565b60405180910390fd5b5061ffff166000908152600460205260409020546001600160a01b031690565b60006109a082610ec1565b9050806001600160a01b0316836001600160a01b031614156109d45760405162461bcd60e51b815260040161096c90613a9d565b336001600160a01b03821614806109f057506109f0813361177a565b610a0c5760405162461bcd60e51b815260040161096c90613b05565b610a168383611a7c565b505050565b600b546001600160a01b03163314610a455760405162461bcd60e51b815260040161096c90613b47565b601655565b600b546001600160a01b03163314610a745760405162461bcd60e51b815260040161096c90613b47565b600d80546001600160a01b039092166001600160a01b0319928316811790915560108054909216179055565b6000600260098054610ab1906139ae565b610abc929150613b83565b905090565b600060175442118015610abc575050601754151590565b600b546001600160a01b03163314610b025760405162461bcd60e51b815260040161096c90613b47565b601480546001600160a01b0319166001600160a01b0392909216919091179055565b610b2e3382611aed565b610b4a5760405162461bcd60e51b815260040161096c90613bf3565b610a16838383611b8c565b60006002600c541415610b7a5760405162461bcd60e51b815260040161096c90613c35565b6002600c55610b87610ac1565b610ba35760405162461bcd60e51b815260040161096c90613c77565b34666a94d74f430000610bb7600287613b83565b610bc19190613c87565b14610bde5760405162461bcd60e51b815260040161096c90613cd8565b601654610bec600286613b83565b610bf533610efb565b610bff9190613ce8565b1115610c1d5760405162461bcd60e51b815260040161096c90613d58565b610c2a3386868686611cf5565b50600180600c55949350505050565b6000610c4483610efb565b8210610c625760405162461bcd60e51b815260040161096c90613dc0565b6001600160a01b03831660009081526007602052604090208054610d1a9190610c8a906139ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb6906139ae565b8015610d035780601f10610cd857610100808354040283529160200191610d03565b820191906000526020600020905b815481529060010190602001808311610ce657829003601f168201915b5050505050836002610d159190613c87565b611fdc565b61ffff169392505050565b600b546001600160a01b03163314610d4f5760405162461bcd60e51b815260040161096c90613b47565b601480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff8116740100000000000000000000000000000000000000009182900460ff1615909102179055565b600b546001600160a01b03163314610dc65760405162461bcd60e51b815260040161096c90613b47565b604051600090339047908381818185875af1925050503d8060008114610e08576040519150601f19603f3d011682016040523d82523d6000602084013e610e0d565b606091505b5050905080610e2e5760405162461bcd60e51b815260040161096c90613e02565b50565b610a1683838361ffff16604051806020016040528060008152506115d3565b6000610e5a610aa0565b8210610e785760405162461bcd60e51b815260040161096c90613e6a565b610e8860098054610c8a906139ae565b61ffff1692915050565b600b546001600160a01b03163314610ebc5760405162461bcd60e51b815260040161096c90613b47565b601755565b61ffff81166000908152600260205260408120546001600160a01b03168061089b5760405162461bcd60e51b815260040161096c90613ed2565b60006001600160a01b038216610f235760405162461bcd60e51b815260040161096c90613f3a565b506001600160a01b031660009081526003602052604090205461ffff1690565b600b546001600160a01b03163314610f6d5760405162461bcd60e51b815260040161096c90613b47565b610f776000612012565b565b6002600c541415610f9c5760405162461bcd60e51b815260040161096c90613c35565b6002600c55600b546001600160a01b03163314610fcb5760405162461bcd60e51b815260040161096c90613b47565b6000828433424489604051602001610fe896959493929190614010565b60405160208183030381529060405280519060200120905060005b84518110156111715760006001600160a01b03166002600087848151811061102d5761102d614066565b60209081029190910181015161ffff168252810191909152604001600020546001600160a01b0316146110725760405162461bcd60e51b815260040161096c906140ae565b856002600087848151811061108957611089614066565b602002602001015161ffff1661ffff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604051806020016040528060048684815181106110ea576110ea614066565b60200260200101516110fc91906140be565b61110e906103fc600087901a166140d9565b60ff168152506006600087848151811061112a5761112a614066565b60209081029190910181015161ffff1682528101919091526040016000209051815460ff191660ff90911617905560019190911c9080611169816140fa565b915050611003565b5083516001600160a01b038616600090815260036020526040812080549091906111a090849061ffff16614115565b825461ffff9182166101009390930a9283029190920219909116179055506011546040517f6b20c4540000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690636b20c4549061120b90889087908790600401614176565b600060405180830381600087803b15801561122557600080fd5b505af1158015611239573d6000803e3d6000fd5b50506001600c5550505050505050565b60006002600c54141561126e5760405162461bcd60e51b815260040161096c90613c35565b6002600c558584146112925760405162461bcd60e51b815260040161096c9061420b565b61129d866002613c87565b8a146112bb5760405162461bcd60e51b815260040161096c9061424d565b60005b8a81101561148457336001600160a01b0316601260009054906101000a90046001600160a01b03166001600160a01b0316636352211e6113358f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250611fdc915050565b6040518263ffffffff1660e01b81526004016113519190614276565b60206040518083038186803b15801561136957600080fd5b505afa15801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a1919061428f565b6001600160a01b0316146113c75760405162461bcd60e51b815260040161096c90614308565b87876113d4600284613b83565b8181106113e3576113e3614066565b919091013560f81c905086866113fa600285613b83565b81811061140957611409614066565b9050602002013560ff16146114305760405162461bcd60e51b815260040161096c9061434a565b838361143d600284613b83565b81811061144c5761144c614066565b905060200201356001146114725760405162461bcd60e51b815260040161096c906143da565b61147d600282613ce8565b90506112be565b50611494338c8c8c8c8c8c612064565b6011546001600160a01b0316636b20c45433878787876040518663ffffffff1660e01b81526004016114ca95949392919061443c565b600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b50505050600190506001600c559a9950505050505050505050565b6060600180546108b0906139ae565b61152d338383612386565b5050565b600b546001600160a01b0316331461155b5760405162461bcd60e51b815260040161096c90613b47565b600e80546001600160a01b039092166001600160a01b0319928316811790915560118054909216179055565b600b546001600160a01b031633146115b15760405162461bcd60e51b815260040161096c90613b47565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6115dd3383611aed565b6115f95760405162461bcd60e51b815260040161096c90613bf3565b61160584848484612429565b50505050565b60606116328261ffff166000908152600260205260409020546001600160a01b0316151590565b61164e5760405162461bcd60e51b815260040161096c906144d5565b600d546001600160a01b031661167257505060408051602081019091526000815290565b60105461ffff83166000908152600660205260409081902090517f48a621a90000000000000000000000000000000000000000000000000000000081526001600160a01b03909216916348a621a9916116d091869190600401614507565b60006040518083038186803b1580156116e857600080fd5b505afa1580156116fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261089b919081019061457a565b600b546001600160a01b0316331461174e5760405162461bcd60e51b815260040161096c90613b47565b600f80546001600160a01b039092166001600160a01b0319928316811790915560128054909216179055565b60145460009074010000000000000000000000000000000000000000900460ff166117ce57506001600160a01b0382811660009081526005602090815260408083209385168352929052205460ff1661089b565b6013546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c4552791906118179086906004016132c5565b60206040518083038186803b15801561182f57600080fd5b505afa158015611843573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611867919061428f565b6001600160a01b0316826001600160a01b0316148061189357506014546001600160a01b038381169116145b806118b657506001600160a01b03821660009081526015602052604090205460ff165b806118e657506001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff165b9392505050565b600b546001600160a01b031633146119175760405162461bcd60e51b815260040161096c90613b47565b6001600160a01b03811661193d5760405162461bcd60e51b815260040161096c9061460d565b610e2e81612012565b600b546001600160a01b031633146119705760405162461bcd60e51b815260040161096c90613b47565b6001600160a01b03166000908152601560205260409020805460ff19811660ff90911615179055565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611a2c57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061089b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461089b565b61ffff8116600081815260046020526040902080546001600160a01b0319166001600160a01b038516908117909155611ab482610ec1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61ffff81166000908152600260205260408120546001600160a01b0316611b265760405162461bcd60e51b815260040161096c90614675565b6000611b358361ffff16610ec1565b9050806001600160a01b0316846001600160a01b03161480611b745750836001600160a01b0316611b698461ffff16610933565b6001600160a01b0316145b80611b845750611b84818561177a565b949350505050565b826001600160a01b0316611ba38261ffff16610ec1565b6001600160a01b031614611bc95760405162461bcd60e51b815260040161096c906146dd565b6001600160a01b038216611bef5760405162461bcd60e51b815260040161096c90614745565b611bfa83838361245c565b611c05600082611a7c565b6001600160a01b0383166000908152600360205260408120805460019290611c3290849061ffff16614755565b82546101009290920a61ffff8181021990931691831602179091556001600160a01b03841660009081526003602052604081208054600194509092611c7991859116614115565b82546101009290920a61ffff818102199093169183160217909155821660008181526002602052604080822080546001600160a01b0319166001600160a01b0388811691821790925591519394509092908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038516611d1b5760405162461bcd60e51b815260040161096c906147a8565b6101008310611d3c5760405162461bcd60e51b815260040161096c90614810565b60008484848433344244604051602001611d5d98979695949392919061482b565b604051602081830303815290604052805190602001209050611d828686868686612c0d565b60005b611d90600286613b83565b811015611ec1576000611de087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d15925086915060029050613c87565b9050611e078161ffff166000908152600260205260409020546001600160a01b0316151590565b15611e245760405162461bcd60e51b815260040161096c906148b7565b61ffff8116600081815260026020908152604080832080546001600160a01b0319166001600160a01b038e169081179091558151808401835288851a815285855260069093528184209251835460ff191660ff909116179092555160019690961c959091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45080611eb9816140fa565b915050611d85565b50611ecd6002856148c7565b6001600160a01b03871660009081526003602052604081208054909190611ef990849061ffff16614115565b92506101000a81548161ffff021916908361ffff1602179055508484604051611f239291906148d5565b604051908190038120906001600160a01b038816907f8af827b1e5b28d31f4e58c98834e77a022ec56ea126a1bc51c28f4d24b88a81990600090a3611fb8600087611fa388888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611fdc915050565b60405180602001604052806000815250612ec8565b611fd45760405162461bcd60e51b815260040161096c90614938565b505050505050565b6000611fe9826002613ce8565b835110156120095760405162461bcd60e51b815260040161096c9061497a565b50016002015190565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03871661208a5760405162461bcd60e51b815260040161096c906147a8565b61020085106120ab5760405162461bcd60e51b815260040161096c90614810565b600082828888333442446040516020016120cc98979695949392919061482b565b6040516020818303038152906040528051906020012090506120f18888888888612c0d565b60005b6120ff600288613b83565b81101561227e57600061214f89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d15925086915060029050613c87565b90506121768161ffff166000908152600260205260409020546001600160a01b0316151590565b156121935760405162461bcd60e51b815260040161096c906148b7565b61ffff811660009081526002602090815260409182902080546001600160a01b0319166001600160a01b038e1617905581519081019091528060048787868181106121e0576121e0614066565b6121f19392013560f81c90506140be565b612203906103fc600088901a166140d9565b60ff90811690915261ffff83166000818152600660205260408082209451855460ff1916941693909317909355905160019590951c9490916001600160a01b038d16917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45080612276816140fa565b9150506120f4565b5061228a6002876148c7565b6001600160a01b038916600090815260036020526040812080549091906122b690849061ffff16614115565b92506101000a81548161ffff021916908361ffff16021790555086866040516122e09291906148d5565b604051908190038120906001600160a01b038a16907f8af827b1e5b28d31f4e58c98834e77a022ec56ea126a1bc51c28f4d24b88a81990600090a3612360600089611fa38a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611fdc915050565b61237c5760405162461bcd60e51b815260040161096c90614938565b5050505050505050565b816001600160a01b0316836001600160a01b031614156123b85760405162461bcd60e51b815260040161096c906149bc565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319061241c9085906131e5565b60405180910390a3505050565b612434848484611b8c565b61244084848484612ec8565b6116055760405162461bcd60e51b815260040161096c90614938565b6001600160a01b0383166125ab57600060098054612479906139ae565b61ffff8481166000908152600a6020908152604091829020805461ffff191693851693909317909255519193506124ba925060099160f086901b9101614a62565b604051602081830303815290604052600990805190602001906124de9291906130e7565b506001600160a01b03831660009081526007602052604081208054612502906139ae565b905060f01b905060088160405160200161251d929190614a62565b604051602081830303815290604052600890805190602001906125419291906130e7565b506001600160a01b0384166000908152600760209081526040918290209151612571929160f087901b9101614a62565b60408051601f198184030181529181526001600160a01b0386166000908152600760209081529190208251611fd4939192909101906130e7565b6001600160a01b03821661296e5761ffff8082166000908152600a602052604090205460098054919092169161266e916125e4906139ae565b80601f0160208091040260200160405190810160405280929190818152602001828054612610906139ae565b801561265d5780601f106126325761010080835404028352916020019161265d565b820191906000526020600020905b81548152906001019060200180831161264057829003601f168201915b505050505060008361ffff1661301f565b61273b6009805461267e906139ae565b80601f01602080910402602001604051908101604052809291908181526020018280546126aa906139ae565b80156126f75780601f106126cc576101008083540402835291602001916126f7565b820191906000526020600020905b8154815290600101906020018083116126da57829003601f168201915b50505050508360026127099190614115565b61ffff1660028561ffff1660098054612721906139ae565b61272c929150614a81565b6127369190614a81565b61301f565b60405160200161274c929190614aa9565b604051602081830303815290604052600990805190602001906127709291906130e7565b50600061280b60088054612783906139ae565b80601f01602080910402602001604051908101604052809291908181526020018280546127af906139ae565b80156127fc5780601f106127d1576101008083540402835291602001916127fc565b820191906000526020600020905b8154815290600101906020018083116127df57829003601f168201915b50505050508361ffff16611fdc565b6001600160a01b03861660009081526007602052604090208054919250612835916125e4906139ae565b6001600160a01b03861660009081526007602052604090208054612923919061285d906139ae565b80601f0160208091040260200160405190810160405280929190818152602001828054612889906139ae565b80156128d65780601f106128ab576101008083540402835291602001916128d6565b820191906000526020600020905b8154815290600101906020018083116128b957829003601f168201915b50505050508360026128e89190614115565b61ffff1660028561ffff16600760008c6001600160a01b03166001600160a01b031681526020019081526020016000208054612721906139ae565b604051602001612934929190614aa9565b60408051601f198184030181529181526001600160a01b0387166000908152600760209081529190208251611fd4939192909101906130e7565b816001600160a01b0316836001600160a01b031614610a165761ffff8082166000908152600a60205260408120546008805491909316926129b291612783906139ae565b6001600160a01b038616600090815260076020526040902080549192506129dc916125e4906139ae565b6001600160a01b03861660009081526007602052604090208054612a04919061285d906139ae565b604051602001612a15929190614aa9565b60408051601f198184030181529181526001600160a01b0387166000908152600760209081529190208251612a4f939192909101906130e7565b506001600160a01b03841660009081526007602052604081208054612a73906139ae565b905060f01b905060076000866001600160a01b03166001600160a01b031681526020019081526020016000208460f01b604051602001612ab4929190614a62565b60408051601f198184030181529181526001600160a01b0387166000908152600760209081529190208251612aee939192909101906130e7565b508060001a60f81b60088461ffff168154612b08906139ae565b8110612b1657612b16614066565b815460011615612b355790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555080600160028110612b8057612b80614066565b1a60f81b6008612b91856001614115565b61ffff168154612ba0906139ae565b8110612bae57612bae614066565b815460011615612bcd5790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f010000000000000000000000000000000000000000000000000000000000000084040217905550505050505050565b6000612c4e83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611fdc915050565b9050838214612c6f5760405162461bcd60e51b815260040161096c90614b17565b612c7a816002614b27565b6001600160a01b0387166000908152600760205260409020805461ffff9290921691612ca5906139ae565b905014612cc45760405162461bcd60e51b815260040161096c90614bcd565b60088383604051602001612cda93929190614bdd565b60405160208183030381529060405260089080519060200190612cfe9291906130e7565b506001600160a01b0386166000908152600760209081526040918290209151612d2c92918891889101614bdd565b60408051601f198184030181529181526001600160a01b0388166000908152600760209081529190208251612d66939192909101906130e7565b50600060098054612d76906139ae565b9050905060005b61ffff8116861115612e8d57612d946002826148c7565b612d9e9084614115565b61ffff16612de686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505061ffff85169050611fdc565b61ffff1614612e075760405162461bcd60e51b815260040161096c90614c4c565b6000612e4d88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505061ffff85169050611fdc565b9050612e598284614115565b61ffff9182166000908152600a60205260409020805461ffff191691909216179055612e86600282614115565b9050612d7d565b5060098686604051602001612ea493929190614bdd565b6040516020818303038152906040526009908051906020019061237c9291906130e7565b60006001600160a01b0384163b15613014576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290612f25903390899088908890600401614c5c565b602060405180830381600087803b158015612f3f57600080fd5b505af1925050508015612f6f575060408051601f3d908101601f19168201909252612f6c91810190614cab565b60015b612fc9573d808015612f9d576040519150601f19603f3d011682016040523d82523d6000602084013e612fa2565b606091505b508051612fc15760405162461bcd60e51b815260040161096c90614938565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611b84565b506001949350505050565b60608161302d81601f613ce8565b101561304b5760405162461bcd60e51b815260040161096c90614cfe565b6130558284613ce8565b845110156130755760405162461bcd60e51b815260040161096c90614d40565b60608215801561309457604051915060008252602082016040526130de565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156130cd5780518352602092830192016130b5565b5050858452601f01601f1916604052505b50949350505050565b8280546130f3906139ae565b90600052602060002090601f016020900481019282613115576000855561315b565b82601f1061312e57805160ff191683800117855561315b565b8280016001018555821561315b579182015b8281111561315b578251825591602001919060010190613140565b5061316792915061316b565b5090565b5b80821115613167576000815560010161316c565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b8114610e2e57600080fd5b803561089b81613180565b6000602082840312156131cf576131cf600080fd5b6000611b8484846131af565b8015155b82525050565b6020810161089b82846131db565b60005b8381101561320e5781810151838201526020016131f6565b838111156116055750506000910152565b6000613229825190565b8084526020840193506132408185602086016131f3565b601f01601f19169290920192915050565b602080825281016118e6818461321f565b806131a4565b803561089b81613262565b60006020828403121561328857613288600080fd5b6000611b848484613268565b60ff81166131df565b6020810161089b8284613294565b60006001600160a01b03821661089b565b6131df816132ab565b6020810161089b82846132bc565b6131a4816132ab565b803561089b816132d3565b600080604083850312156132fd576132fd600080fd5b600061330985856132dc565b925050602061331a85828601613268565b9150509250929050565b60006020828403121561333957613339600080fd5b6000611b8484846132dc565b806131df565b6020810161089b8284613345565b60008060006060848603121561337157613371600080fd5b600061337d86866132dc565b935050602061338e868287016132dc565b925050604061339f86828701613268565b9150509250925092565b60008083601f8401126133be576133be600080fd5b50813567ffffffffffffffff8111156133d9576133d9600080fd5b6020830191508360018202830111156133f4576133f4600080fd5b9250929050565b6000806000806040858703121561341457613414600080fd5b843567ffffffffffffffff81111561342e5761342e600080fd5b61343a878288016133a9565b9450945050602085013567ffffffffffffffff81111561345c5761345c600080fd5b613468878288016133a9565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156134b0576134b0613474565b6040525050565b60006134c260405190565b90506134ce828261348a565b919050565b600067ffffffffffffffff8211156134ed576134ed613474565b5060209081020190565b61ffff81166131a4565b803561089b816134f7565b600061351f61351a846134d3565b6134b7565b8381529050602080820190840283018581111561353e5761353e600080fd5b835b81811015613560576135528782613501565b835260209283019201613540565b5050509392505050565b600082601f83011261357e5761357e600080fd5b8135611b8484826020860161350c565b600061359c61351a846134d3565b838152905060208082019084028301858111156135bb576135bb600080fd5b835b81811015613560576135cf8782613268565b8352602092830192016135bd565b600082601f8301126135f1576135f1600080fd5b8135611b8484826020860161358e565b6000806000806080858703121561361a5761361a600080fd5b600061362687876132dc565b945050602085013567ffffffffffffffff81111561364657613646600080fd5b6136528782880161356a565b935050604085013567ffffffffffffffff81111561367257613672600080fd5b61367e878288016135dd565b925050606085013567ffffffffffffffff81111561369e5761369e600080fd5b6136aa878288016135dd565b91505092959194509250565b60008083601f8401126136cb576136cb600080fd5b50813567ffffffffffffffff8111156136e6576136e6600080fd5b6020830191508360208202830111156133f4576133f4600080fd5b60008060008060008060008060008060a08b8d03121561372357613723600080fd5b8a3567ffffffffffffffff81111561373d5761373d600080fd5b6137498d828e016133a9565b9a509a505060208b013567ffffffffffffffff81111561376b5761376b600080fd5b6137778d828e016133a9565b985098505060408b013567ffffffffffffffff81111561379957613799600080fd5b6137a58d828e016133a9565b965096505060608b013567ffffffffffffffff8111156137c7576137c7600080fd5b6137d38d828e016136b6565b945094505060808b013567ffffffffffffffff8111156137f5576137f5600080fd5b6138018d828e016136b6565b92509250509295989b9194979a5092959850565b8015156131a4565b803561089b81613815565b6000806040838503121561383e5761383e600080fd5b600061384a85856132dc565b925050602061331a8582860161381d565b600067ffffffffffffffff82111561387557613875613474565b601f19601f83011660200192915050565b82818337506000910152565b60006138a061351a8461385b565b9050828152602081018484840111156138bb576138bb600080fd5b6138c6848285613886565b509392505050565b600082601f8301126138e2576138e2600080fd5b8135611b84848260208601613892565b6000806000806080858703121561390b5761390b600080fd5b600061391787876132dc565b9450506020613928878288016132dc565b935050604061393987828801613268565b925050606085013567ffffffffffffffff81111561395957613959600080fd5b6136aa878288016138ce565b6000806040838503121561397b5761397b600080fd5b600061398785856132dc565b925050602061331a858286016132dc565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806139c257607f821691505b602082108114156139d5576139d5613998565b50919050565b602c8152602081017f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161089b816139db565b60218152602081017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6581527f720000000000000000000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613a45565b60388152602081017f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060208201529050613a2f565b6020808252810161089b81613aad565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b6020808252810161089b81613b15565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b815b9150600082613b9657613b96613b57565b500490565b60318152602081017f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f81527f776e6572206e6f7220617070726f76656400000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613b9b565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050613b41565b6020808252810161089b81613c03565b60148152602081017f5075626c69632073616c65206e6f74206f70656e00000000000000000000000081529050613b41565b6020808252810161089b81613c45565b6000816000190483118215151615613ca157613ca1613b6d565b500290565b601d8152602081017f596f75206861766520746f2070617920746865206261696c20626f6e6400000081529050613b41565b6020808252810161089b81613ca6565b60008219821115613cfb57613cfb613b6d565b500190565b60318152602081017f596f757220686f6d6520697320746f20736d616c6c20746f2077656c636f6d6581527f20736f206d616e7920647265616d65727300000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613d00565b602b8152602081017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581527f74206f6620626f756e647300000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613d68565b60118152602081017f5769746864726177616c206661696c656400000000000000000000000000000081529050613b41565b6020808252810161089b81613dd0565b602c8152602081017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81527f7574206f6620626f756e6473000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613e12565b60298152602081017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481527f656e7420746f6b656e000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613e7a565b602a8152602081017f4552433732313a2062616c616e636520717565727920666f7220746865207a6581527f726f20616464726573730000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81613ee2565b613f548282613345565b5060200190565b6000613f65825190565b6020830160005b82811015613f91578151613f808782613f4a565b965050602082019150600101613f6c565b5093949350505050565b61ffff81166131df565b613f548282613f9b565b6000613fb9825190565b6020830160005b82811015613f91578151613fd48782613fa5565b965050602082019150600101613fc0565b600061089b8260601b90565b600061089b82613fe5565b6131df614008826132ab565b613ff1565b90565b61401a8188613f5b565b90506140268187613faf565b90506140328186613ffc565b60140161403f8185613345565b60200161404c8184613345565b6020016140598183613ffc565b6014019695505050505050565b634e487b7160e01b600052603260045260246000fd5b60148152602081017f546f6b656e20616c72656164792065786973747300000000000000000000000081529050613b41565b6020808252810161089b8161407c565b60ff91821691166000826140d4576140d4613b57565b500690565b60ff8116905060ff8216915060008260ff03821115613cfb57613cfb613b6d565b600060001982141561410e5761410e613b6d565b5060010190565b61ffff8116905061ffff8216915060008261ffff03821115613cfb57613cfb613b6d565b6000614143825190565b808452602093840193830160005b82811015613f915781516141658782613f4a565b965050602082019150600101614151565b6060810161418482866132bc565b81810360208301526141968185614139565b905081810360408301526141aa8184614139565b95945050505050565b60258152602081017f43616e6479206964732073686f756c642068617665207468652073616d65206c81527f656e67746800000000000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b816141b3565b601f8152602081017f456163682072756e6e6572206e6565647320697473206f776e2063616e64790081529050613b41565b6020808252810161089b8161421b565b600061089b61400d61ffff841681565b6131df8161425d565b6020810161089b828461426d565b805161089b816132d3565b6000602082840312156142a4576142a4600080fd5b6000611b848484614284565b60378152602081017f596f752063616e6e6f7420676976652063616e6469657320746f20612072756e81527f6e6572207468617420796f7520646f206e6f74206f776e00000000000000000060208201529050613a2f565b6020808252810161089b816142b0565b601c8152602081017f43616e6479206964732073686f756c64206265207468652073616d650000000081529050613b41565b6020808252810161089b81614318565b604f8152602081017f596f75722072756e6e6572206e65656473206f6e6520616e64206f6e6c79206f81527f6e652063616e64792c2077686f206b6e6f7773207768617420636f756c64206860208201527f617070656e206f74686572776973650000000000000000000000000000000000604082015290505b60600190565b6020808252810161089b8161435a565b81835260208301925060007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561442557614425600080fd5b602083029250614436838584613886565b50500190565b6060810161444a82886132bc565b818103602083015261445d8186886143ea565b905081810360408301526144728184866143ea565b979650505050505050565b60278152602081017f4552433732313a2055524920717565727920666f72206e6f6e6578697374656e81527f7420746f6b656e0000000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b8161447d565b600060ff821661089b565b80546144fb816144e5565b9050610a168382613294565b604081016145158285613345565b6118e660208301846144f0565b600061453061351a8461385b565b90508281526020810184848401111561454b5761454b600080fd5b6138c68482856131f3565b600082601f83011261456a5761456a600080fd5b8151611b84848260208601614522565b60006020828403121561458f5761458f600080fd5b815167ffffffffffffffff8111156145a9576145a9600080fd5b611b8484828501614556565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b816145b5565b602c8152602081017f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881527f697374656e7420746f6b656e000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b8161461d565b60298152602081017f4552433732313a207472616e73666572206f6620746f6b656e2074686174206981527f73206e6f74206f776e000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81614685565b60248152602081017f4552433732313a207472616e7366657220746f20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b816146ed565b61ffff9081169082165b915060008282101561477357614773613b6d565b500390565b60208082527f4552433732313a206d696e7420746f20746865207a65726f20616464726573739101908152613b41565b6020808252810161089b81614778565b60328152602081017f596f752063616e206d696e74206279206261746368657320757020746f20323581527f3620746f6b656e7320617420612074696d65000000000000000000000000000060208201529050613a2f565b6020808252810161089b816147b8565b613cfb828483613886565b61483681898b614820565b9050614843818789614820565b905061484f8186613ffc565b60140161485c8185613345565b6020016148698184613345565b6020016148768183613345565b60200198975050505050505050565b601c8152602081017f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081529050613b41565b6020808252810161089b81614885565b61ffff908116908216613b85565b6118e6818385614820565b60328152602081017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e746572000000000000000000000000000060208201529050613a2f565b6020808252810161089b816148e0565b60148152602081017f746f55696e7431365f6f75744f66426f756e647300000000000000000000000081529050613b41565b6020808252810161089b81614948565b60198152602081017f4552433732313a20617070726f766520746f2063616c6c65720000000000000081529050613b41565b6020808252810161089b8161498a565b600081546149d9816139ae565b6001821680156149f05760018114614a0157614a31565b60ff19831686528186019350614a31565b60008581526020902060005b83811015614a2957815488820152600190910190602001614a0d565b505081860193505b50505092915050565b7fffff00000000000000000000000000000000000000000000000000000000000081166131df565b614a6c81846149cc565b9050614a788183614a3a565b60020192915050565b8161475f565b6000614a91825190565b614a9f8185602086016131f3565b9290920192915050565b614ab38184614a87565b90506118e68183614a87565b60328152602081017f6f776e6572496e6465786573206d7573742068617665207468652073616d652081527f6c656e67746820617320746f6b656e496473000000000000000000000000000060208201529050613a2f565b6020808252810161089b81614abf565b61ffff8116905061ffff8216915060008161ffff0483118215151615613ca157613ca1613b6d565b60458152602081017f54686520676976656e206f776e6572546f6b656e496e646578657320646f206e81527f6f742073746172742066726f6d207468652063757272656e74206f776e65722060208201527f636f756e74000000000000000000000000000000000000000000000000000000604082015290506143d4565b6020808252810161089b81614b4f565b614be781856149cc565b9050611b84818385614820565b60248152602081017f6f776e6572546f6b656e496e6465786573206d7573742062652061207365717581527f656e63650000000000000000000000000000000000000000000000000000000060208201529050613a2f565b6020808252810161089b81614bf4565b60808101614c6a82876132bc565b614c7760208301866132bc565b614c84604083018561426d565b8181036060830152614c96818461321f565b9695505050505050565b805161089b81613180565b600060208284031215614cc057614cc0600080fd5b6000611b848484614ca0565b600e8152602081017f736c6963655f6f766572666c6f7700000000000000000000000000000000000081529050613b41565b6020808252810161089b81614ccc565b60118152602081017f736c6963655f6f75744f66426f756e647300000000000000000000000000000081529050613b41565b6020808252810161089b81614d0e56fea2646970667358221220d119b1b441fcd8fab64e7adf11c7e1409c29a029b4022b28a754ac5b751649c064736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "Modified for opensea and looksrare pre-approve so users can make truly gas less sales."
      },
      "mintBatchRunnersAccess(bytes,bytes,bytes,uint256[],uint256[])": {
        "params": {
          "candyAmounts": "should be an array of 1",
          "candyIds": "the same indexes as above but as a uint8 array",
          "candyIdsBytes": "a bytes interpreted as an array of uint8",
          "ownerTokenIndexes": "a bytes interpreted as an array of uint16. Given here to avoid indexes computation and save gas",
          "tokenIds": "a bytes interpreted as an array of uint16"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "opensea": {
        "details": "Copied from ApeRunner's contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "airDropBatch(address,uint16[],uint256[],uint256[])": {
        "notice": "Use this to AirDrop the tokens to the owner instead of minting them for lower gas costs."
      },
      "flipProxyState(address)": {
        "notice": "Approve the communication and interaction with cross-collection interactions."
      },
      "looksrare()": {
        "notice": "LooksRare marketplace transfer manager."
      },
      "marketplacesApproved()": {
        "notice": "Check if marketplaces pre-approve is enabled."
      },
      "opensea()": {
        "notice": "OpenSea proxy registry."
      },
      "setLooksrare(address)": {
        "notice": "Set looksrare to `looksrare_`."
      },
      "setOpensea(address)": {
        "notice": "Set opensea to `opensea_`."
      },
      "toggleMarketplacesApproved()": {
        "notice": "Toggle pre-approve feature state for sender."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13280,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 13282,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 13286,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 13290,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 13294,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 13300,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 13305,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "dreamers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(ChainDreamer)4803_storage)"
      },
      {
        "astId": 14420,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 14422,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes_storage"
      },
      {
        "astId": 14424,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes_storage"
      },
      {
        "astId": 14428,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint16,t_uint16)"
      },
      {
        "astId": 225,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 425,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "_status",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4179,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "renderingContractAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 4181,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "candyShopAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 4183,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "chainRunnersAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 4186,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "renderer",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IDreamersRenderer)8067"
      },
      {
        "astId": 4189,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "candyShop",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(ICandyShop)8015"
      },
      {
        "astId": 4192,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "chainRunners",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IChainRunners)8032"
      },
      {
        "astId": 4195,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "opensea",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 4198,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "looksrare",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 4202,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "marketplacesApproved",
        "offset": 20,
        "slot": "20",
        "type": "t_bool"
      },
      {
        "astId": 4206,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "proxyToApproved",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4308,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "maxDreamersMintPublicSale",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 4313,
        "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
        "label": "publicSaleStartTimestamp",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICandyShop)8015": {
        "encoding": "inplace",
        "label": "contract ICandyShop",
        "numberOfBytes": "20"
      },
      "t_contract(IChainRunners)8032": {
        "encoding": "inplace",
        "label": "contract IChainRunners",
        "numberOfBytes": "20"
      },
      "t_contract(IDreamersRenderer)8067": {
        "encoding": "inplace",
        "label": "contract IDreamersRenderer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_struct(ChainDreamer)4803_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ChainDreamersTypes.ChainDreamer)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainDreamer)4803_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChainDreamer)4803_storage": {
        "encoding": "inplace",
        "label": "struct ChainDreamersTypes.ChainDreamer",
        "members": [
          {
            "astId": 4802,
            "contract": "contracts/dreamers/ChainDreamers.sol:ChainDreamers",
            "label": "candy",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}