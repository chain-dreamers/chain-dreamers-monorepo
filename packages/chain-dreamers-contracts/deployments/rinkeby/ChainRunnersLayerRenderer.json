{
  "address": "0x5D5019F6aBA8D4b1a4fFa6cf430f0c2cA7B8fD5e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUM_COLORS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_LAYERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes1",
          "name": "b",
          "type": "bytes1"
        }
      ],
      "name": "byteToHexString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes1",
          "name": "b",
          "type": "bytes1"
        }
      ],
      "name": "byteToUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "layerIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "itemIndex",
          "type": "uint8"
        }
      ],
      "name": "getLayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "hexString",
              "type": "bytes"
            }
          ],
          "internalType": "struct ChainRunnersBaseRenderer.Layer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dna",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "_raceIndex",
          "type": "uint16"
        }
      ],
      "name": "getLayerIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dna",
          "type": "uint16"
        }
      ],
      "name": "getRaceIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dna",
          "type": "uint256"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "hexString",
              "type": "bytes"
            }
          ],
          "internalType": "struct ChainRunnersBaseRenderer.Layer[13]",
          "name": "tokenLayers",
          "type": "tuple[13]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "hexString",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "alpha",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "red",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "green",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blue",
              "type": "uint256"
            }
          ],
          "internalType": "struct ChainRunnersBaseRenderer.Color[8][13]",
          "name": "tokenPalettes",
          "type": "tuple[8][13]"
        },
        {
          "internalType": "uint8",
          "name": "numTokenLayers",
          "type": "uint8"
        },
        {
          "internalType": "string[13]",
          "name": "traitTypes",
          "type": "string[13]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "hexString",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "layerIndex",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "itemIndex",
              "type": "uint8"
            }
          ],
          "internalType": "struct ChainRunnersBaseRenderer.LayerInput[]",
          "name": "toSet",
          "type": "tuple[]"
        }
      ],
      "name": "setLayers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dna",
          "type": "uint256"
        }
      ],
      "name": "tokenSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "hexString",
              "type": "bytes"
            }
          ],
          "internalType": "struct ChainRunnersBaseRenderer.Layer[13]",
          "name": "tokenLayers",
          "type": "tuple[13]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "hexString",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "alpha",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "red",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "green",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blue",
              "type": "uint256"
            }
          ],
          "internalType": "struct ChainRunnersBaseRenderer.Color[8][13]",
          "name": "tokenPalettes",
          "type": "tuple[8][13]"
        },
        {
          "internalType": "uint8",
          "name": "numTokenLayers",
          "type": "uint8"
        }
      ],
      "name": "tokenSVGBuffer",
      "outputs": [
        {
          "internalType": "string[4]",
          "name": "",
          "type": "string[4]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dna",
              "type": "uint256"
            }
          ],
          "internalType": "struct ChainRunnersTypes.ChainRunner",
          "name": "runnerData",
          "type": "tuple"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "layerIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "itemIndex",
          "type": "uint8"
        }
      ],
      "name": "traitSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "d",
          "type": "uint8"
        }
      ],
      "name": "uintToHexDigit",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "",
          "type": "bytes1"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        }
      ],
      "name": "uintToHexString2",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        }
      ],
      "name": "uintToHexString6",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x410fe6033d662a6d55a40119c4a33cd9428438effbd06f7718e18b6ef49516ae",
  "receipt": {
    "to": null,
    "from": "0x145247853C6eeA1263757d22C5e8C3A4dBbF48b6",
    "contractAddress": "0x5D5019F6aBA8D4b1a4fFa6cf430f0c2cA7B8fD5e",
    "transactionIndex": 58,
    "gasUsed": "7561495",
    "logsBloom": "0x
    "blockHash": "0x70317b64f92c51f74ca57c0cd027695ebe6cfa9b23aa0acb6c966e94cbbc2fc6",
    "transactionHash": "0x410fe6033d662a6d55a40119c4a33cd9428438effbd06f7718e18b6ef49516ae",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 10063551,
        "transactionHash": "0x410fe6033d662a6d55a40119c4a33cd9428438effbd06f7718e18b6ef49516ae",
        "address": "0x5D5019F6aBA8D4b1a4fFa6cf430f0c2cA7B8fD5e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000145247853c6eea1263757d22c5e8c3a4dbbf48b6"
        ],
        "data": "0x",
        "logIndex": 127,
        "blockHash": "0x70317b64f92c51f74ca57c0cd027695ebe6cfa9b23aa0acb6c966e94cbbc2fc6"
      }
    ],
    "blockNumber": 10063551,
    "cumulativeGasUsed": "17972532",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0464b55ace3cba2f67d8122017481bf4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_COLORS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_LAYERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"b\",\"type\":\"bytes1\"}],\"name\":\"byteToHexString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"b\",\"type\":\"bytes1\"}],\"name\":\"byteToUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"layerIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"itemIndex\",\"type\":\"uint8\"}],\"name\":\"getLayer\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"hexString\",\"type\":\"bytes\"}],\"internalType\":\"struct ChainRunnersBaseRenderer.Layer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dna\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_raceIndex\",\"type\":\"uint16\"}],\"name\":\"getLayerIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dna\",\"type\":\"uint16\"}],\"name\":\"getRaceIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dna\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"hexString\",\"type\":\"bytes\"}],\"internalType\":\"struct ChainRunnersBaseRenderer.Layer[13]\",\"name\":\"tokenLayers\",\"type\":\"tuple[13]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"hexString\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"red\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"green\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blue\",\"type\":\"uint256\"}],\"internalType\":\"struct ChainRunnersBaseRenderer.Color[8][13]\",\"name\":\"tokenPalettes\",\"type\":\"tuple[8][13]\"},{\"internalType\":\"uint8\",\"name\":\"numTokenLayers\",\"type\":\"uint8\"},{\"internalType\":\"string[13]\",\"name\":\"traitTypes\",\"type\":\"string[13]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"hexString\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"layerIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"itemIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct ChainRunnersBaseRenderer.LayerInput[]\",\"name\":\"toSet\",\"type\":\"tuple[]\"}],\"name\":\"setLayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dna\",\"type\":\"uint256\"}],\"name\":\"tokenSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"hexString\",\"type\":\"bytes\"}],\"internalType\":\"struct ChainRunnersBaseRenderer.Layer[13]\",\"name\":\"tokenLayers\",\"type\":\"tuple[13]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"hexString\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"red\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"green\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blue\",\"type\":\"uint256\"}],\"internalType\":\"struct ChainRunnersBaseRenderer.Color[8][13]\",\"name\":\"tokenPalettes\",\"type\":\"tuple[8][13]\"},{\"internalType\":\"uint8\",\"name\":\"numTokenLayers\",\"type\":\"uint8\"}],\"name\":\"tokenSVGBuffer\",\"outputs\":[{\"internalType\":\"string[4]\",\"name\":\"\",\"type\":\"string[4]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dna\",\"type\":\"uint256\"}],\"internalType\":\"struct ChainRunnersTypes.ChainRunner\",\"name\":\"runnerData\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"layerIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"itemIndex\",\"type\":\"uint8\"}],\"name\":\"traitSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"d\",\"type\":\"uint8\"}],\"name\":\"uintToHexDigit\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"uintToHexString2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"uintToHexString6\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/runners/ChainRunnersLayerRenderer.sol\":\"ChainRunnersLayerRenderer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/runners/ChainRunnersBaseRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ChainRunnersTypes.sol\\\";\\n\\n/*\\n               ::::                                                                                                                                                  :::#%=\\n               @*==+-                                                                                                                                               ++==*=.\\n               #+=#=++..                                                                                                                                        ..=*=*+-#:\\n                :=+++++++=====================================:    .===============================================. .=========================================++++++++=\\n                 .%-+%##+=--==================================+=..=+-=============================================-+*+======================================---+##+=#-.\\n                   -+++@@%++++@@@%+++++++++++++++++++++++++++%#++++++%#+++#@@@#+++++++++@@%++++++++++++++++++++@#+.=+*@*+*@@@@*+++++++++++++++++++++++%@@@#+++#@@+++=\\n                    -*-#%@@%%%=*%@%*++=++=+==+=++=++=+=++=++==#@%#%#+++=+=*@%*+=+==+=+++%*++==+=++=+==+=++=+=++@%%#%#++++*@%#++=++=++=++=+=++=++=+=+*%%*==*%@@@*:%=\\n                     :@:+@@@@@@*+++%@@*+===========+*=========#@@========+#%==========*@========##*#*+=======*@##*======#@#+=======*#*============+#%++#@@%#@@#++=.\\n                      .*+=%@%*%@%##++@@%#=-==-=--==*%=========*%==--=--=-====--=--=-=##=--=-=--%%%%%+=-=--=-=*%=--=--=-=#%=--=----=#%=--=-=--=-+%#+==#%@@*#%@=++.\\n                        +%.#@@###%@@@@@%*---------#@%########@%*---------------------##---------------------##---------%%*--------@@#---------+#@=#@@#+==@@%*++-\\n                        .:*+*%@#+=*%@@@*=-------=#%#=-------=%*---------=*#*--------#+=--------===--------=#%*-------=#%*-------==@%#--------=%@@%#*+=-+#%*+*:.\\n       ====================%*.@@%#==+##%@*=----------------+@#+---------@@*-------=*@+---------@@*--------=@+--------+@=--------*@@+-------+#@@%#==---+#@.*%====================\\n     :*=--==================-:=#@@%*===+*@%+=============%%%@=========*%@*========+@+=--=====+%@+==========@+========+@========*%@@+======%%%**+=---=%@#=:-====================-#-\\n       +++**%@@@#*****************@#*=---=##%@@@@@@@@@@@@@#**@@@@****************%@@*+++@#***********#@************************************+=------=*@#*********************@#+=+:\\n        .-##=*@@%*----------------+%@%=---===+%@@@@@@@*+++---%#++----------------=*@@*+++=-----------=+#=------------------------------------------+%+--------------------+#@-=@\\n         :%:#%#####+=-=-*@@+--=-==-=*@=--=-==-=*@@#*=-==-=-+@===-==-=-=++==-=-==--=@%===-==----+-==-==--+*+-==-==---=*@@@@@@%#===-=-=+%@%-==-=-==-#@%=-==-==--+#@@@@@@@@@@@@*+++\\n        =*=#@#=----==-=-=++=--=-==-=*@=--=-==-=*@@+-=-==-==+@===-=--=-*@@*=-=-==--+@=--=-==--+#@-==-==---+%-==-==---=+++#@@@#--==-=-=++++-=--=-===#%+=-==-==---=++++++++@@@%.#*\\n        +#:@%*===================++%#=========%@%=========#%=========+#@%+=======#%==========*@#=========*%=========+*+%@@@+========+*==========+@@%+**+================*%#*=+=\\n       *++#@*+=++++++*#%*+++++=+++*%%++++=++++%%*=+++++++##*=++++=++=%@@++++=++=+#%++++=++++#%@=+++++++=*#*+++++++=#%@@@@@*++=++++=#%@*+++=++=+++@#*****=+++++++=+++++*%@@+:=+=\\n    :=*=#%#@@@@#%@@@%#@@#++++++++++%%*+++++++++++++++++**@*+++++++++*%#++++++++=*##++++++++*%@%+++++++++##+++++++++#%%%%%%++++**#@@@@@**+++++++++++++++++=*%@@@%#@@@@#%@@@%#@++*:.\\n    #*:@#=-+%#+:=*@*=-+@%#++++++++#%@@#*++++++++++++++#%@#*++++++++*@@#+++++++++@#++++++++*@@#+++++++++##*+++++++++++++++++###@@@@++*@@#+++++++++++++++++++*@@#=:+#%+--+@*=-+%*.@=\\n    ++=#%#+%@@%=#%@%#+%%#++++++*#@@@%###**************@@@++++++++**#@##*********#*********#@@#++++++***@#******%@%#*++**#@@@%##+==+++=*#**********%%*++++++++#%#=%@@%+*%@%*+%#*=*-\\n     .-*+===========*@@+++++*%%%@@@++***************+.%%*++++#%%%@@%=:=******************--@@#+++*%%@#==+***--*@%*++*%@@*===+**=--   -************++@%%#++++++#@@@*==========*+-\\n        =*******##.#%#++++*%@@@%+==+=             *#-%@%**%%###*====**-               -@:*@@##@###*==+**-.-#=+@@#*@##*==+***=                     =+=##%@*+++++*%@@#.#%******:\\n               ++++%#+++*#@@@@+++==.              **-@@@%+++++++===-                 -+++#@@+++++++==:  :+++%@@+++++++==:                          .=++++@%##++++@@%++++\\n             :%:*%%****%@@%+==*-                .%==*====**+...                      #*.#+==***....    #+=#%+==****:.                                ..-*=*%@%#++*#%@=+%.\\n            -+++#%+#%@@@#++===                  .@*++===-                            #%++===           %#+++===                                          =+++%@%##**@@*.@:\\n          .%-=%@##@@%*==++                                                                                                                                 .*==+#@@%*%@%=*=.\\n         .+++#@@@@@*++==.                                                                                                                                    -==++#@@@@@@=+%\\n       .=*=%@@%%%#=*=.                                                                                                                                          .*+=%@@@@%+-#.\\n       @=-@@@%:++++.                                                                                                                                              -+++**@@#+*=:\\n    .-+=*#%%++*::.                                                                                                                                                  :+**=#%@#==#\\n    #*:@*+++=:                                                                                                                                                          =+++@*++=:\\n  :*-=*=++..                                                                                                                                                             .=*=#*.%=\\n +#.=+++:                                                                                                                                                                   ++++:+#\\n*+=#-::                                                                                                                                                                      .::*+=*\\n\\n*/\\n\\ncontract ChainRunnersBaseRenderer is Ownable, ReentrancyGuard {\\n    struct SVGCursor {\\n        uint8 x;\\n        uint8 y;\\n        string color1;\\n        string color2;\\n        string color3;\\n        string color4;\\n    }\\n\\n    struct Buffer {\\n        string one;\\n        string two;\\n        string three;\\n        string four;\\n        string five;\\n        string six;\\n        string seven;\\n        string eight;\\n    }\\n\\n    struct Color {\\n        string hexString;\\n        uint256 alpha;\\n        uint256 red;\\n        uint256 green;\\n        uint256 blue;\\n    }\\n\\n    struct Layer {\\n        string name;\\n        bytes hexString;\\n    }\\n\\n    struct LayerInput {\\n        string name;\\n        bytes hexString;\\n        uint8 layerIndex;\\n        uint8 itemIndex;\\n    }\\n\\n    uint256 public constant NUM_LAYERS = 13;\\n    uint256 public constant NUM_COLORS = 8;\\n\\n    mapping(uint256 => Layer)[NUM_LAYERS] layers;\\n\\n    /*\\n    This indexes into a race, then a layer index, then an array capturing the frequency each layer should be selected.\\n    Shout out to Anonymice for the rarity impl inspiration.\\n    */\\n    uint16[][NUM_LAYERS][3] WEIGHTS;\\n\\n    constructor() {\\n        // Default\\n        WEIGHTS[0][0] = [\\n            36,\\n            225,\\n            225,\\n            225,\\n            360,\\n            135,\\n            27,\\n            360,\\n            315,\\n            315,\\n            315,\\n            315,\\n            225,\\n            180,\\n            225,\\n            180,\\n            360,\\n            180,\\n            45,\\n            360,\\n            360,\\n            360,\\n            27,\\n            36,\\n            360,\\n            45,\\n            180,\\n            360,\\n            225,\\n            360,\\n            225,\\n            225,\\n            360,\\n            180,\\n            45,\\n            360,\\n            18,\\n            225,\\n            225,\\n            225,\\n            225,\\n            180,\\n            225,\\n            361\\n        ];\\n        WEIGHTS[0][1] = [\\n            875,\\n            1269,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            17,\\n            8,\\n            41\\n        ];\\n        WEIGHTS[0][2] = [\\n            303,\\n            303,\\n            303,\\n            303,\\n            151,\\n            30,\\n            0,\\n            0,\\n            151,\\n            151,\\n            151,\\n            151,\\n            30,\\n            303,\\n            151,\\n            30,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            30,\\n            151,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            3066\\n        ];\\n        WEIGHTS[0][3] = [\\n            645,\\n            0,\\n            1290,\\n            322,\\n            645,\\n            645,\\n            645,\\n            967,\\n            322,\\n            967,\\n            645,\\n            967,\\n            967,\\n            973\\n        ];\\n        WEIGHTS[0][4] = [\\n            0,\\n            0,\\n            0,\\n            1250,\\n            1250,\\n            1250,\\n            1250,\\n            1250,\\n            1250,\\n            1250,\\n            1250\\n        ];\\n        WEIGHTS[0][5] = [\\n            121,\\n            121,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            0,\\n            0,\\n            0,\\n            0,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            243,\\n            0,\\n            0,\\n            0,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            306\\n        ];\\n        WEIGHTS[0][6] = [\\n            925,\\n            555,\\n            185,\\n            555,\\n            925,\\n            925,\\n            185,\\n            1296,\\n            1296,\\n            1296,\\n            1857\\n        ];\\n        WEIGHTS[0][7] = [88, 88, 88, 88, 88, 265, 442, 8853];\\n        WEIGHTS[0][8] = [189, 189, 47, 18, 9, 28, 37, 9483];\\n        WEIGHTS[0][9] = [\\n            340,\\n            340,\\n            340,\\n            340,\\n            340,\\n            340,\\n            34,\\n            340,\\n            340,\\n            340,\\n            340,\\n            170,\\n            170,\\n            170,\\n            102,\\n            238,\\n            238,\\n            238,\\n            272,\\n            340,\\n            340,\\n            340,\\n            272,\\n            238,\\n            238,\\n            238,\\n            238,\\n            170,\\n            34,\\n            340,\\n            340,\\n            136,\\n            340,\\n            340,\\n            340,\\n            340,\\n            344\\n        ];\\n        WEIGHTS[0][10] = [\\n            159,\\n            212,\\n            106,\\n            53,\\n            26,\\n            159,\\n            53,\\n            265,\\n            53,\\n            212,\\n            159,\\n            265,\\n            53,\\n            265,\\n            265,\\n            212,\\n            53,\\n            159,\\n            239,\\n            53,\\n            106,\\n            5,\\n            106,\\n            53,\\n            212,\\n            212,\\n            106,\\n            159,\\n            212,\\n            265,\\n            212,\\n            265,\\n            5066\\n        ];\\n        WEIGHTS[0][11] = [\\n            139,\\n            278,\\n            278,\\n            250,\\n            250,\\n            194,\\n            222,\\n            278,\\n            278,\\n            194,\\n            222,\\n            83,\\n            222,\\n            278,\\n            139,\\n            139,\\n            27,\\n            278,\\n            278,\\n            278,\\n            278,\\n            27,\\n            278,\\n            139,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            27,\\n            139,\\n            139,\\n            139,\\n            139,\\n            0,\\n            278,\\n            194,\\n            83,\\n            83,\\n            278,\\n            83,\\n            27,\\n            306\\n        ];\\n        WEIGHTS[0][12] = [981, 2945, 654, 16, 981, 327, 654, 163, 3279];\\n\\n        // Skull\\n        WEIGHTS[1][0] = [\\n            36,\\n            225,\\n            225,\\n            225,\\n            360,\\n            135,\\n            27,\\n            360,\\n            315,\\n            315,\\n            315,\\n            315,\\n            225,\\n            180,\\n            225,\\n            180,\\n            360,\\n            180,\\n            45,\\n            360,\\n            360,\\n            360,\\n            27,\\n            36,\\n            360,\\n            45,\\n            180,\\n            360,\\n            225,\\n            360,\\n            225,\\n            225,\\n            360,\\n            180,\\n            45,\\n            360,\\n            18,\\n            225,\\n            225,\\n            225,\\n            225,\\n            180,\\n            225,\\n            361\\n        ];\\n        WEIGHTS[1][1] = [\\n            875,\\n            1269,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            17,\\n            8,\\n            41\\n        ];\\n        WEIGHTS[1][2] = [\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            10000\\n        ];\\n        WEIGHTS[1][3] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\\n        WEIGHTS[1][4] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\\n        WEIGHTS[1][5] = [\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            384,\\n            7692,\\n            1923,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1\\n        ];\\n        WEIGHTS[1][6] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10000];\\n        WEIGHTS[1][7] = [0, 0, 0, 0, 0, 909, 0, 9091];\\n        WEIGHTS[1][8] = [0, 0, 0, 0, 0, 0, 0, 10000];\\n        WEIGHTS[1][9] = [\\n            526,\\n            526,\\n            526,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            526,\\n            0,\\n            0,\\n            0,\\n            526,\\n            0,\\n            526,\\n            0,\\n            0,\\n            0,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            0,\\n            0,\\n            526,\\n            0,\\n            0,\\n            0,\\n            0,\\n            532\\n        ];\\n        WEIGHTS[1][10] = [\\n            80,\\n            0,\\n            400,\\n            240,\\n            80,\\n            0,\\n            240,\\n            0,\\n            0,\\n            80,\\n            80,\\n            80,\\n            0,\\n            0,\\n            0,\\n            0,\\n            80,\\n            80,\\n            0,\\n            0,\\n            80,\\n            80,\\n            0,\\n            80,\\n            80,\\n            80,\\n            80,\\n            80,\\n            0,\\n            0,\\n            0,\\n            0,\\n            8000\\n        ];\\n        WEIGHTS[1][11] = [\\n            289,\\n            0,\\n            0,\\n            0,\\n            0,\\n            404,\\n            462,\\n            578,\\n            578,\\n            0,\\n            462,\\n            173,\\n            462,\\n            578,\\n            0,\\n            0,\\n            57,\\n            0,\\n            57,\\n            0,\\n            57,\\n            57,\\n            578,\\n            289,\\n            578,\\n            57,\\n            0,\\n            57,\\n            57,\\n            57,\\n            578,\\n            578,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            57,\\n            289,\\n            578,\\n            0,\\n            0,\\n            0,\\n            231,\\n            57,\\n            0,\\n            0,\\n            1745\\n        ];\\n        WEIGHTS[1][12] = [714, 714, 714, 0, 714, 0, 0, 0, 7144];\\n\\n        // Bot\\n        WEIGHTS[2][0] = [\\n            36,\\n            225,\\n            225,\\n            225,\\n            360,\\n            135,\\n            27,\\n            360,\\n            315,\\n            315,\\n            315,\\n            315,\\n            225,\\n            180,\\n            225,\\n            180,\\n            360,\\n            180,\\n            45,\\n            360,\\n            360,\\n            360,\\n            27,\\n            36,\\n            360,\\n            45,\\n            180,\\n            360,\\n            225,\\n            360,\\n            225,\\n            225,\\n            360,\\n            180,\\n            45,\\n            360,\\n            18,\\n            225,\\n            225,\\n            225,\\n            225,\\n            180,\\n            225,\\n            361\\n        ];\\n        WEIGHTS[2][1] = [\\n            875,\\n            1269,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            17,\\n            8,\\n            41\\n        ];\\n        WEIGHTS[2][2] = [\\n            303,\\n            303,\\n            303,\\n            303,\\n            151,\\n            30,\\n            0,\\n            0,\\n            151,\\n            151,\\n            151,\\n            151,\\n            30,\\n            303,\\n            151,\\n            30,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            30,\\n            151,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            3066\\n        ];\\n        WEIGHTS[2][3] = [\\n            645,\\n            0,\\n            1290,\\n            322,\\n            645,\\n            645,\\n            645,\\n            967,\\n            322,\\n            967,\\n            645,\\n            967,\\n            967,\\n            973\\n        ];\\n        WEIGHTS[2][4] = [2500, 2500, 2500, 0, 0, 0, 0, 0, 0, 2500, 0];\\n        WEIGHTS[2][5] = [\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            588,\\n            588,\\n            588,\\n            588,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            588,\\n            588,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            4\\n        ];\\n        WEIGHTS[2][6] = [\\n            925,\\n            555,\\n            185,\\n            555,\\n            925,\\n            925,\\n            185,\\n            1296,\\n            1296,\\n            1296,\\n            1857\\n        ];\\n        WEIGHTS[2][7] = [88, 88, 88, 88, 88, 265, 442, 8853];\\n        WEIGHTS[2][8] = [183, 274, 274, 18, 18, 27, 36, 9170];\\n        WEIGHTS[2][9] = [\\n            340,\\n            340,\\n            340,\\n            340,\\n            340,\\n            340,\\n            34,\\n            340,\\n            340,\\n            340,\\n            340,\\n            170,\\n            170,\\n            170,\\n            102,\\n            238,\\n            238,\\n            238,\\n            272,\\n            340,\\n            340,\\n            340,\\n            272,\\n            238,\\n            238,\\n            238,\\n            238,\\n            170,\\n            34,\\n            340,\\n            340,\\n            136,\\n            340,\\n            340,\\n            340,\\n            340,\\n            344\\n        ];\\n        WEIGHTS[2][10] = [\\n            217,\\n            362,\\n            217,\\n            144,\\n            72,\\n            289,\\n            144,\\n            362,\\n            72,\\n            289,\\n            217,\\n            362,\\n            72,\\n            362,\\n            362,\\n            289,\\n            0,\\n            217,\\n            0,\\n            72,\\n            144,\\n            7,\\n            217,\\n            72,\\n            217,\\n            217,\\n            289,\\n            217,\\n            289,\\n            362,\\n            217,\\n            362,\\n            3269\\n        ];\\n        WEIGHTS[2][11] = [\\n            139,\\n            278,\\n            278,\\n            250,\\n            250,\\n            194,\\n            222,\\n            278,\\n            278,\\n            194,\\n            222,\\n            83,\\n            222,\\n            278,\\n            139,\\n            139,\\n            27,\\n            278,\\n            278,\\n            278,\\n            278,\\n            27,\\n            278,\\n            139,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            27,\\n            139,\\n            139,\\n            139,\\n            139,\\n            0,\\n            278,\\n            194,\\n            83,\\n            83,\\n            278,\\n            83,\\n            27,\\n            306\\n        ];\\n        WEIGHTS[2][12] = [981, 2945, 654, 16, 981, 327, 654, 163, 3279];\\n    }\\n\\n    function setLayers(LayerInput[] calldata toSet) external virtual onlyOwner {\\n        for (uint16 i = 0; i < toSet.length; i++) {\\n            layers[toSet[i].layerIndex][toSet[i].itemIndex] = Layer(\\n                toSet[i].name,\\n                toSet[i].hexString\\n            );\\n        }\\n    }\\n\\n    function getLayer(uint8 layerIndex, uint8 itemIndex)\\n        public\\n        view\\n        virtual\\n        returns (Layer memory)\\n    {\\n        return layers[layerIndex][itemIndex];\\n    }\\n\\n    /*\\n    Get race index.  Race index represents the \\\"type\\\" of base character:\\n\\n    0 - Default, representing human and alien characters\\n    1 - Skull\\n    2 - Bot\\n\\n    This allows skull/bot characters to have distinct trait distributions.\\n    */\\n    function getRaceIndex(uint16 _dna) public view returns (uint8) {\\n        uint16 lowerBound;\\n        uint16 percentage;\\n        for (uint8 i; i < WEIGHTS[0][1].length; i++) {\\n            percentage = WEIGHTS[0][1][i];\\n            if (_dna >= lowerBound && _dna < lowerBound + percentage) {\\n                if (i == 1) {\\n                    // Bot\\n                    return 2;\\n                } else if (i > 11) {\\n                    // Skull\\n                    return 1;\\n                } else {\\n                    // Default\\n                    return 0;\\n                }\\n            }\\n            lowerBound += percentage;\\n        }\\n        revert();\\n    }\\n\\n    function getLayerIndex(\\n        uint16 _dna,\\n        uint8 _index,\\n        uint16 _raceIndex\\n    ) public view returns (uint8) {\\n        uint16 lowerBound;\\n        uint16 percentage;\\n        for (uint8 i; i < WEIGHTS[_raceIndex][_index].length; i++) {\\n            percentage = WEIGHTS[_raceIndex][_index][i];\\n            if (_dna >= lowerBound && _dna < lowerBound + percentage) {\\n                return i;\\n            }\\n            lowerBound += percentage;\\n        }\\n        // If not found, return index higher than available layers.  Will get filtered out.\\n        return uint8(WEIGHTS[_raceIndex][_index].length);\\n    }\\n\\n    /*\\n    Generate base64 encoded tokenURI.\\n\\n    All string constants are pre-base64 encoded to save gas.\\n    Input strings are padded with spacing/etc to ensure their length is a multiple of 3.\\n    This way the resulting base64 encoded string is a multiple of 4 and will not include any '=' padding characters,\\n    which allows these base64 string snippets to be concatenated with other snippets.\\n    */\\n    function tokenURI(\\n        uint256 tokenId,\\n        ChainRunnersTypes.ChainRunner memory runnerData\\n    ) public view returns (string memory) {\\n        (\\n            Layer[NUM_LAYERS] memory tokenLayers,\\n            Color[NUM_COLORS][NUM_LAYERS] memory tokenPalettes,\\n            uint8 numTokenLayers,\\n            string[NUM_LAYERS] memory traitTypes\\n        ) = getTokenData(runnerData.dna);\\n        string memory attributes;\\n        for (uint8 i = 0; i < numTokenLayers; i++) {\\n            attributes = string(\\n                abi.encodePacked(\\n                    attributes,\\n                    bytes(attributes).length == 0 ? \\\"eyAg\\\" : \\\"LCB7\\\",\\n                    \\\"InRyYWl0X3R5cGUiOiAi\\\",\\n                    traitTypes[i],\\n                    \\\"IiwidmFsdWUiOiAi\\\",\\n                    tokenLayers[i].name,\\n                    \\\"IiB9\\\"\\n                )\\n            );\\n        }\\n        string[4] memory svgBuffers = tokenSVGBuffer(\\n            tokenLayers,\\n            tokenPalettes,\\n            numTokenLayers\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,eyAgImltYWdlX2RhdGEiOiAiPHN2ZyB2ZXJzaW9uPScxLjEnIHZpZXdCb3g9JzAgMCAzMjAgMzIwJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHNoYXBlLXJlbmRlcmluZz0nY3Jpc3BFZGdlcyc+\\\",\\n                    svgBuffers[0],\\n                    svgBuffers[1],\\n                    svgBuffers[2],\\n                    svgBuffers[3],\\n                    \\\"PHN0eWxlPnJlY3R7d2lkdGg6MTBweDtoZWlnaHQ6MTBweDt9PC9zdHlsZT48L3N2Zz4gIiwgImF0dHJpYnV0ZXMiOiBb\\\",\\n                    attributes,\\n                    \\\"XSwgICAibmFtZSI6IlJ1bm5lciAj\\\",\\n                    Base64.encode(uintToByteString(tokenId, 6)),\\n                    \\\"IiwgImRlc2NyaXB0aW9uIjogIkNoYWluIFJ1bm5lcnMgYXJlIE1lZ2EgQ2l0eSByZW5lZ2FkZXMgMTAwJSBnZW5lcmF0ZWQgb24gY2hhaW4uIn0g\\\"\\n                )\\n            );\\n    }\\n\\n    function tokenSVG(uint256 _dna) public view returns (string memory) {\\n        (\\n            Layer[NUM_LAYERS] memory tokenLayers,\\n            Color[NUM_COLORS][NUM_LAYERS] memory tokenPalettes,\\n            uint8 numTokenLayers,\\n\\n        ) = getTokenData(_dna);\\n        string[4] memory buffer256 = tokenSVGBuffer(\\n            tokenLayers,\\n            tokenPalettes,\\n            numTokenLayers\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"PHN2ZyB2ZXJzaW9uPScxLjEnIHZpZXdCb3g9JzAgMCAzMiAzMicgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyBzaGFwZS1yZW5kZXJpbmc9J2NyaXNwRWRnZXMnIGhlaWdodD0nMTAwJScgd2lkdGg9JzEwMCUnICA+\\\",\\n                    buffer256[0],\\n                    buffer256[1],\\n                    buffer256[2],\\n                    buffer256[3],\\n                    \\\"PHN0eWxlPnJlY3R7d2lkdGg6MXB4O2hlaWdodDoxcHg7fTwvc3R5bGU+PC9zdmc+\\\"\\n                )\\n            );\\n    }\\n\\n    function getTokenData(uint256 _dna)\\n        public\\n        view\\n        returns (\\n            Layer[NUM_LAYERS] memory tokenLayers,\\n            Color[NUM_COLORS][NUM_LAYERS] memory tokenPalettes,\\n            uint8 numTokenLayers,\\n            string[NUM_LAYERS] memory traitTypes\\n        )\\n    {\\n        uint16[NUM_LAYERS] memory dna = splitNumber(_dna);\\n        uint16 raceIndex = getRaceIndex(dna[1]);\\n\\n        bool hasFaceAcc = dna[7] < (10000 - WEIGHTS[raceIndex][7][7]);\\n        bool hasMask = dna[8] < (10000 - WEIGHTS[raceIndex][8][7]);\\n        bool hasHeadBelow = dna[9] < (10000 - WEIGHTS[raceIndex][9][36]);\\n        bool hasHeadAbove = dna[11] < (10000 - WEIGHTS[raceIndex][11][48]);\\n        bool useHeadAbove = (dna[0] % 2) > 0;\\n        for (uint8 i = 0; i < NUM_LAYERS; i++) {\\n            Layer memory layer = getLayer(\\n                i,\\n                getLayerIndex(dna[i], i, raceIndex)\\n            );\\n            if (layer.hexString.length > 0) {\\n                /*\\n                These conditions help make sure layer selection meshes well visually.\\n                1. If mask, no face/eye acc/mouth acc\\n                2. If face acc, no mask/mouth acc/face\\n                3. If both head above & head below, randomly choose one\\n                */\\n                if (\\n                    ((i == 2 || i == 12) && !hasMask && !hasFaceAcc) ||\\n                    (i == 7 && !hasMask) ||\\n                    (i == 10 && !hasMask) ||\\n                    (i < 2 || (i > 2 && i < 7) || i == 8 || i == 9 || i == 11)\\n                ) {\\n                    if (\\n                        (hasHeadBelow &&\\n                            hasHeadAbove &&\\n                            (i == 9 && useHeadAbove)) ||\\n                        (i == 11 && !useHeadAbove)\\n                    ) continue;\\n                    tokenLayers[numTokenLayers] = layer;\\n                    tokenPalettes[numTokenLayers] = palette(\\n                        tokenLayers[numTokenLayers].hexString\\n                    );\\n                    traitTypes[numTokenLayers] = [\\n                        \\\"QmFja2dyb3VuZCAg\\\",\\n                        \\\"UmFjZSAg\\\",\\n                        \\\"RmFjZSAg\\\",\\n                        \\\"TW91dGgg\\\",\\n                        \\\"Tm9zZSAg\\\",\\n                        \\\"RXllcyAg\\\",\\n                        \\\"RWFyIEFjY2Vzc29yeSAg\\\",\\n                        \\\"RmFjZSBBY2Nlc3Nvcnkg\\\",\\n                        \\\"TWFzayAg\\\",\\n                        \\\"SGVhZCBCZWxvdyAg\\\",\\n                        \\\"RXllIEFjY2Vzc29yeSAg\\\",\\n                        \\\"SGVhZCBBYm92ZSAg\\\",\\n                        \\\"TW91dGggQWNjZXNzb3J5\\\"\\n                    ][i];\\n                    numTokenLayers++;\\n                }\\n            }\\n        }\\n        return (tokenLayers, tokenPalettes, numTokenLayers, traitTypes);\\n    }\\n\\n    /*\\n    Generate svg rects, leaving un-concatenated to save a redundant concatenation in calling functions to reduce gas.\\n    Shout out to Blitmap for a lot of the inspiration for efficient rendering here.\\n    */\\n    function tokenSVGBuffer(\\n        Layer[NUM_LAYERS] memory tokenLayers,\\n        Color[NUM_COLORS][NUM_LAYERS] memory tokenPalettes,\\n        uint8 numTokenLayers\\n    ) public pure returns (string[4] memory) {\\n        // Base64 encoded lookups into x/y position strings from 010 to 310.\\n        string[32] memory lookup = [\\n            \\\"MDAw\\\",\\n            \\\"MDEw\\\",\\n            \\\"MDIw\\\",\\n            \\\"MDMw\\\",\\n            \\\"MDQw\\\",\\n            \\\"MDUw\\\",\\n            \\\"MDYw\\\",\\n            \\\"MDcw\\\",\\n            \\\"MDgw\\\",\\n            \\\"MDkw\\\",\\n            \\\"MTAw\\\",\\n            \\\"MTEw\\\",\\n            \\\"MTIw\\\",\\n            \\\"MTMw\\\",\\n            \\\"MTQw\\\",\\n            \\\"MTUw\\\",\\n            \\\"MTYw\\\",\\n            \\\"MTcw\\\",\\n            \\\"MTgw\\\",\\n            \\\"MTkw\\\",\\n            \\\"MjAw\\\",\\n            \\\"MjEw\\\",\\n            \\\"MjIw\\\",\\n            \\\"MjMw\\\",\\n            \\\"MjQw\\\",\\n            \\\"MjUw\\\",\\n            \\\"MjYw\\\",\\n            \\\"Mjcw\\\",\\n            \\\"Mjgw\\\",\\n            \\\"Mjkw\\\",\\n            \\\"MzAw\\\",\\n            \\\"MzEw\\\"\\n        ];\\n        SVGCursor memory cursor;\\n\\n        /*\\n        Rather than concatenating the result string with itself over and over (e.g. result = abi.encodePacked(result, newString)),\\n        we fill up multiple levels of buffers.  This reduces redundant intermediate concatenations, performing O(log(n)) concats\\n        instead of O(n) concats.  Buffers beyond a length of about 12 start hitting stack too deep issues, so using a length of 8\\n        because the pixel math is convenient.\\n        */\\n        Buffer memory buffer4;\\n        // 4 pixels per slot, 32 total.  Struct is ever so slightly better for gas, so using when convenient.\\n        string[8] memory buffer32;\\n        // 32 pixels per slot, 256 total\\n        string[4] memory buffer256;\\n        // 256 pixels per slot, 1024 total\\n        uint8 buffer32count;\\n        uint8 buffer256count;\\n        for (uint256 k = 32; k < 416; ) {\\n            cursor.color1 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                0,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color2 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                1,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color3 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                2,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color4 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                3,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            buffer4.one = pixel4(lookup, cursor);\\n            cursor.x += 4;\\n\\n            cursor.color1 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                4,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color2 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                5,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color3 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                6,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color4 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                7,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            buffer4.two = pixel4(lookup, cursor);\\n            cursor.x += 4;\\n\\n            k += 3;\\n\\n            cursor.color1 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                0,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color2 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                1,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color3 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                2,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color4 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                3,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            buffer4.three = pixel4(lookup, cursor);\\n            cursor.x += 4;\\n\\n            cursor.color1 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                4,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color2 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                5,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color3 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                6,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color4 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                7,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            buffer4.four = pixel4(lookup, cursor);\\n            cursor.x += 4;\\n\\n            k += 3;\\n\\n            cursor.color1 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                0,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color2 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                1,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color3 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                2,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color4 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                3,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            buffer4.five = pixel4(lookup, cursor);\\n            cursor.x += 4;\\n\\n            cursor.color1 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                4,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color2 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                5,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color3 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                6,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color4 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                7,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            buffer4.six = pixel4(lookup, cursor);\\n            cursor.x += 4;\\n\\n            k += 3;\\n\\n            cursor.color1 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                0,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color2 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                1,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color3 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                2,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color4 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                3,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            buffer4.seven = pixel4(lookup, cursor);\\n            cursor.x += 4;\\n\\n            cursor.color1 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                4,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color2 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                5,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color3 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                6,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            cursor.color4 = colorForIndex(\\n                tokenLayers,\\n                k,\\n                7,\\n                tokenPalettes,\\n                numTokenLayers\\n            );\\n            buffer4.eight = pixel4(lookup, cursor);\\n            cursor.x += 4;\\n\\n            k += 3;\\n\\n            buffer32[buffer32count++] = string(\\n                abi.encodePacked(\\n                    buffer4.one,\\n                    buffer4.two,\\n                    buffer4.three,\\n                    buffer4.four,\\n                    buffer4.five,\\n                    buffer4.six,\\n                    buffer4.seven,\\n                    buffer4.eight\\n                )\\n            );\\n            cursor.x = 0;\\n            cursor.y += 1;\\n            if (buffer32count >= 8) {\\n                buffer256[buffer256count++] = string(\\n                    abi.encodePacked(\\n                        buffer32[0],\\n                        buffer32[1],\\n                        buffer32[2],\\n                        buffer32[3],\\n                        buffer32[4],\\n                        buffer32[5],\\n                        buffer32[6],\\n                        buffer32[7]\\n                    )\\n                );\\n                buffer32count = 0;\\n            }\\n        }\\n        // At this point, buffer256 contains 4 strings or 256*4=1024=32x32 pixels\\n        return buffer256;\\n    }\\n\\n    function palette(bytes memory data)\\n        internal\\n        pure\\n        returns (Color[NUM_COLORS] memory)\\n    {\\n        Color[NUM_COLORS] memory colors;\\n        for (uint16 i = 0; i < NUM_COLORS; i++) {\\n            // Even though this can be computed later from the RGBA values below, it saves gas to pre-compute it once upfront.\\n            colors[i].hexString = Base64.encode(\\n                bytes(\\n                    abi.encodePacked(\\n                        byteToHexString(data[i * 4]),\\n                        byteToHexString(data[i * 4 + 1]),\\n                        byteToHexString(data[i * 4 + 2])\\n                    )\\n                )\\n            );\\n            colors[i].red = byteToUint(data[i * 4]);\\n            colors[i].green = byteToUint(data[i * 4 + 1]);\\n            colors[i].blue = byteToUint(data[i * 4 + 2]);\\n            colors[i].alpha = byteToUint(data[i * 4 + 3]);\\n        }\\n        return colors;\\n    }\\n\\n    function colorForIndex(\\n        Layer[NUM_LAYERS] memory tokenLayers,\\n        uint256 k,\\n        uint256 index,\\n        Color[NUM_COLORS][NUM_LAYERS] memory palettes,\\n        uint256 numTokenLayers\\n    ) internal pure returns (string memory) {\\n        for (uint256 i = 0; i < numTokenLayers; i++) {\\n            Color memory fg = palettes[numTokenLayers - 1 - i][\\n                colorIndex(\\n                    tokenLayers[numTokenLayers - 1 - i].hexString,\\n                    k,\\n                    index\\n                )\\n            ];\\n            // Since most layer pixels are transparent, performing this check first saves gas\\n            if (fg.alpha == 0) {\\n                continue;\\n            } else if (fg.alpha == 255) {\\n                return fg.hexString;\\n            } else {\\n                if (numTokenLayers - 2 - i >= 0) {\\n                    for (uint256 j = numTokenLayers - 2 - i; j >= 0; j--) {\\n                        Color memory bg = palettes[j][\\n                            colorIndex(tokenLayers[j].hexString, k, index)\\n                        ];\\n                        /* As a simplification, blend with first non-transparent layer then stop.\\n                    We won't generally have overlapping semi-transparent pixels.\\n                    */\\n                        if (bg.alpha > 0) {\\n                            return Base64.encode(bytes(blendColors(fg, bg)));\\n                        }\\n                    }\\n                } else {\\n                    return fg.hexString;\\n                }\\n            }\\n        }\\n        return Base64.encode(bytes(\\\"ffffff\\\"));\\n    }\\n\\n    /*\\n    Each color index is 3 bits (there are 8 colors, so 3 bits are needed to index into them).\\n    Since 3 bits doesn't divide cleanly into 8 bits (1 byte), we look up colors 24 bits (3 bytes) at a time.\\n    \\\"k\\\" is the starting byte index, and \\\"index\\\" is the color index within the 3 bytes starting at k.\\n    */\\n    function colorIndex(\\n        bytes memory data,\\n        uint256 k,\\n        uint256 index\\n    ) internal pure returns (uint8) {\\n        if (index == 0) {\\n            return uint8(data[k]) >> 5;\\n        } else if (index == 1) {\\n            return (uint8(data[k]) >> 2) % 8;\\n        } else if (index == 2) {\\n            return ((uint8(data[k]) % 4) * 2) + (uint8(data[k + 1]) >> 7);\\n        } else if (index == 3) {\\n            return (uint8(data[k + 1]) >> 4) % 8;\\n        } else if (index == 4) {\\n            return (uint8(data[k + 1]) >> 1) % 8;\\n        } else if (index == 5) {\\n            return ((uint8(data[k + 1]) % 2) * 4) + (uint8(data[k + 2]) >> 6);\\n        } else if (index == 6) {\\n            return (uint8(data[k + 2]) >> 3) % 8;\\n        } else {\\n            return uint8(data[k + 2]) % 8;\\n        }\\n    }\\n\\n    /*\\n    Create 4 svg rects, pre-base64 encoding the svg constants to save gas.\\n    */\\n    function pixel4(string[32] memory lookup, SVGCursor memory cursor)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"PHJlY3QgICBmaWxsPScj\\\",\\n                    cursor.color1,\\n                    \\\"JyAgeD0n\\\",\\n                    lookup[cursor.x],\\n                    \\\"JyAgeT0n\\\",\\n                    lookup[cursor.y],\\n                    \\\"JyAvPjxyZWN0ICBmaWxsPScj\\\",\\n                    cursor.color2,\\n                    \\\"JyAgeD0n\\\",\\n                    lookup[cursor.x + 1],\\n                    \\\"JyAgeT0n\\\",\\n                    lookup[cursor.y],\\n                    \\\"JyAvPjxyZWN0ICBmaWxsPScj\\\",\\n                    cursor.color3,\\n                    \\\"JyAgeD0n\\\",\\n                    lookup[cursor.x + 2],\\n                    \\\"JyAgeT0n\\\",\\n                    lookup[cursor.y],\\n                    \\\"JyAvPjxyZWN0ICBmaWxsPScj\\\",\\n                    cursor.color4,\\n                    \\\"JyAgeD0n\\\",\\n                    lookup[cursor.x + 3],\\n                    \\\"JyAgeT0n\\\",\\n                    lookup[cursor.y],\\n                    \\\"JyAgIC8+\\\"\\n                )\\n            );\\n    }\\n\\n    /*\\n    Blend colors, inspired by https://stackoverflow.com/a/12016968\\n    */\\n    function blendColors(Color memory fg, Color memory bg)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 alpha = uint16(fg.alpha + 1);\\n        uint256 inv_alpha = uint16(256 - fg.alpha);\\n        return\\n            uintToHexString6(\\n                uint24((alpha * fg.blue + inv_alpha * bg.blue) >> 8) +\\n                    (uint24((alpha * fg.green + inv_alpha * bg.green) >> 8) <<\\n                        8) +\\n                    (uint24((alpha * fg.red + inv_alpha * bg.red) >> 8) << 16)\\n            );\\n    }\\n\\n    function splitNumber(uint256 _number)\\n        internal\\n        pure\\n        returns (uint16[NUM_LAYERS] memory numbers)\\n    {\\n        for (uint256 i = 0; i < numbers.length; i++) {\\n            numbers[i] = uint16(_number % 10000);\\n            _number >>= 14;\\n        }\\n        return numbers;\\n    }\\n\\n    function uintToHexDigit(uint8 d) public pure returns (bytes1) {\\n        if (0 <= d && d <= 9) {\\n            return bytes1(uint8(bytes1(\\\"0\\\")) + d);\\n        } else if (10 <= uint8(d) && uint8(d) <= 15) {\\n            return bytes1(uint8(bytes1(\\\"a\\\")) + d - 10);\\n        }\\n        revert();\\n    }\\n\\n    /*\\n    Convert uint to hex string, padding to 6 hex nibbles\\n    */\\n    function uintToHexString6(uint256 a) public pure returns (string memory) {\\n        string memory str = uintToHexString2(a);\\n        if (bytes(str).length == 2) {\\n            return string(abi.encodePacked(\\\"0000\\\", str));\\n        } else if (bytes(str).length == 3) {\\n            return string(abi.encodePacked(\\\"000\\\", str));\\n        } else if (bytes(str).length == 4) {\\n            return string(abi.encodePacked(\\\"00\\\", str));\\n        } else if (bytes(str).length == 5) {\\n            return string(abi.encodePacked(\\\"0\\\", str));\\n        }\\n        return str;\\n    }\\n\\n    /*\\n    Convert uint to hex string, padding to 2 hex nibbles\\n    */\\n    function uintToHexString2(uint256 a) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = a;\\n        while (b != 0) {\\n            count++;\\n            b /= 16;\\n        }\\n        bytes memory res = new bytes(count);\\n        for (uint256 i = 0; i < count; ++i) {\\n            b = a % 16;\\n            res[count - i - 1] = uintToHexDigit(uint8(b));\\n            a /= 16;\\n        }\\n\\n        string memory str = string(res);\\n        if (bytes(str).length == 0) {\\n            return \\\"00\\\";\\n        } else if (bytes(str).length == 1) {\\n            return string(abi.encodePacked(\\\"0\\\", str));\\n        }\\n        return str;\\n    }\\n\\n    /*\\n    Convert uint to byte string, padding number string with spaces at end.\\n    Useful to ensure result's length is a multiple of 3, and therefore base64 encoding won't\\n    result in '=' padding chars.\\n    */\\n    function uintToByteString(uint256 a, uint256 fixedLen)\\n        internal\\n        pure\\n        returns (bytes memory _uintAsString)\\n    {\\n        uint256 j = a;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(fixedLen);\\n        j = fixedLen;\\n        if (a == 0) {\\n            bstr[0] = \\\"0\\\";\\n            len = 1;\\n        }\\n        while (j > len) {\\n            j = j - 1;\\n            bstr[j] = bytes1(\\\" \\\");\\n        }\\n        uint256 k = len;\\n        while (a != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(a - (a / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            a /= 10;\\n        }\\n        return bstr;\\n    }\\n\\n    function byteToUint(bytes1 b) public pure returns (uint256) {\\n        return uint256(uint8(b));\\n    }\\n\\n    function byteToHexString(bytes1 b) public pure returns (string memory) {\\n        return uintToHexString2(byteToUint(b));\\n    }\\n}\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0xad210b9baaef96b042c2862d14aded9be71f5cdd2645a9ce0f3bcb033d5c1d1f\",\"license\":\"MIT\"},\"contracts/runners/ChainRunnersLayerRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./ChainRunnersBaseRenderer.sol\\\";\\n\\ncontract ChainRunnersLayerRenderer is ChainRunnersBaseRenderer {\\n    function traitSVG(uint8 layerIndex, uint8 itemIndex)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        Layer[NUM_LAYERS] memory tokenLayers;\\n        Color[NUM_COLORS][NUM_LAYERS] memory tokenPalettes;\\n        Layer memory layer = getLayer(layerIndex, itemIndex);\\n\\n        tokenLayers[0] = layer;\\n        tokenPalettes[0] = palette(tokenLayers[0].hexString);\\n        string[4] memory buffer256 = tokenSVGBuffer(\\n            tokenLayers,\\n            tokenPalettes,\\n            1\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"PHN2ZyB2ZXJzaW9uPScxLjEnIHZpZXdCb3g9JzAgMCAzMjAgMzIwJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHNoYXBlLXJlbmRlcmluZz0nY3Jpc3BFZGdlcycgaGVpZ2h0PScxMDAlJyB3aWR0aD0nMTAwJSc+\\\",\\n                    buffer256[0],\\n                    buffer256[1],\\n                    buffer256[2],\\n                    buffer256[3],\\n                    \\\"PHN0eWxlPnJlY3R7d2lkdGg6MTBweDtoZWlnaHQ6MTBweDt9PC9zdHlsZT48L3N2Zz4=\\\"\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x040d73c2fed6c6e660dd6996051a37a50e73a9629aad17003dab0dec7f9575cf\",\"license\":\"MIT\"},\"contracts/runners/ChainRunnersTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ChainRunnersTypes {\\n    struct ChainRunner {\\n        uint256 dna;\\n    }\\n}\\n\",\"keccak256\":\"0x86ef9f232342d7ca20fad7cedc357c8fc4033c4ed0318b71cf83a12b5d011e48\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362002413565b600180556040805161058081018252602480825260e1602083018190529282018390526060820183905261016860808301819052608760a0840152601b60c0840181905260e0840182905261013b610100850181905261012085018190526101408501819052610160850152610180840185905260b46101a085018190526101c085018690526101e0850181905261020085018390526102208501819052602d6102408601819052610260860184905261028086018490526102a086018490526102c08601929092526102e0850193909352610300840182905261032084018190526103408401839052610360840182905261038084018590526103a084018290526103c084018590526103e084018590526104008401829052610420840183905261044084015261046083015260126104808301526104a082018390526104c082018390526104e0820183905261050082018390526105208201526105408101919091526101696105608201526200019b90600f90602c62002463565b50604080516101e08101825261036b81526104f5602082015261030b918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152601161018082015260086101a082015260296101c08201526200022990601090600f62002463565b50604080516104208101825261012f8082526020820181905291810182905260608101829052609760808201819052601e60a08301819052600060c0840181905260e0840152610100830182905261012083018290526101408301829052610160830182905261018083018190526101a083018490526101c083018290526101e08301819052610200830184905261022083018490526102408301849052610260830184905261028083018490526102a083018490526102c08301526102e0820152610300810182905261032081018290526103408101829052610360810182905261038081018290526103a081018290526103c081018290526103e0810191909152610bfa6104008201526200034590601190602162002463565b50604080516101c0810182526102858082526000602083015261050a92820192909252610142606082018190526080820183905260a0820183905260c082018390526103c760e08301819052610100830191909152610120820181905261014082019290925261016081018290526101808101919091526103cd6101a0820152620003d590601290600e62002463565b506040805161016081018252600080825260208201819052918101919091526104e2606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201526200044090601390600b62002463565b506040805161094081018252607980825260208201819052918101829052606081018290526080810182905260a0810182905260f360c08201819052600060e08301819052610100830181905261012083018190526101408301819052610160830184905261018083018490526101a083018290526101c083018490526101e08301849052610200830182905261022083018490526102408301849052610260830184905261028083018490526102a083018490526102c083018290526102e08301849052610300830184905261032083018490526103408301849052610360830182905261038083018490526103a083018490526103c083018490526103e08301849052610400830182905261042083018490526104408301849052610460830184905261048083018290526104a083018490526104c083018490526104e08301849052610500830184905261052083018290526105408301849052610560830184905261058083018490526105a083018490526105c083018290526105e08301849052610600830184905261062083018490526106408301849052610660830182905261068083018490526106a083018490526106c083018490526106e08301849052610700830182905261072083018490526107408301849052610760830184905261078083018490526107a083018290526107c083018490526107e0830184905261080083018290526108208301819052610840830181905261086083015261088082018390526108a082018390526108c08201526108e08101829052610900810191909152610132610920820152620006a390601490604a62002463565b50604080516101608101825261039d80825261022b6020830181905260b993830184905260608301526080820181905260a082015260c081019190915261051060e0820181905261010082018190526101208201526107416101408201526200071190601590600b62002463565b50604080516101008101825260588082526020820181905291810182905260608101829052608081019190915261010960a08201526101ba60c082015261229560e08201526200076690601690600862002463565b50604080516101008101825260bd8082526020820152602f918101919091526012606082015260096080820152601c60a0820152602560c082015261250b60e0820152620007b990601790600862002463565b50604080516104a08101825261015480825260208201819052918101829052606081018290526080810182905260a08101829052602260c0820181905260e0820183905261010082018390526101208201839052610140820183905260aa610160830181905261018083018190526101a0830181905260666101c084015260ee6101e08401819052610200840181905261022084018190526101106102408501819052610260850186905261028085018690526102a085018690526102c08501526102e08401819052610300840181905261032084018190526103408401526103608301526103808201526103a081018290526103c0810182905260886103e0820152610400810182905261042081018290526104408101829052610460810191909152610158610480820152620008f690601890602562002463565b506040805161042081018252609f80825260d460208301819052606a938301849052603560608401819052601a608085015260a0840183905260c0840181905261010960e08501819052610100850182905261012085018390526101408501849052610160850181905261018085018290526101a085018190526101c085018190526101e085018390526102008501829052610220850184905260ef6102408601526102608501829052610280850186905260056102a08601526102c085018690526102e08501919091526103008401829052610320840182905261034084019490945261036083019190915261038082018190526103a082018390526103c08201526103e08101919091526113ca61040082015262000a1b90601990602162002463565b506040805161062081018252608b8082526101166020830181905292820183905260fa60608301819052608083015260c260a0830181905260de60c0840181905260e08401859052610100840185905261012084018290526101408401819052605361016085018190526101808501919091526101a084018590526101c084018390526101e08401839052601b610200850181905261022085018690526102408501869052610260850186905261028085018690526102a085018190526102c085018690526102e08501849052610300850186905261032085018690526103408501869052610360850186905261038085018690526103a085018690526103c085018690526103e08501869052610400850186905261042085018690526104408501869052610460850181905261048085018490526104a085018490526104c085018490526104e085019390935260006105008501526105208401859052610540840191909152610560830181905261058083018190526105a08301939093526105c08201929092526105e081019190915261013261060082015262000bc690601a90603162002463565b5060408051610120810182526103d5808252610b81602083015261028e92820183905260106060830152608082015261014760a082015260c081019190915260a360e0820152610ccf61010082015262000c2590601b90600962002463565b506040805161058081018252602480825260e1602083018190529282018390526060820183905261016860808301819052608760a0840152601b60c0840181905260e0840182905261013b610100850181905261012085018190526101408501819052610160850152610180840185905260b46101a085018190526101c085018690526101e0850181905261020085018390526102208501819052602d6102408601819052610260860184905261028086018490526102a086018490526102c08601929092526102e0850193909352610300840182905261032084018190526103408401839052610360840182905261038084018590526103a084018290526103c084018590526103e084018590526104008401829052610420840183905261044084015261046083015260126104808301526104a082018390526104c082018390526104e08201839052610500820183905261052082015261054081019190915261016961056082015262000da090601c90602c62002463565b50604080516101e08101825261036b81526104f5602082015261030b918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152601161018082015260086101a082015260296101c082015262000e2e90601d90600f62002463565b506040805161042081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e08101829052610200810182905261022081018290526102408101829052610260810182905261028081018290526102a081018290526102c081018290526102e08101829052610300810182905261032081018290526103408101829052610360810182905261038081018290526103a081018290526103c081018290526103e081019190915261271061040082015262000f4990601e90602162002463565b50604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081019190915262000fcb90601f90600e62002513565b50604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820152620010319190600b62002513565b506040805161094081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808082018390526101a082018390526101c082018390526101e08201839052610200820183905261022082018390526102408201839052610260820183905261028082018390526102a082018390526102c082018390526102e08201839052610300820183905261032082018390526103408201839052610360820183905261038082018390526103a082018390526103c082018390526103e08201839052610400820183905261042082018390526104408201839052610460820183905261048082018390526104a082018390526104c082018390526104e08201839052610500820183905261052082018390526105408201839052610560820183905261058082018390526105a082018390526105c082018390526105e08201839052610600820183905261062082018390526106408201839052610660820183905261068082018390526106a082018390526106c082018390526106e08201839052610700820183905261072082018390526107408201839052610760820183905261078082018390526107a082018390526107c082018390526107e082018390526108008201839052610820820152611e0c61084082015261078361086082015261088081018290526108a081018290526108c081018290526108e0810182905261090081019190915260016109208201526200129490602190604a62002463565b506040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810191909152612710610140820152620012ff90602290600b62002463565b506040805161010081018252600080825260208201819052918101829052606081018290526080810182905261038d60a082015260c081019190915261238360e08201526200135390602390600862002463565b506040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915261271060e0820152620013a690602490600862002463565b50604080516104a08101825261020e808252602082018190529181018290526000606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820183905261012082018190526101408201819052610160820181905261018082018390526101a082018190526101c082018390526101e08201819052610200820181905261022082018190526102408201839052610260820183905261028082018390526102a082018390526102c082018390526102e08201839052610300820183905261032082018390526103408201839052610360820183905261038082018390526103a082018190526103c082018190526103e0820192909252610400810182905261042081018290526104408101829052610460810191909152610214610480820152620014e4906025908162002463565b50604080516104208101825260508082526000602083018190526101909383019390935260f0606083018190526080830182905260a0830184905260c083015260e08201839052610100820183905261012082018190526101408201819052610160820181905261018082018390526101a082018390526101c082018390526101e08201839052610200820181905261022082018190526102408201839052610260820183905261028082018190526102a082018190526102c082018390526102e0820181905261030082018190526103208201819052610340820181905261036082015261038081018290526103a081018290526103c081018290526103e0810191909152611f406104008201526200160390602690602162002463565b506040805161062081018252610121808252600060208301819052928201839052606082018390526080820183905261019460a08301526101ce60c0830181905261024260e0840181905261010084018190526101208401859052610140840182905260ad6101608501526101808401919091526101a083018190526101c083018490526101e083018490526039610200840181905261022084018590526102408401819052610260840185905261028084018190526102a084018190526102c084018290526102e08401839052610300840182905261032084018190526103408401859052610360840181905261038084018190526103a084018190526103c084018290526103e08401829052610400840185905261042084018590526104408401859052610460840185905261048084018590526104a084018590526104c084018190526104e084019290925261050083015261052082018390526105408201839052610560820183905260e76105808301526105a08201526105c081018290526105e08101919091526106d1610600820152620017a890602790603162002463565b5060408051610120810182526102ca80825260208201819052918101829052600060608201819052608082019290925260a0810182905260c0810182905260e0810191909152611be86101008201526200180790602890600962002463565b506040805161058081018252602480825260e1602083018190529282018390526060820183905261016860808301819052608760a0840152601b60c0840181905260e0840182905261013b610100850181905261012085018190526101408501819052610160850152610180840185905260b46101a085018190526101c085018690526101e0850181905261020085018390526102208501819052602d6102408601819052610260860184905261028086018490526102a086018490526102c08601929092526102e0850193909352610300840182905261032084018190526103408401839052610360840182905261038084018590526103a084018290526103c084018590526103e084018590526104008401829052610420840183905261044084015261046083015260126104808301526104a082018390526104c082018390526104e0820183905261050082018390526105208201526105408101919091526101696105608201526200198290602990602c62002463565b50604080516101e08101825261036b81526104f5602082015261030b918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152601161018082015260086101a082015260296101c082015262001a1090602a90600f62002463565b50604080516104208101825261012f8082526020820181905291810182905260608101829052609760808201819052601e60a08301819052600060c0840181905260e0840152610100830182905261012083018290526101408301829052610160830182905261018083018190526101a083018490526101c083018290526101e08301819052610200830184905261022083018490526102408301849052610260830184905261028083018490526102a083018490526102c08301526102e0820152610300810182905261032081018290526103408101829052610360810182905261038081018290526103a081018290526103c081018290526103e0810191909152610bfa61040082015262001b2c90602b90602162002463565b50604080516101c0810182526102858082526000602083015261050a92820192909252610142606082018190526080820183905260a0820183905260c082018390526103c760e08301819052610100830191909152610120820181905261014082019290925261016081018290526101808101919091526103cd6101a082015262001bbc90602c90600e62002463565b5060408051610160810182526109c4808252602082018190529181018290526000606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082019290925261014081019190915262001c2a90602d90600b62002463565b506040805161094081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905261024c60c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820183905261018082018390526101a082018190526101c082018390526101e08201839052610200820181905261022082018390526102408201839052610260820183905261028082018390526102a082018390526102c082018190526102e08201839052610300820183905261032082018390526103408201839052610360820181905261038082018390526103a082018390526103c082018390526103e08201819052610400820181905261042082018390526104408201839052610460820183905261048082018190526104a082018390526104c082018390526104e08201839052610500820183905261052082018190526105408201839052610560820183905261058082018390526105a082018390526105c082018390526105e08201839052610600820183905261062082018390526106408201839052610660820181905261068082018390526106a082018390526106c082018390526106e08201839052610700820181905261072082018390526107408201839052610760820183905261078082018390526107a082018190526107c082018390526107e08201839052610800820183905261082082018390526108408201839052610860820183905261088082018390526108a082018390526108c08201526108e08101829052610900810191909152600461092082015262001e8d90602e90604a62002463565b50604080516101608101825261039d80825261022b6020830181905260b993830184905260608301526080820181905260a082015260c081019190915261051060e08201819052610100820181905261012082015261074161014082015262001efb90602f90600b62002463565b50604080516101008101825260588082526020820181905291810182905260608101829052608081019190915261010960a08201526101ba60c082015261229560e082015262001f5090603090600862002463565b50604080516101008101825260b7815261011260208201819052918101919091526012606082018190526080820152601b60a0820152602460c08201526123d260e082015262001fa590603190600862002463565b50604080516104a08101825261015480825260208201819052918101829052606081018290526080810182905260a08101829052602260c0820181905260e0820183905261010082018390526101208201839052610140820183905260aa610160830181905261018083018190526101a0830181905260666101c084015260ee6101e08401819052610200840181905261022084018190526101106102408501819052610260850186905261028085018690526102a085018690526102c08501526102e08401819052610300840181905261032084018190526103408401526103608301526103808201526103a081018290526103c0810182905260886103e0820152610400810182905261042081018290526104408101829052610460810191909152610158610480820152620020e290603290602562002463565b50604080516104208101825260d980825261016a6020830181905292820181905260906060830181905260486080840181905261012160a0850181905260c0850183905260e08501869052610100850182905261012085018190526101408501849052610160850186905261018085018290526101a085018690526101c085018690526101e08501819052600061020086018190526102208601859052610240860152610260850182905261028085019290925260076102a08501526102c084018390526102e084015261030083018290526103208301829052610340830181905261036083018290526103808301526103a082018390526103c08201526103e0810191909152610cc56104008201526200220290603390602162002463565b506040805161062081018252608b8082526101166020830181905292820183905260fa60608301819052608083015260c260a0830181905260de60c0840181905260e08401859052610100840185905261012084018290526101408401819052605361016085018190526101808501919091526101a084018590526101c084018390526101e08401839052601b610200850181905261022085018690526102408501869052610260850186905261028085018690526102a085018190526102c085018690526102e08501849052610300850186905261032085018690526103408501869052610360850186905261038085018690526103a085018690526103c085018690526103e08501869052610400850186905261042085018690526104408501869052610460850181905261048085018490526104a085018490526104c085018490526104e085019390935260006105008501526105208401859052610540840191909152610560830181905261058083018190526105a08301939093526105c08201929092526105e0810191909152610132610600820152620023ad90603490603162002463565b5060408051610120810182526103d5808252610b81602083015261028e92820183905260106060830152608082015261014760a082015260c081019190915260a360e0820152610ccf6101008201526200240c90603590600962002463565b5062002595565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090600f01601090048101928215620025015791602002820160005b83821115620024cf57835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026200248d565b8015620024ff5782816101000a81549061ffff0219169055600201602081600101049283019260010302620024cf565b505b506200250f9291506200257e565b5090565b82805482825590600052602060002090600f01601090048101928215620025015791602002820160005b83821115620024cf57835183826101000a81548161ffff021916908360ff16021790555092602001926002016020816001010492830192600103026200253d565b5b808211156200250f57600081556001016200257f565b614c4e80620025a56000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80639bac5f7a116100cd578063da8343c911610081578063f2fde38b11610066578063f2fde38b146102e2578063fca228ce146102f5578063ffbcaa511461030857600080fd5b8063da8343c9146102bb578063e9703701146102ce57600080fd5b8063b09afec1116100b2578063b09afec114610265578063d129beee14610288578063d68cf31f146102a857600080fd5b80639bac5f7a1461023f578063a62f8deb1461025257600080fd5b8063715018a6116101245780637e8e0657116101095780637e8e0657146101f15780637f436b5c146101f95780638da5cb5b1461021957600080fd5b8063715018a6146101d25780637249db4d146101dc57600080fd5b8063027c00a0146101565780633ef21a5e1461017f5780634489fb2a146101925780637148ede1146101b2575b600080fd5b6101696101643660046139ae565b61031b565b6040516101769190614713565b60405180910390f35b61016961018d3660046138c1565b6103a5565b6101a56101a03660046139ae565b6103b4565b604051610176919061476e565b6101c56101c0366004613846565b610538565b60405161017691906146ae565b6101da611223565b005b6101e4600881565b604051610176919061477f565b6101e4600d81565b61020c6102073660046138de565b61126f565b604051610176919061478d565b60005473ffffffffffffffffffffffffffffffffffffffff1660405161017691906146a0565b61016961024d36600461393c565b611358565b610169610260366004613959565b6113bc565b61027861027336600461393c565b611560565b60405161017694939291906146bf565b61029b610296366004613991565b611d09565b6040516101769190614705565b6101696102b636600461393c565b611d5e565b6101da6102c9366004613804565b611df0565b6101e46102dc3660046138c1565b60f81c90565b6101da6102f03660046137e7565b612047565b61020c6103033660046138fb565b6120bd565b61016961031636600461393c565b61225c565b6060610325613266565b61032d6132a0565b600061033986866103b4565b80845290506103538360005b6020020151602001516123eb565b8252600061036384846001610538565b8051602080830151604080850151606086015191519596506103899592939092016142bd565b6040516020818303038152906040529450505050505b92915050565b606061039f6103168360f81c90565b604080518082019091526060808252602082015260028360ff16600d81106103ec57634e487b7160e01b600052603260045260246000fd5b0160008360ff16815260200190815260200160002060405180604001604052908160008201805461041c90614a55565b80601f016020809104026020016040519081016040528092919081815260200182805461044890614a55565b80156104955780601f1061046a57610100808354040283529160200191610495565b820191906000526020600020905b81548152906001019060200180831161047857829003601f168201915b505050505081526020016001820180546104ae90614a55565b80601f01602080910402602001604051908101604052809291908181526020018280546104da90614a55565b80156105275780601f106104fc57610100808354040283529160200191610527565b820191906000526020600020905b81548152906001019060200180831161050a57829003601f168201915b505050505081525050905092915050565b6105406132ce565b6040805161044081018252600461040082018181527f4d444177000000000000000000000000000000000000000000000000000000006104208401528252825180840184528181527f4d4445770000000000000000000000000000000000000000000000000000000060208281019190915280840191909152835180850185528281527f4d444977000000000000000000000000000000000000000000000000000000008183015283850152835180850185528281527f4d444d770000000000000000000000000000000000000000000000000000000081830152606080850191909152845180860186528381527f4d4451770000000000000000000000000000000000000000000000000000000081840152608080860191909152855180870187528481527f4d445577000000000000000000000000000000000000000000000000000000008185015260a080870191909152865180880188528581527f4d445977000000000000000000000000000000000000000000000000000000008186015260c080880191909152875180890189528681527f4d446377000000000000000000000000000000000000000000000000000000008187015260e0880152875180890189528681527f4d4467770000000000000000000000000000000000000000000000000000000081870152610100880152875180890189528681527f4d446b770000000000000000000000000000000000000000000000000000000081870152610120880152875180890189528681527f4d5441770000000000000000000000000000000000000000000000000000000081870152610140880152875180890189528681527f4d5445770000000000000000000000000000000000000000000000000000000081870152610160880152875180890189528681527f4d5449770000000000000000000000000000000000000000000000000000000081870152610180880152875180890189528681527f4d544d7700000000000000000000000000000000000000000000000000000000818701526101a0880152875180890189528681527f4d54517700000000000000000000000000000000000000000000000000000000818701526101c0880152875180890189528681527f4d54557700000000000000000000000000000000000000000000000000000000818701526101e0880152875180890189528681527f4d5459770000000000000000000000000000000000000000000000000000000081870152610200880152875180890189528681527f4d5463770000000000000000000000000000000000000000000000000000000081870152610220880152875180890189528681527f4d5467770000000000000000000000000000000000000000000000000000000081870152610240880152875180890189528681527f4d546b770000000000000000000000000000000000000000000000000000000081870152610260880152875180890189528681527f4d6a41770000000000000000000000000000000000000000000000000000000081870152610280880152875180890189528681527f4d6a457700000000000000000000000000000000000000000000000000000000818701526102a0880152875180890189528681527f4d6a497700000000000000000000000000000000000000000000000000000000818701526102c0880152875180890189528681527f4d6a4d7700000000000000000000000000000000000000000000000000000000818701526102e0880152875180890189528681527f4d6a51770000000000000000000000000000000000000000000000000000000081870152610300880152875180890189528681527f4d6a55770000000000000000000000000000000000000000000000000000000081870152610320880152875180890189528681527f4d6a59770000000000000000000000000000000000000000000000000000000081870152610340880152875180890189528681527f4d6a63770000000000000000000000000000000000000000000000000000000081870152610360880152875180890189528681527f4d6a67770000000000000000000000000000000000000000000000000000000081870152610380880152875180890189528681527f4d6a6b7700000000000000000000000000000000000000000000000000000000818701526103a0880152875180890189528681527f4d7a417700000000000000000000000000000000000000000000000000000000818701526103c0880152875180890189529586527f4d7a457700000000000000000000000000000000000000000000000000000000868601526103e08701959095528651948501875260008086529385019390935294830181905282810181905293820184905281019290925290610c6f60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b610c776132f5565b610c7f6132ce565b60008060205b6101a081101561121157610ca08c8260008e8e60ff16612649565b6040880152610cb68c8260018e60ff8f16612649565b6060880152610ccc8c8260028e60ff8f16612649565b6080880152610ce28c8260038e60ff8f16612649565b60a0880152610cf18888612883565b865286516004908890610d0590839061490d565b60ff908116909152610d2291508d9083906004908f908f16612649565b6040880152610d388c8260058e60ff8f16612649565b6060880152610d4e8c8260068e60ff8f16612649565b6080880152610d648c8260078e60ff8f16612649565b60a0880152610d738888612883565b602087015286516004908890610d8a90839061490d565b60ff16905250610d9b6003826148fa565b9050610dae8c8260008e8e60ff16612649565b6040880152610dc48c8260018e60ff8f16612649565b6060880152610dda8c8260028e60ff8f16612649565b6080880152610df08c8260038e60ff8f16612649565b60a0880152610dff8888612883565b604087015286516004908890610e1690839061490d565b60ff908116909152610e3391508d9083906004908f908f16612649565b6040880152610e498c8260058e60ff8f16612649565b6060880152610e5f8c8260068e60ff8f16612649565b6080880152610e758c8260078e60ff8f16612649565b60a0880152610e848888612883565b606087015286516004908890610e9b90839061490d565b60ff16905250610eac6003826148fa565b9050610ebf8c8260008e8e60ff16612649565b6040880152610ed58c8260018e60ff8f16612649565b6060880152610eeb8c8260028e60ff8f16612649565b6080880152610f018c8260038e60ff8f16612649565b60a0880152610f108888612883565b608087015286516004908890610f2790839061490d565b60ff908116909152610f4491508d9083906004908f908f16612649565b6040880152610f5a8c8260058e60ff8f16612649565b6060880152610f708c8260068e60ff8f16612649565b6080880152610f868c8260078e60ff8f16612649565b60a0880152610f958888612883565b60a087015286516004908890610fac90839061490d565b60ff16905250610fbd6003826148fa565b9050610fd08c8260008e8e60ff16612649565b6040880152610fe68c8260018e60ff8f16612649565b6060880152610ffc8c8260028e60ff8f16612649565b60808801526110128c8260038e60ff8f16612649565b60a08801526110218888612883565b60c08701528651600490889061103890839061490d565b60ff90811690915261105591508d9083906004908f908f16612649565b604088015261106b8c8260058e60ff8f16612649565b60608801526110818c8260068e60ff8f16612649565b60808801526110978c8260078e60ff8f16612649565b60a08801526110a68888612883565b60e0870152865160049088906110bd90839061490d565b60ff169052506110ce6003826148fa565b9050856000015186602001518760400151886060015189608001518a60a001518b60c001518c60e0015160405160200161110f989796959493929190614035565b60405160208183030381529060405285848061112a90614adf565b955060ff166008811061114d57634e487b7160e01b600052603260045260246000fd5b6020908102919091019190915260008852870180516001919061117190839061490d565b60ff908116909152600890851610905061120c57845160208087015160408089015160608a015160808b015160a08c015160c08d015160e08e015195516111c49998959694959394929391929101614035565b6040516020818303038152906040528483806111df90614adf565b945060ff166004811061120257634e487b7160e01b600052603260045260246000fd5b6020020152600092505b610c85565b509196505050505050505b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112635760405162461bcd60e51b815260040161125a90614734565b60405180910390fd5b61126d6000612a46565b565b6000806000805b60105460ff82161015611352576010805460ff83169081106112a857634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff1691508261ffff168561ffff16101580156112f657506112eb82846148aa565b61ffff168561ffff16105b15611334578060ff166001141561131257506002949350505050565b600b8160ff16111561132957506001949350505050565b506000949350505050565b61133e82846148aa565b92508061134a81614adf565b915050611276565b50600080fd5b6060600080600061136885611560565b50925092509250600061137c848484610538565b8051602080830151604080850151606086015191519596506113a2959293909201614627565b604051602081830303815290604052945050505050919050565b60606000806000806113d18660000151611560565b9350935093509350606060005b8360ff168160ff1610156114f357818251600014611431576040518060400160405280600481526020017f4c43423700000000000000000000000000000000000000000000000000000000815250611468565b6040518060400160405280600481526020017f65794167000000000000000000000000000000000000000000000000000000008152505b848360ff16600d811061148b57634e487b7160e01b600052603260045260246000fd5b6020020151888460ff16600d81106114b357634e487b7160e01b600052603260045260246000fd5b6020020151600001516040516020016114cf94939291906140a0565b604051602081830303815290604052915080806114eb90614adf565b9150506113de565b506000611501868686610538565b805160208201516040830151606084015193945091929091908561152e6115298f6006612abb565b612cff565b6040516020016115439695949392919061439c565b604051602081830303815290604052965050505050505092915050565b611568613266565b6115706132a0565b600061157a613310565b600061158586612ec8565b90506000611599826001602002015161126f565b60ff1690506000600f82600381106115c157634e487b7160e01b600052603260045260246000fd5b600d02016007016007815481106115e857634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661271061161991906149ae565b61ffff16836007602002015161ffff161090506000600f8361ffff166003811061165357634e487b7160e01b600052603260045260246000fd5b600d020160080160078154811061167a57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff166127106116ab91906149ae565b61ffff16846008602002015161ffff161090506000600f8461ffff16600381106116e557634e487b7160e01b600052603260045260246000fd5b600d020160090160248154811061170c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661271061173d91906149ae565b61ffff16856009602002015161ffff161090506000600f8561ffff166003811061177757634e487b7160e01b600052603260045260246000fd5b600d0201600b0160308154811061179e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff166127106117cf91906149ae565b61ffff1686600b602002015161ffff161090506000806002888260200201516117f89190614af8565b61ffff1611905060005b600d8160ff161015611cfa576000611846826101a08b8560ff16600d811061183a57634e487b7160e01b600052603260045260246000fd5b6020020151858c6120bd565b60208101515190915015611ce6578160ff166002148061186957508160ff16600c145b8015611873575085155b801561187d575086155b8061189457508160ff166007148015611894575085155b806118ab57508160ff16600a1480156118ab575085155b806118fe575060028260ff1610806118d4575060028260ff161180156118d4575060078260ff16105b806118e257508160ff166008145b806118f057508160ff166009145b806118fe57508160ff16600b145b15611ce65784801561190d5750835b801561192457508160ff1660091480156119245750825b8061193b57508160ff16600b14801561193b575082155b156119465750611ce8565b808d8c60ff16600d811061196a57634e487b7160e01b600052603260045260246000fd5b60200201526119958d60ff8d16600d811061034557634e487b7160e01b600052603260045260246000fd5b8c8c60ff16600d81106119b857634e487b7160e01b600052603260045260246000fd5b60209081029190910191909152604080516101e08101825260106101a082018181527f516d466a61326479623356755a434167000000000000000000000000000000006101c084015282528251808401845260088082527f556d466a5a5341670000000000000000000000000000000000000000000000008287015283860191909152835180850185528181527f526d466a5a5341670000000000000000000000000000000000000000000000008187015283850152835180850185528181527f5457393164476767000000000000000000000000000000000000000000000000818701526060840152835180850185528181527f546d397a5a534167000000000000000000000000000000000000000000000000818701526080840152835180850185528181527f52586c6c637941670000000000000000000000000000000000000000000000008187015260a08401528351808501855260148082527f525746794945466a5932567a63323979655341670000000000000000000000008288015260c0850191909152845180860186528181527f526d466a5a53424259324e6c63334e76636e6b670000000000000000000000008188015260e0850152845180860186529182527f5457467a6179416700000000000000000000000000000000000000000000000082870152610100840191909152835180850185528281527f534756685a4342435a577876647941670000000000000000000000000000000081870152610120840152835180850185528181527f52586c6c4945466a5932567a633239796553416700000000000000000000000081870152610140840152835180850185529182527f534756685a434242596d39325a5341670000000000000000000000000000000082860152610160830191909152825180840190935282527f545739316447676751574e6a5a584e7a62334a350000000000000000000000009282019290925261018082015260ff8316600d8110611cab57634e487b7160e01b600052603260045260246000fd5b60200201518a8c60ff16600d8110611cd357634e487b7160e01b600052603260045260246000fd5b60200201528a611ce281614adf565b9b50505b505b80611cf281614adf565b915050611802565b50505050505050509193509193565b600060098260ff1611611d2a57611d2182603061490d565b60f81b92915050565b8160ff16600a11158015611d425750600f8260ff1611155b1561015157600a611d5483606161490d565b611d2191906149d7565b60606000611d6b8361225c565b9050805160021415611d9f5780604051602001611d889190614697565b604051602081830303815290604052915050919050565b805160031415611dba5780604051602001611d889190614370565b805160041415611dd55780604051602001611d88919061466b565b80516005141561039f5780604051602001611d88919061410a565b60005473ffffffffffffffffffffffffffffffffffffffff163314611e275760405162461bcd60e51b815260040161125a90614734565b60005b61ffff811682111561204257604051806040016040528084848461ffff16818110611e6557634e487b7160e01b600052603260045260246000fd5b9050602002810190611e779190614804565b611e81908061479b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001848461ffff8516818110611edf57634e487b7160e01b600052603260045260246000fd5b9050602002810190611ef19190614804565b611eff90602081019061479b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506002848461ffff8516818110611f5b57634e487b7160e01b600052603260045260246000fd5b9050602002810190611f6d9190614804565b611f7e906060810190604001613991565b60ff16600d8110611f9f57634e487b7160e01b600052603260045260246000fd5b01600085858561ffff16818110611fc657634e487b7160e01b600052603260045260246000fd5b9050602002810190611fd89190614804565b611fe9906080810190606001613991565b60ff1681526020808201929092526040016000208251805191926120129284929091019061332b565b50602082810151805161202b926001850192019061332b565b50905050808061203a90614aa9565b915050611e2a565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461207e5760405162461bcd60e51b815260040161125a90614734565b73ffffffffffffffffffffffffffffffffffffffff81166120b15760405162461bcd60e51b815260040161125a90614724565b6120ba81612a46565b50565b6000806000805b600f8561ffff16600381106120e957634e487b7160e01b600052603260045260246000fd5b600d02018660ff16600d811061210f57634e487b7160e01b600052603260045260246000fd5b015460ff8216101561220457600f8561ffff166003811061214057634e487b7160e01b600052603260045260246000fd5b600d02018660ff16600d811061216657634e487b7160e01b600052603260045260246000fd5b018160ff168154811061218957634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff1691508261ffff168761ffff16101580156121d757506121cc82846148aa565b61ffff168761ffff16105b156121e657925061121c915050565b6121f082846148aa565b9250806121fc81614adf565b9150506120c4565b50600f8461ffff166003811061222a57634e487b7160e01b600052603260045260246000fd5b600d02018560ff16600d811061225057634e487b7160e01b600052603260045260246000fd5b01549695505050505050565b60606000825b8015612288578161227281614acb565b9250612281905060108261492e565b9050612262565b60008267ffffffffffffffff8111156122b157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122db576020820181803683370190505b50905060005b83811015612380576122f4601087614b18565b92506122ff83611d09565b82600161230c84886149d1565b61231691906149d1565b8151811061233457634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061236e60108761492e565b955061237981614acb565b90506122e1565b50805181906123c757505060408051808201909152600281527f30300000000000000000000000000000000000000000000000000000000000006020820152949350505050565b8051600114156123e257806040516020016113a2919061410a565b95945050505050565b6123f36133af565b6123fb6133af565b60005b60088161ffff161015612642576124c561246b8561241d846004614942565b61ffff168151811061243f57634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000166103a5565b6124858661247a856004614942565b61241d9060016148aa565b61249f87612494866004614942565b61241d9060026148aa565b6040516020016124b193929190614013565b604051602081830303815290604052612cff565b828261ffff16600881106124e957634e487b7160e01b600052603260045260246000fd5b60200201515261252b846124fe836004614942565b61ffff168151811061252057634e487b7160e01b600052603260045260246000fd5b016020015160f81c90565b828261ffff166008811061254f57634e487b7160e01b600052603260045260246000fd5b60200201516040015261257284612567836004614942565b6124fe9060016148aa565b828261ffff166008811061259657634e487b7160e01b600052603260045260246000fd5b6020020151606001526125b9846125ae836004614942565b6124fe9060026148aa565b828261ffff16600881106125dd57634e487b7160e01b600052603260045260246000fd5b602002015160800152612600846125f5836004614942565b6124fe9060036148aa565b828261ffff166008811061262457634e487b7160e01b600052603260045260246000fd5b6020908102919091015101528061263a81614aa9565b9150506123fe565b5092915050565b606060005b8281101561283a57600084826126656001876149d1565b61266f91906149d1565b600d811061268d57634e487b7160e01b600052603260045260246000fd5b60200201516126da89846126a26001896149d1565b6126ac91906149d1565b600d81106126ca57634e487b7160e01b600052603260045260246000fd5b6020020151602001518989612f35565b60ff16600881106126fb57634e487b7160e01b600052603260045260246000fd5b602002015190508060200151600014156127155750612828565b806020015160ff141561272c575191506123e29050565b60008261273a6002876149d1565b61274491906149d1565b1061281e576000826127576002876149d1565b61276191906149d1565b90505b60008682600d811061278657634e487b7160e01b600052603260045260246000fd5b60200201516127be8b84600d81106127ae57634e487b7160e01b600052603260045260246000fd5b6020020151602001518b8b612f35565b60ff16600881106127df57634e487b7160e01b600052603260045260246000fd5b6020020151905060008160200151111561280b576128006115298483613179565b9450505050506123e2565b508061281681614a3e565b915050612764565b5191506123e29050565b8061283281614acb565b91505061264e565b506128796040518060400160405280600681526020017f6666666666660000000000000000000000000000000000000000000000000000815250612cff565b9695505050505050565b6060816040015183836000015160ff16602081106128b157634e487b7160e01b600052603260045260246000fd5b602002015184846020015160ff16602081106128dd57634e487b7160e01b600052603260045260246000fd5b60200201516060850151855187906128f690600161490d565b60ff166020811061291757634e487b7160e01b600052603260045260246000fd5b602002015187876020015160ff166020811061294357634e487b7160e01b600052603260045260246000fd5b6020020151608088015188518a9061295c90600261490d565b60ff166020811061297d57634e487b7160e01b600052603260045260246000fd5b60200201518a8a6020015160ff16602081106129a957634e487b7160e01b600052603260045260246000fd5b602002015160a08b01518b518d906129c290600361490d565b60ff16602081106129e357634e487b7160e01b600052603260045260246000fd5b60200201518d8d6020015160ff1660208110612a0f57634e487b7160e01b600052603260045260246000fd5b6020020151604051602001612a2f9c9b9a9998979695949392919061413e565b604051602081830303815290604052905092915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608260005b8115612ae75780612ad181614acb565b9150612ae09050600a8361492e565b9150612ac1565b60008467ffffffffffffffff811115612b1057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612b3a576020820181803683370190505b50859350905085612bbb577f300000000000000000000000000000000000000000000000000000000000000081600081518110612b8757634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600191505b81831115612c4557612bce6001846149d1565b92507f2000000000000000000000000000000000000000000000000000000000000000818481518110612c1157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612bbb565b815b8615612cf557612c586001826149d1565b90506000612c67600a8961492e565b612c7290600a61496f565b612c7c90896149d1565b612c8790603061490d565b905060008160f81b905080848481518110612cb257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612cec600a8a61492e565b98505050612c47565b5095945050505050565b805160609080612d1f575050604080516020810190915260008152919050565b60006003612d2e8360026148fa565b612d38919061492e565b612d4390600461496f565b90506000612d528260206148fa565b67ffffffffffffffff811115612d7857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612da2576020820181803683370190505b5090506000604051806060016040528060408152602001614bd9604091399050600181016020830160005b86811015612e2e576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101612dcd565b506003860660018114612e485760028114612e9257612eba565b7f3d3d0000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe830152612eba565b7f3d000000000000000000000000000000000000000000000000000000000000006000198301525b505050918152949350505050565b612ed0613407565b60005b600d811015612f2f57612ee861271084614b18565b8282600d8110612f0857634e487b7160e01b600052603260045260246000fd5b61ffff9092166020929092020152600e9290921c9180612f2781614acb565b915050612ed3565b50919050565b600081612f6f576005848481518110612f5e57634e487b7160e01b600052603260045260246000fd5b016020015160f81c901c905061121c565b8160011415612fba5760086002858581518110612f9c57634e487b7160e01b600052603260045260246000fd5b0160200151612fb3929160f89190911c901c614b1e565b905061121c565b816002141561304b57600784612fd18560016148fa565b81518110612fef57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b60f81c60ff16901c600485858151811061302457634e487b7160e01b600052603260045260246000fd5b0160200151613036919060f81c614b1e565b613041906002614989565b612fb3919061490d565b81600314156130825760086004856130648660016148fa565b81518110612f9c57634e487b7160e01b600052603260045260246000fd5b816004141561309a57600860018561306486836148fa565b8160051415613122576006846130b18560026148fa565b815181106130cf57634e487b7160e01b600052603260045260246000fd5b016020015160f81c901c6002856130e78660016148fa565b8151811061310557634e487b7160e01b600052603260045260246000fd5b0160200151613117919060f81c614b1e565b613041906004614989565b816006141561313b5760086003856130648660026148fa565b6008846131498560026148fa565b8151811061316757634e487b7160e01b600052603260045260246000fd5b0160200151612fb3919060f81c614b1e565b606060008360200151600161318e91906148fa565b61ffff169050600084602001516101006131a891906149d1565b61ffff1690506123e2601060088660400151846131c5919061496f565b60408901516131d4908761496f565b6131de91906148fa565b901c62ffffff16901b6008808760600151856131fa919061496f565b60608a0151613209908861496f565b61321391906148fa565b901c62ffffff16901b600887608001518561322e919061496f565b60808a015161323d908861496f565b61324791906148fa565b61325292911c6148d3565b61325c91906148d3565b62ffffff16611d5e565b604051806101a00160405280600d905b60408051808201909152606080825260208201528152602001906001900390816132765790505090565b604051806101a00160405280600d905b6132b86133af565b8152602001906001900390816132b05790505090565b60405180608001604052806004905b60608152602001906001900390816132dd5790505090565b604080516101008101909152606081526007602082016132dd565b604080516101a0810190915260608152600c602082016132dd565b82805461333790614a55565b90600052602060002090601f016020900481019282613359576000855561339f565b82601f1061337257805160ff191683800117855561339f565b8280016001018555821561339f579182015b8281111561339f578251825591602001919060010190613384565b506133ab929150613426565b5090565b6040518061010001604052806008905b6133f16040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816133bf5790505090565b604051806101a00160405280600d906020820280368337509192915050565b5b808211156133ab5760008155600101613427565b600061344e6134498461485e565b614842565b9050808285602086028501111561346457600080fd5b60005b858110156134a857813567ffffffffffffffff81111561348657600080fd5b850161349288826135eb565b8452506020928301929190910190600101613467565b5050509392505050565b60006134c06134498461485e565b905080828560208602850111156134d657600080fd5b60005b858110156134a857813567ffffffffffffffff8111156134f857600080fd5b850161350488826136ca565b84525060209283019291909101906001016134d9565b60006135286134498461485e565b9050808285602086028501111561353e57600080fd5b60005b858110156134a857813567ffffffffffffffff81111561356057600080fd5b850161356c8882613751565b8452506020928301929190910190600101613541565b60006135906134498461487f565b9050828152602081018484840111156135a857600080fd5b6135b3848285614a02565b509392505050565b803561039f81614b83565b600082601f8301126135d6578081fd5b600d6135e384828561343b565b949350505050565b600082601f8301126135fb578081fd5b60086135e38482856134b2565b60008083601f840112613619578182fd5b50813567ffffffffffffffff811115613630578182fd5b60208301915083602082028301111561364857600080fd5b9250929050565b600082601f83011261365f578081fd5b600d6135e384828561351a565b803561039f81614b97565b600082601f830112613687578081fd5b81356135e3848260208601613582565b6000602082840312156136a8578081fd5b6136b26020614842565b905060006136c084846137d1565b9082015292915050565b600060a082840312156136db578081fd5b6136e560a0614842565b9050813567ffffffffffffffff8111156136fe57600080fd5b61370a84828501613677565b825250602061371b848483016137d1565b90820152604061372d848483016137d1565b90820152606061373f848483016137d1565b9082015260806136c0848483016137d1565b600060408284031215613762578081fd5b61376c6040614842565b9050813567ffffffffffffffff81111561378557600080fd5b61379184828501613677565b825250602082013567ffffffffffffffff8111156137ae57600080fd5b6137ba84828501613677565b60208301525092915050565b803561039f81614bbf565b803561039f81614bc9565b803561039f81614bcf565b6000602082840312156137f8578081fd5b61121c838284016135bb565b60008060208385031215613816578081fd5b8083013567ffffffffffffffff81111561382e578182fd5b61383a85828601613608565b92509250509250929050565b60008060006060848603121561385a578081fd5b8084013567ffffffffffffffff811115613872578182fd5b61387e8682870161364f565b935050602084013567ffffffffffffffff81111561389a578182fd5b6138a6868287016135c6565b92505060406138b7868287016137dc565b9150509250925092565b6000602082840312156138d2578081fd5b61121c8382840161366c565b6000602082840312156138ef578081fd5b61121c838284016137c6565b60008060006060848603121561390f578081fd5b61391b858286016137c6565b9250602061392b868287016137dc565b92505060406138b7868287016137c6565b60006020828403121561394d578081fd5b61121c838284016137d1565b6000806040838503121561396b578182fd5b613977848385016137d1565b9150602061398785828601613697565b9150509250929050565b6000602082840312156139a2578081fd5b61121c838284016137dc565b600080604083850312156139c0578182fd5b6139cc848385016137dc565b91506020613987858286016137dc565b600061121c8383613ae0565b600061121c8383613b84565b600061121c8383613f6c565b600061121c8383613fd2565b613a15816149e4565b82525050565b6000600d836101a0810184845b84811015613a595783830388528151613a4184826139dc565b93505060208201602098909801979150600101613a28565b50909695505050505050565b6000600d836101a0810184845b84811015613a595783830388528151613a8b84826139e8565b93505060208201602098909801979150600101613a72565b60006004836080810184845b84811015613a595783830388528151613ac884826139e8565b93505060208201602098909801979150600101613aaf565b6000600883610100810184845b84811015613a595783830388528151613b0684826139f4565b93505060208201602098909801979150600101613aed565b6000600d836101a0810184845b84811015613a595783830388528151613b448482613a00565b93505060208201602098909801979150600101613b2b565b7fff000000000000000000000000000000000000000000000000000000000000008116613a15565b6000613b8e825190565b808452602084019350613ba5818560208601614a0e565b601f01601f19169290920192915050565b6000613bc0825190565b613bce818560208601614a0e565b9290920192915050565b7f496e527959576c3058335235634755694f69416900000000000000000000000081525b60140190565b7f50484a6c593351674943426d615778735053636a0000000000000000000000008152613bfc565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290505b60400190565b7f50484e325a7942325a584a7a61573975505363784c6a456e49485a705a58644381527f623367394a7a41674d43417a4d6a41674d7a49774a79423462577875637a306e60208201527f6148523063446f764c336433647935334d793576636d63764d6a41774d43397a60408201527f646d636e49484e6f5958426c4c584a6c626d526c636d6c755a7a306e59334a7060608201527f633342465a47646c63796367614756705a326830505363784d44416c4a79423360808201527f615752306144306e4d5441774a53632b0000000000000000000000000000000060a08201525b60b00190565b7f4a7941676544306e00000000000000000000000000000000000000000000000081525b60080190565b7f4a7941674943382b0000000000000000000000000000000000000000000000008152613d90565b7f50484e306557786c506e4a6c5933523764326c6b644767364d5842344f32686c81527f6157646f64446f786348673766547776633352356247552b5043397a646d632b6020820152613c7e565b7f50484e325a7942325a584a7a61573975505363784c6a456e49485a705a58644381527f623367394a7a41674d43417a4d69417a4d69636765473173626e4d394a32683060208201527f644841364c79393364336375647a4d7562334a6e4c7a49774d44417663335a6e60408201527f4a79427a614746775a5331795a57356b5a584a70626d63394a324e7961584e7760608201527f5257526e5a584d6e4947686c6157646f6444306e4d5441774a53636764326c6b60808201527f644767394a7a45774d43556e4943412b0000000000000000000000000000000060a0820152613d66565b7f496942390000000000000000000000000000000000000000000000000000000081525b60040190565b7f4a7941676554306e0000000000000000000000000000000000000000000000008152613d90565b7f30303030000000000000000000000000000000000000000000000000000000008152613f16565b805160a080845260009190840190613f848282613b84565b9150506020830151613f996020860182614004565b506040830151613fac6040860182614004565b506060830151613fbf6060860182614004565b5060808301516135b36080860182614004565b8051604080845260009190840190613fea8282613b84565b915050602083015184820360208601526123e28282613b84565b80613a15565b60ff8116613a15565b61401d8185613bb6565b90506140298184613bb6565b90506135e38183613bb6565b61403f818a613bb6565b905061404b8189613bb6565b90506140578188613bb6565b90506140638187613bb6565b905061406f8186613bb6565b905061407b8185613bb6565b90506140878184613bb6565b90506140938183613bb6565b9998505050505050505050565b6140aa8186613bb6565b90506140b68185613bb6565b90506140c181613bd8565b90506140cd8184613bb6565b7f49697769646d4673645755694f69416900000000000000000000000000000000815260100190506140ff8183613bb6565b90506123e281613ef2565b7f30000000000000000000000000000000000000000000000000000000000000008152600181015b905061039f8183613bb6565b61414781613c02565b9050614153818e613bb6565b905061415e81613d6c565b905061416a818d613bb6565b905061417581613f1c565b9050614181818c613bb6565b7f4a794176506a78795a574e304943426d615778735053636a0000000000000000815260180190506141b3818b613bb6565b90506141be81613d6c565b90506141ca818a613bb6565b90506141d581613f1c565b90506141e18189613bb6565b7f4a794176506a78795a574e304943426d615778735053636a0000000000000000815260180190506142138188613bb6565b905061421e81613d6c565b905061422a8187613bb6565b905061423581613f1c565b90506142418186613bb6565b7f4a794176506a78795a574e304943426d615778735053636a0000000000000000815260180190506142738185613bb6565b905061427e81613d6c565b905061428a8184613bb6565b905061429581613f1c565b90506142a18183613bb6565b90506142ac81613d96565b9d9c50505050505050505050505050565b6142c681613c84565b90506142d28186613bb6565b90506142de8185613bb6565b90506142ea8184613bb6565b90506142f68183613bb6565b7f50484e306557786c506e4a6c5933523764326c6b644767364d5442776544746f81527f5a576c6e614851364d544277654474395043397a64486c735a5434384c334e3260208201527f5a7a343d0000000000000000000000000000000000000000000000000000000060408201529050604481016123e2565b7f3030300000000000000000000000000000000000000000000000000000000000815260038101614132565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c65794181527f67496d6c745957646c58325268644745694f69416950484e325a7942325a584a60208201527f7a61573975505363784c6a456e49485a705a586443623367394a7a41674d434160408201527f7a4d6a41674d7a49774a79423462577875637a306e6148523063446f764c336460608201527f33647935334d793576636d63764d6a41774d43397a646d636e49484e6f59584260808201527f6c4c584a6c626d526c636d6c755a7a306e59334a70633342465a47646c63796360a08201527f2b0000000000000000000000000000000000000000000000000000000000000060c082015260c1016144b08188613bb6565b90506144bc8187613bb6565b90506144c88186613bb6565b90506144d48185613bb6565b7f50484e306557786c506e4a6c5933523764326c6b644767364d5442776544746f81527f5a576c6e614851364d544277654474395043397a64486c735a5434384c334e3260208201527f5a7a346749697767496d463064484a70596e56305a584d694f694262000000006040820152605c0190506145528184613bb6565b7f5853776749434169626d46745a534936496c4a31626d356c6369416a000000008152601c0190506145848183613bb6565b7f49697767496d526c63324e796158423061573975496a6f67496b4e6f59576c7581527f49464a31626d356c636e4d6759584a6c4945316c5a32456751326c306553427960208201527f5a57356c5a32466b5a584d674d5441774a53426e5a57356c636d46305a57516760408201527f623234675932686861573475496e3067000000000000000000000000000000006060820152607001979650505050505050565b61463081613e0c565b905061463c8186613bb6565b90506146488185613bb6565b90506146548184613bb6565b90506146608183613bb6565b90506123e281613dbe565b7f3030000000000000000000000000000000000000000000000000000000000000815260028101614132565b61413281613f44565b6020810161039f8284613a0c565b6020808252810161121c8184613aa3565b608080825281016146d08187613b1e565b905081810360208301526146e48186613a1b565b90506146f3604083018561400a565b81810360608301526128798184613a65565b6020810161039f8284613b5c565b6020808252810161121c8184613b84565b6020808252810161039f81613c2a565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408301526060820161039f565b6020808252810161121c8184613fd2565b6020810161039f8284614004565b6020810161039f828461400a565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1368590030181126147d0578283fd5b8301915050803567ffffffffffffffff8111156147ec57600080fd5b60208201915060018102360382131561364857600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8136849003018112614838578182fd5b9190910192915050565b600061484d60405190565b90506148598282614a7c565b919050565b600067ffffffffffffffff82111561487857614878614b6d565b5060200290565b600067ffffffffffffffff82111561489957614899614b6d565b601f19601f83011660200192915050565b61ffff8116905061ffff8216915060008261ffff038211156148ce576148ce614b2b565b500190565b62ffffff8116905062ffffff8216915060008262ffffff038211156148ce576148ce614b2b565b600082198211156148ce576148ce614b2b565b60ff8116905060ff8216915060008260ff038211156148ce576148ce614b2b565b60008261493d5761493d614b41565b500490565b61ffff8116905061ffff8216915060008161ffff048311821515161561496a5761496a614b2b565b500290565b600081600019048311821515161561496a5761496a614b2b565b60ff8116905060ff8216915060008160ff048311821515161561496a5761496a614b2b565b61ffff9081169082165b91506000828210156149cc576149cc614b2b565b500390565b816149b8565b60ff9081169082166149b8565b600073ffffffffffffffffffffffffffffffffffffffff821661039f565b82818337506000910152565b60005b83811015614a29578181015183820152602001614a11565b83811115614a38576000848401525b50505050565b600081614a4d57614a4d614b2b565b506000190190565b600281046001821680614a6957607f821691505b60208210811415612f2f57612f2f614b57565b601f19601f830116810181811067ffffffffffffffff82111715614aa257614aa2614b6d565b6040525050565b61ffff81169050600061ffff821415614ac457614ac4614b2b565b5060010190565b6000600019821415614ac457614ac4614b2b565b60ff81169050600060ff821415614ac457614ac4614b2b565b61ffff9081169082165b9150600082614b1357614b13614b41565b500690565b81614b02565b60ff908116908216614b02565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b614b8c816149e4565b81146120ba57600080fd5b7fff000000000000000000000000000000000000000000000000000000000000008116614b8c565b61ffff8116614b8c565b80614b8c565b60ff8116614b8c56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220e39a37a98143359fe3af60aecb42483606c54282fe6feeab196425c046d9af1564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c80639bac5f7a116100cd578063da8343c911610081578063f2fde38b11610066578063f2fde38b146102e2578063fca228ce146102f5578063ffbcaa511461030857600080fd5b8063da8343c9146102bb578063e9703701146102ce57600080fd5b8063b09afec1116100b2578063b09afec114610265578063d129beee14610288578063d68cf31f146102a857600080fd5b80639bac5f7a1461023f578063a62f8deb1461025257600080fd5b8063715018a6116101245780637e8e0657116101095780637e8e0657146101f15780637f436b5c146101f95780638da5cb5b1461021957600080fd5b8063715018a6146101d25780637249db4d146101dc57600080fd5b8063027c00a0146101565780633ef21a5e1461017f5780634489fb2a146101925780637148ede1146101b2575b600080fd5b6101696101643660046139ae565b61031b565b6040516101769190614713565b60405180910390f35b61016961018d3660046138c1565b6103a5565b6101a56101a03660046139ae565b6103b4565b604051610176919061476e565b6101c56101c0366004613846565b610538565b60405161017691906146ae565b6101da611223565b005b6101e4600881565b604051610176919061477f565b6101e4600d81565b61020c6102073660046138de565b61126f565b604051610176919061478d565b60005473ffffffffffffffffffffffffffffffffffffffff1660405161017691906146a0565b61016961024d36600461393c565b611358565b610169610260366004613959565b6113bc565b61027861027336600461393c565b611560565b60405161017694939291906146bf565b61029b610296366004613991565b611d09565b6040516101769190614705565b6101696102b636600461393c565b611d5e565b6101da6102c9366004613804565b611df0565b6101e46102dc3660046138c1565b60f81c90565b6101da6102f03660046137e7565b612047565b61020c6103033660046138fb565b6120bd565b61016961031636600461393c565b61225c565b6060610325613266565b61032d6132a0565b600061033986866103b4565b80845290506103538360005b6020020151602001516123eb565b8252600061036384846001610538565b8051602080830151604080850151606086015191519596506103899592939092016142bd565b6040516020818303038152906040529450505050505b92915050565b606061039f6103168360f81c90565b604080518082019091526060808252602082015260028360ff16600d81106103ec57634e487b7160e01b600052603260045260246000fd5b0160008360ff16815260200190815260200160002060405180604001604052908160008201805461041c90614a55565b80601f016020809104026020016040519081016040528092919081815260200182805461044890614a55565b80156104955780601f1061046a57610100808354040283529160200191610495565b820191906000526020600020905b81548152906001019060200180831161047857829003601f168201915b505050505081526020016001820180546104ae90614a55565b80601f01602080910402602001604051908101604052809291908181526020018280546104da90614a55565b80156105275780601f106104fc57610100808354040283529160200191610527565b820191906000526020600020905b81548152906001019060200180831161050a57829003601f168201915b505050505081525050905092915050565b6105406132ce565b6040805161044081018252600461040082018181527f4d444177000000000000000000000000000000000000000000000000000000006104208401528252825180840184528181527f4d4445770000000000000000000000000000000000000000000000000000000060208281019190915280840191909152835180850185528281527f4d444977000000000000000000000000000000000000000000000000000000008183015283850152835180850185528281527f4d444d770000000000000000000000000000000000000000000000000000000081830152606080850191909152845180860186528381527f4d4451770000000000000000000000000000000000000000000000000000000081840152608080860191909152855180870187528481527f4d445577000000000000000000000000000000000000000000000000000000008185015260a080870191909152865180880188528581527f4d445977000000000000000000000000000000000000000000000000000000008186015260c080880191909152875180890189528681527f4d446377000000000000000000000000000000000000000000000000000000008187015260e0880152875180890189528681527f4d4467770000000000000000000000000000000000000000000000000000000081870152610100880152875180890189528681527f4d446b770000000000000000000000000000000000000000000000000000000081870152610120880152875180890189528681527f4d5441770000000000000000000000000000000000000000000000000000000081870152610140880152875180890189528681527f4d5445770000000000000000000000000000000000000000000000000000000081870152610160880152875180890189528681527f4d5449770000000000000000000000000000000000000000000000000000000081870152610180880152875180890189528681527f4d544d7700000000000000000000000000000000000000000000000000000000818701526101a0880152875180890189528681527f4d54517700000000000000000000000000000000000000000000000000000000818701526101c0880152875180890189528681527f4d54557700000000000000000000000000000000000000000000000000000000818701526101e0880152875180890189528681527f4d5459770000000000000000000000000000000000000000000000000000000081870152610200880152875180890189528681527f4d5463770000000000000000000000000000000000000000000000000000000081870152610220880152875180890189528681527f4d5467770000000000000000000000000000000000000000000000000000000081870152610240880152875180890189528681527f4d546b770000000000000000000000000000000000000000000000000000000081870152610260880152875180890189528681527f4d6a41770000000000000000000000000000000000000000000000000000000081870152610280880152875180890189528681527f4d6a457700000000000000000000000000000000000000000000000000000000818701526102a0880152875180890189528681527f4d6a497700000000000000000000000000000000000000000000000000000000818701526102c0880152875180890189528681527f4d6a4d7700000000000000000000000000000000000000000000000000000000818701526102e0880152875180890189528681527f4d6a51770000000000000000000000000000000000000000000000000000000081870152610300880152875180890189528681527f4d6a55770000000000000000000000000000000000000000000000000000000081870152610320880152875180890189528681527f4d6a59770000000000000000000000000000000000000000000000000000000081870152610340880152875180890189528681527f4d6a63770000000000000000000000000000000000000000000000000000000081870152610360880152875180890189528681527f4d6a67770000000000000000000000000000000000000000000000000000000081870152610380880152875180890189528681527f4d6a6b7700000000000000000000000000000000000000000000000000000000818701526103a0880152875180890189528681527f4d7a417700000000000000000000000000000000000000000000000000000000818701526103c0880152875180890189529586527f4d7a457700000000000000000000000000000000000000000000000000000000868601526103e08701959095528651948501875260008086529385019390935294830181905282810181905293820184905281019290925290610c6f60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b610c776132f5565b610c7f6132ce565b60008060205b6101a081101561121157610ca08c8260008e8e60ff16612649565b6040880152610cb68c8260018e60ff8f16612649565b6060880152610ccc8c8260028e60ff8f16612649565b6080880152610ce28c8260038e60ff8f16612649565b60a0880152610cf18888612883565b865286516004908890610d0590839061490d565b60ff908116909152610d2291508d9083906004908f908f16612649565b6040880152610d388c8260058e60ff8f16612649565b6060880152610d4e8c8260068e60ff8f16612649565b6080880152610d648c8260078e60ff8f16612649565b60a0880152610d738888612883565b602087015286516004908890610d8a90839061490d565b60ff16905250610d9b6003826148fa565b9050610dae8c8260008e8e60ff16612649565b6040880152610dc48c8260018e60ff8f16612649565b6060880152610dda8c8260028e60ff8f16612649565b6080880152610df08c8260038e60ff8f16612649565b60a0880152610dff8888612883565b604087015286516004908890610e1690839061490d565b60ff908116909152610e3391508d9083906004908f908f16612649565b6040880152610e498c8260058e60ff8f16612649565b6060880152610e5f8c8260068e60ff8f16612649565b6080880152610e758c8260078e60ff8f16612649565b60a0880152610e848888612883565b606087015286516004908890610e9b90839061490d565b60ff16905250610eac6003826148fa565b9050610ebf8c8260008e8e60ff16612649565b6040880152610ed58c8260018e60ff8f16612649565b6060880152610eeb8c8260028e60ff8f16612649565b6080880152610f018c8260038e60ff8f16612649565b60a0880152610f108888612883565b608087015286516004908890610f2790839061490d565b60ff908116909152610f4491508d9083906004908f908f16612649565b6040880152610f5a8c8260058e60ff8f16612649565b6060880152610f708c8260068e60ff8f16612649565b6080880152610f868c8260078e60ff8f16612649565b60a0880152610f958888612883565b60a087015286516004908890610fac90839061490d565b60ff16905250610fbd6003826148fa565b9050610fd08c8260008e8e60ff16612649565b6040880152610fe68c8260018e60ff8f16612649565b6060880152610ffc8c8260028e60ff8f16612649565b60808801526110128c8260038e60ff8f16612649565b60a08801526110218888612883565b60c08701528651600490889061103890839061490d565b60ff90811690915261105591508d9083906004908f908f16612649565b604088015261106b8c8260058e60ff8f16612649565b60608801526110818c8260068e60ff8f16612649565b60808801526110978c8260078e60ff8f16612649565b60a08801526110a68888612883565b60e0870152865160049088906110bd90839061490d565b60ff169052506110ce6003826148fa565b9050856000015186602001518760400151886060015189608001518a60a001518b60c001518c60e0015160405160200161110f989796959493929190614035565b60405160208183030381529060405285848061112a90614adf565b955060ff166008811061114d57634e487b7160e01b600052603260045260246000fd5b6020908102919091019190915260008852870180516001919061117190839061490d565b60ff908116909152600890851610905061120c57845160208087015160408089015160608a015160808b015160a08c015160c08d015160e08e015195516111c49998959694959394929391929101614035565b6040516020818303038152906040528483806111df90614adf565b945060ff166004811061120257634e487b7160e01b600052603260045260246000fd5b6020020152600092505b610c85565b509196505050505050505b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112635760405162461bcd60e51b815260040161125a90614734565b60405180910390fd5b61126d6000612a46565b565b6000806000805b60105460ff82161015611352576010805460ff83169081106112a857634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff1691508261ffff168561ffff16101580156112f657506112eb82846148aa565b61ffff168561ffff16105b15611334578060ff166001141561131257506002949350505050565b600b8160ff16111561132957506001949350505050565b506000949350505050565b61133e82846148aa565b92508061134a81614adf565b915050611276565b50600080fd5b6060600080600061136885611560565b50925092509250600061137c848484610538565b8051602080830151604080850151606086015191519596506113a2959293909201614627565b604051602081830303815290604052945050505050919050565b60606000806000806113d18660000151611560565b9350935093509350606060005b8360ff168160ff1610156114f357818251600014611431576040518060400160405280600481526020017f4c43423700000000000000000000000000000000000000000000000000000000815250611468565b6040518060400160405280600481526020017f65794167000000000000000000000000000000000000000000000000000000008152505b848360ff16600d811061148b57634e487b7160e01b600052603260045260246000fd5b6020020151888460ff16600d81106114b357634e487b7160e01b600052603260045260246000fd5b6020020151600001516040516020016114cf94939291906140a0565b604051602081830303815290604052915080806114eb90614adf565b9150506113de565b506000611501868686610538565b805160208201516040830151606084015193945091929091908561152e6115298f6006612abb565b612cff565b6040516020016115439695949392919061439c565b604051602081830303815290604052965050505050505092915050565b611568613266565b6115706132a0565b600061157a613310565b600061158586612ec8565b90506000611599826001602002015161126f565b60ff1690506000600f82600381106115c157634e487b7160e01b600052603260045260246000fd5b600d02016007016007815481106115e857634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661271061161991906149ae565b61ffff16836007602002015161ffff161090506000600f8361ffff166003811061165357634e487b7160e01b600052603260045260246000fd5b600d020160080160078154811061167a57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff166127106116ab91906149ae565b61ffff16846008602002015161ffff161090506000600f8461ffff16600381106116e557634e487b7160e01b600052603260045260246000fd5b600d020160090160248154811061170c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661271061173d91906149ae565b61ffff16856009602002015161ffff161090506000600f8561ffff166003811061177757634e487b7160e01b600052603260045260246000fd5b600d0201600b0160308154811061179e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff166127106117cf91906149ae565b61ffff1686600b602002015161ffff161090506000806002888260200201516117f89190614af8565b61ffff1611905060005b600d8160ff161015611cfa576000611846826101a08b8560ff16600d811061183a57634e487b7160e01b600052603260045260246000fd5b6020020151858c6120bd565b60208101515190915015611ce6578160ff166002148061186957508160ff16600c145b8015611873575085155b801561187d575086155b8061189457508160ff166007148015611894575085155b806118ab57508160ff16600a1480156118ab575085155b806118fe575060028260ff1610806118d4575060028260ff161180156118d4575060078260ff16105b806118e257508160ff166008145b806118f057508160ff166009145b806118fe57508160ff16600b145b15611ce65784801561190d5750835b801561192457508160ff1660091480156119245750825b8061193b57508160ff16600b14801561193b575082155b156119465750611ce8565b808d8c60ff16600d811061196a57634e487b7160e01b600052603260045260246000fd5b60200201526119958d60ff8d16600d811061034557634e487b7160e01b600052603260045260246000fd5b8c8c60ff16600d81106119b857634e487b7160e01b600052603260045260246000fd5b60209081029190910191909152604080516101e08101825260106101a082018181527f516d466a61326479623356755a434167000000000000000000000000000000006101c084015282528251808401845260088082527f556d466a5a5341670000000000000000000000000000000000000000000000008287015283860191909152835180850185528181527f526d466a5a5341670000000000000000000000000000000000000000000000008187015283850152835180850185528181527f5457393164476767000000000000000000000000000000000000000000000000818701526060840152835180850185528181527f546d397a5a534167000000000000000000000000000000000000000000000000818701526080840152835180850185528181527f52586c6c637941670000000000000000000000000000000000000000000000008187015260a08401528351808501855260148082527f525746794945466a5932567a63323979655341670000000000000000000000008288015260c0850191909152845180860186528181527f526d466a5a53424259324e6c63334e76636e6b670000000000000000000000008188015260e0850152845180860186529182527f5457467a6179416700000000000000000000000000000000000000000000000082870152610100840191909152835180850185528281527f534756685a4342435a577876647941670000000000000000000000000000000081870152610120840152835180850185528181527f52586c6c4945466a5932567a633239796553416700000000000000000000000081870152610140840152835180850185529182527f534756685a434242596d39325a5341670000000000000000000000000000000082860152610160830191909152825180840190935282527f545739316447676751574e6a5a584e7a62334a350000000000000000000000009282019290925261018082015260ff8316600d8110611cab57634e487b7160e01b600052603260045260246000fd5b60200201518a8c60ff16600d8110611cd357634e487b7160e01b600052603260045260246000fd5b60200201528a611ce281614adf565b9b50505b505b80611cf281614adf565b915050611802565b50505050505050509193509193565b600060098260ff1611611d2a57611d2182603061490d565b60f81b92915050565b8160ff16600a11158015611d425750600f8260ff1611155b1561015157600a611d5483606161490d565b611d2191906149d7565b60606000611d6b8361225c565b9050805160021415611d9f5780604051602001611d889190614697565b604051602081830303815290604052915050919050565b805160031415611dba5780604051602001611d889190614370565b805160041415611dd55780604051602001611d88919061466b565b80516005141561039f5780604051602001611d88919061410a565b60005473ffffffffffffffffffffffffffffffffffffffff163314611e275760405162461bcd60e51b815260040161125a90614734565b60005b61ffff811682111561204257604051806040016040528084848461ffff16818110611e6557634e487b7160e01b600052603260045260246000fd5b9050602002810190611e779190614804565b611e81908061479b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001848461ffff8516818110611edf57634e487b7160e01b600052603260045260246000fd5b9050602002810190611ef19190614804565b611eff90602081019061479b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506002848461ffff8516818110611f5b57634e487b7160e01b600052603260045260246000fd5b9050602002810190611f6d9190614804565b611f7e906060810190604001613991565b60ff16600d8110611f9f57634e487b7160e01b600052603260045260246000fd5b01600085858561ffff16818110611fc657634e487b7160e01b600052603260045260246000fd5b9050602002810190611fd89190614804565b611fe9906080810190606001613991565b60ff1681526020808201929092526040016000208251805191926120129284929091019061332b565b50602082810151805161202b926001850192019061332b565b50905050808061203a90614aa9565b915050611e2a565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461207e5760405162461bcd60e51b815260040161125a90614734565b73ffffffffffffffffffffffffffffffffffffffff81166120b15760405162461bcd60e51b815260040161125a90614724565b6120ba81612a46565b50565b6000806000805b600f8561ffff16600381106120e957634e487b7160e01b600052603260045260246000fd5b600d02018660ff16600d811061210f57634e487b7160e01b600052603260045260246000fd5b015460ff8216101561220457600f8561ffff166003811061214057634e487b7160e01b600052603260045260246000fd5b600d02018660ff16600d811061216657634e487b7160e01b600052603260045260246000fd5b018160ff168154811061218957634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff1691508261ffff168761ffff16101580156121d757506121cc82846148aa565b61ffff168761ffff16105b156121e657925061121c915050565b6121f082846148aa565b9250806121fc81614adf565b9150506120c4565b50600f8461ffff166003811061222a57634e487b7160e01b600052603260045260246000fd5b600d02018560ff16600d811061225057634e487b7160e01b600052603260045260246000fd5b01549695505050505050565b60606000825b8015612288578161227281614acb565b9250612281905060108261492e565b9050612262565b60008267ffffffffffffffff8111156122b157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122db576020820181803683370190505b50905060005b83811015612380576122f4601087614b18565b92506122ff83611d09565b82600161230c84886149d1565b61231691906149d1565b8151811061233457634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061236e60108761492e565b955061237981614acb565b90506122e1565b50805181906123c757505060408051808201909152600281527f30300000000000000000000000000000000000000000000000000000000000006020820152949350505050565b8051600114156123e257806040516020016113a2919061410a565b95945050505050565b6123f36133af565b6123fb6133af565b60005b60088161ffff161015612642576124c561246b8561241d846004614942565b61ffff168151811061243f57634e487b7160e01b600052603260045260246000fd5b01602001517fff00000000000000000000000000000000000000000000000000000000000000166103a5565b6124858661247a856004614942565b61241d9060016148aa565b61249f87612494866004614942565b61241d9060026148aa565b6040516020016124b193929190614013565b604051602081830303815290604052612cff565b828261ffff16600881106124e957634e487b7160e01b600052603260045260246000fd5b60200201515261252b846124fe836004614942565b61ffff168151811061252057634e487b7160e01b600052603260045260246000fd5b016020015160f81c90565b828261ffff166008811061254f57634e487b7160e01b600052603260045260246000fd5b60200201516040015261257284612567836004614942565b6124fe9060016148aa565b828261ffff166008811061259657634e487b7160e01b600052603260045260246000fd5b6020020151606001526125b9846125ae836004614942565b6124fe9060026148aa565b828261ffff16600881106125dd57634e487b7160e01b600052603260045260246000fd5b602002015160800152612600846125f5836004614942565b6124fe9060036148aa565b828261ffff166008811061262457634e487b7160e01b600052603260045260246000fd5b6020908102919091015101528061263a81614aa9565b9150506123fe565b5092915050565b606060005b8281101561283a57600084826126656001876149d1565b61266f91906149d1565b600d811061268d57634e487b7160e01b600052603260045260246000fd5b60200201516126da89846126a26001896149d1565b6126ac91906149d1565b600d81106126ca57634e487b7160e01b600052603260045260246000fd5b6020020151602001518989612f35565b60ff16600881106126fb57634e487b7160e01b600052603260045260246000fd5b602002015190508060200151600014156127155750612828565b806020015160ff141561272c575191506123e29050565b60008261273a6002876149d1565b61274491906149d1565b1061281e576000826127576002876149d1565b61276191906149d1565b90505b60008682600d811061278657634e487b7160e01b600052603260045260246000fd5b60200201516127be8b84600d81106127ae57634e487b7160e01b600052603260045260246000fd5b6020020151602001518b8b612f35565b60ff16600881106127df57634e487b7160e01b600052603260045260246000fd5b6020020151905060008160200151111561280b576128006115298483613179565b9450505050506123e2565b508061281681614a3e565b915050612764565b5191506123e29050565b8061283281614acb565b91505061264e565b506128796040518060400160405280600681526020017f6666666666660000000000000000000000000000000000000000000000000000815250612cff565b9695505050505050565b6060816040015183836000015160ff16602081106128b157634e487b7160e01b600052603260045260246000fd5b602002015184846020015160ff16602081106128dd57634e487b7160e01b600052603260045260246000fd5b60200201516060850151855187906128f690600161490d565b60ff166020811061291757634e487b7160e01b600052603260045260246000fd5b602002015187876020015160ff166020811061294357634e487b7160e01b600052603260045260246000fd5b6020020151608088015188518a9061295c90600261490d565b60ff166020811061297d57634e487b7160e01b600052603260045260246000fd5b60200201518a8a6020015160ff16602081106129a957634e487b7160e01b600052603260045260246000fd5b602002015160a08b01518b518d906129c290600361490d565b60ff16602081106129e357634e487b7160e01b600052603260045260246000fd5b60200201518d8d6020015160ff1660208110612a0f57634e487b7160e01b600052603260045260246000fd5b6020020151604051602001612a2f9c9b9a9998979695949392919061413e565b604051602081830303815290604052905092915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608260005b8115612ae75780612ad181614acb565b9150612ae09050600a8361492e565b9150612ac1565b60008467ffffffffffffffff811115612b1057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612b3a576020820181803683370190505b50859350905085612bbb577f300000000000000000000000000000000000000000000000000000000000000081600081518110612b8757634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600191505b81831115612c4557612bce6001846149d1565b92507f2000000000000000000000000000000000000000000000000000000000000000818481518110612c1157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612bbb565b815b8615612cf557612c586001826149d1565b90506000612c67600a8961492e565b612c7290600a61496f565b612c7c90896149d1565b612c8790603061490d565b905060008160f81b905080848481518110612cb257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612cec600a8a61492e565b98505050612c47565b5095945050505050565b805160609080612d1f575050604080516020810190915260008152919050565b60006003612d2e8360026148fa565b612d38919061492e565b612d4390600461496f565b90506000612d528260206148fa565b67ffffffffffffffff811115612d7857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612da2576020820181803683370190505b5090506000604051806060016040528060408152602001614bd9604091399050600181016020830160005b86811015612e2e576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101612dcd565b506003860660018114612e485760028114612e9257612eba565b7f3d3d0000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe830152612eba565b7f3d000000000000000000000000000000000000000000000000000000000000006000198301525b505050918152949350505050565b612ed0613407565b60005b600d811015612f2f57612ee861271084614b18565b8282600d8110612f0857634e487b7160e01b600052603260045260246000fd5b61ffff9092166020929092020152600e9290921c9180612f2781614acb565b915050612ed3565b50919050565b600081612f6f576005848481518110612f5e57634e487b7160e01b600052603260045260246000fd5b016020015160f81c901c905061121c565b8160011415612fba5760086002858581518110612f9c57634e487b7160e01b600052603260045260246000fd5b0160200151612fb3929160f89190911c901c614b1e565b905061121c565b816002141561304b57600784612fd18560016148fa565b81518110612fef57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b60f81c60ff16901c600485858151811061302457634e487b7160e01b600052603260045260246000fd5b0160200151613036919060f81c614b1e565b613041906002614989565b612fb3919061490d565b81600314156130825760086004856130648660016148fa565b81518110612f9c57634e487b7160e01b600052603260045260246000fd5b816004141561309a57600860018561306486836148fa565b8160051415613122576006846130b18560026148fa565b815181106130cf57634e487b7160e01b600052603260045260246000fd5b016020015160f81c901c6002856130e78660016148fa565b8151811061310557634e487b7160e01b600052603260045260246000fd5b0160200151613117919060f81c614b1e565b613041906004614989565b816006141561313b5760086003856130648660026148fa565b6008846131498560026148fa565b8151811061316757634e487b7160e01b600052603260045260246000fd5b0160200151612fb3919060f81c614b1e565b606060008360200151600161318e91906148fa565b61ffff169050600084602001516101006131a891906149d1565b61ffff1690506123e2601060088660400151846131c5919061496f565b60408901516131d4908761496f565b6131de91906148fa565b901c62ffffff16901b6008808760600151856131fa919061496f565b60608a0151613209908861496f565b61321391906148fa565b901c62ffffff16901b600887608001518561322e919061496f565b60808a015161323d908861496f565b61324791906148fa565b61325292911c6148d3565b61325c91906148d3565b62ffffff16611d5e565b604051806101a00160405280600d905b60408051808201909152606080825260208201528152602001906001900390816132765790505090565b604051806101a00160405280600d905b6132b86133af565b8152602001906001900390816132b05790505090565b60405180608001604052806004905b60608152602001906001900390816132dd5790505090565b604080516101008101909152606081526007602082016132dd565b604080516101a0810190915260608152600c602082016132dd565b82805461333790614a55565b90600052602060002090601f016020900481019282613359576000855561339f565b82601f1061337257805160ff191683800117855561339f565b8280016001018555821561339f579182015b8281111561339f578251825591602001919060010190613384565b506133ab929150613426565b5090565b6040518061010001604052806008905b6133f16040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816133bf5790505090565b604051806101a00160405280600d906020820280368337509192915050565b5b808211156133ab5760008155600101613427565b600061344e6134498461485e565b614842565b9050808285602086028501111561346457600080fd5b60005b858110156134a857813567ffffffffffffffff81111561348657600080fd5b850161349288826135eb565b8452506020928301929190910190600101613467565b5050509392505050565b60006134c06134498461485e565b905080828560208602850111156134d657600080fd5b60005b858110156134a857813567ffffffffffffffff8111156134f857600080fd5b850161350488826136ca565b84525060209283019291909101906001016134d9565b60006135286134498461485e565b9050808285602086028501111561353e57600080fd5b60005b858110156134a857813567ffffffffffffffff81111561356057600080fd5b850161356c8882613751565b8452506020928301929190910190600101613541565b60006135906134498461487f565b9050828152602081018484840111156135a857600080fd5b6135b3848285614a02565b509392505050565b803561039f81614b83565b600082601f8301126135d6578081fd5b600d6135e384828561343b565b949350505050565b600082601f8301126135fb578081fd5b60086135e38482856134b2565b60008083601f840112613619578182fd5b50813567ffffffffffffffff811115613630578182fd5b60208301915083602082028301111561364857600080fd5b9250929050565b600082601f83011261365f578081fd5b600d6135e384828561351a565b803561039f81614b97565b600082601f830112613687578081fd5b81356135e3848260208601613582565b6000602082840312156136a8578081fd5b6136b26020614842565b905060006136c084846137d1565b9082015292915050565b600060a082840312156136db578081fd5b6136e560a0614842565b9050813567ffffffffffffffff8111156136fe57600080fd5b61370a84828501613677565b825250602061371b848483016137d1565b90820152604061372d848483016137d1565b90820152606061373f848483016137d1565b9082015260806136c0848483016137d1565b600060408284031215613762578081fd5b61376c6040614842565b9050813567ffffffffffffffff81111561378557600080fd5b61379184828501613677565b825250602082013567ffffffffffffffff8111156137ae57600080fd5b6137ba84828501613677565b60208301525092915050565b803561039f81614bbf565b803561039f81614bc9565b803561039f81614bcf565b6000602082840312156137f8578081fd5b61121c838284016135bb565b60008060208385031215613816578081fd5b8083013567ffffffffffffffff81111561382e578182fd5b61383a85828601613608565b92509250509250929050565b60008060006060848603121561385a578081fd5b8084013567ffffffffffffffff811115613872578182fd5b61387e8682870161364f565b935050602084013567ffffffffffffffff81111561389a578182fd5b6138a6868287016135c6565b92505060406138b7868287016137dc565b9150509250925092565b6000602082840312156138d2578081fd5b61121c8382840161366c565b6000602082840312156138ef578081fd5b61121c838284016137c6565b60008060006060848603121561390f578081fd5b61391b858286016137c6565b9250602061392b868287016137dc565b92505060406138b7868287016137c6565b60006020828403121561394d578081fd5b61121c838284016137d1565b6000806040838503121561396b578182fd5b613977848385016137d1565b9150602061398785828601613697565b9150509250929050565b6000602082840312156139a2578081fd5b61121c838284016137dc565b600080604083850312156139c0578182fd5b6139cc848385016137dc565b91506020613987858286016137dc565b600061121c8383613ae0565b600061121c8383613b84565b600061121c8383613f6c565b600061121c8383613fd2565b613a15816149e4565b82525050565b6000600d836101a0810184845b84811015613a595783830388528151613a4184826139dc565b93505060208201602098909801979150600101613a28565b50909695505050505050565b6000600d836101a0810184845b84811015613a595783830388528151613a8b84826139e8565b93505060208201602098909801979150600101613a72565b60006004836080810184845b84811015613a595783830388528151613ac884826139e8565b93505060208201602098909801979150600101613aaf565b6000600883610100810184845b84811015613a595783830388528151613b0684826139f4565b93505060208201602098909801979150600101613aed565b6000600d836101a0810184845b84811015613a595783830388528151613b448482613a00565b93505060208201602098909801979150600101613b2b565b7fff000000000000000000000000000000000000000000000000000000000000008116613a15565b6000613b8e825190565b808452602084019350613ba5818560208601614a0e565b601f01601f19169290920192915050565b6000613bc0825190565b613bce818560208601614a0e565b9290920192915050565b7f496e527959576c3058335235634755694f69416900000000000000000000000081525b60140190565b7f50484a6c593351674943426d615778735053636a0000000000000000000000008152613bfc565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290505b60400190565b7f50484e325a7942325a584a7a61573975505363784c6a456e49485a705a58644381527f623367394a7a41674d43417a4d6a41674d7a49774a79423462577875637a306e60208201527f6148523063446f764c336433647935334d793576636d63764d6a41774d43397a60408201527f646d636e49484e6f5958426c4c584a6c626d526c636d6c755a7a306e59334a7060608201527f633342465a47646c63796367614756705a326830505363784d44416c4a79423360808201527f615752306144306e4d5441774a53632b0000000000000000000000000000000060a08201525b60b00190565b7f4a7941676544306e00000000000000000000000000000000000000000000000081525b60080190565b7f4a7941674943382b0000000000000000000000000000000000000000000000008152613d90565b7f50484e306557786c506e4a6c5933523764326c6b644767364d5842344f32686c81527f6157646f64446f786348673766547776633352356247552b5043397a646d632b6020820152613c7e565b7f50484e325a7942325a584a7a61573975505363784c6a456e49485a705a58644381527f623367394a7a41674d43417a4d69417a4d69636765473173626e4d394a32683060208201527f644841364c79393364336375647a4d7562334a6e4c7a49774d44417663335a6e60408201527f4a79427a614746775a5331795a57356b5a584a70626d63394a324e7961584e7760608201527f5257526e5a584d6e4947686c6157646f6444306e4d5441774a53636764326c6b60808201527f644767394a7a45774d43556e4943412b0000000000000000000000000000000060a0820152613d66565b7f496942390000000000000000000000000000000000000000000000000000000081525b60040190565b7f4a7941676554306e0000000000000000000000000000000000000000000000008152613d90565b7f30303030000000000000000000000000000000000000000000000000000000008152613f16565b805160a080845260009190840190613f848282613b84565b9150506020830151613f996020860182614004565b506040830151613fac6040860182614004565b506060830151613fbf6060860182614004565b5060808301516135b36080860182614004565b8051604080845260009190840190613fea8282613b84565b915050602083015184820360208601526123e28282613b84565b80613a15565b60ff8116613a15565b61401d8185613bb6565b90506140298184613bb6565b90506135e38183613bb6565b61403f818a613bb6565b905061404b8189613bb6565b90506140578188613bb6565b90506140638187613bb6565b905061406f8186613bb6565b905061407b8185613bb6565b90506140878184613bb6565b90506140938183613bb6565b9998505050505050505050565b6140aa8186613bb6565b90506140b68185613bb6565b90506140c181613bd8565b90506140cd8184613bb6565b7f49697769646d4673645755694f69416900000000000000000000000000000000815260100190506140ff8183613bb6565b90506123e281613ef2565b7f30000000000000000000000000000000000000000000000000000000000000008152600181015b905061039f8183613bb6565b61414781613c02565b9050614153818e613bb6565b905061415e81613d6c565b905061416a818d613bb6565b905061417581613f1c565b9050614181818c613bb6565b7f4a794176506a78795a574e304943426d615778735053636a0000000000000000815260180190506141b3818b613bb6565b90506141be81613d6c565b90506141ca818a613bb6565b90506141d581613f1c565b90506141e18189613bb6565b7f4a794176506a78795a574e304943426d615778735053636a0000000000000000815260180190506142138188613bb6565b905061421e81613d6c565b905061422a8187613bb6565b905061423581613f1c565b90506142418186613bb6565b7f4a794176506a78795a574e304943426d615778735053636a0000000000000000815260180190506142738185613bb6565b905061427e81613d6c565b905061428a8184613bb6565b905061429581613f1c565b90506142a18183613bb6565b90506142ac81613d96565b9d9c50505050505050505050505050565b6142c681613c84565b90506142d28186613bb6565b90506142de8185613bb6565b90506142ea8184613bb6565b90506142f68183613bb6565b7f50484e306557786c506e4a6c5933523764326c6b644767364d5442776544746f81527f5a576c6e614851364d544277654474395043397a64486c735a5434384c334e3260208201527f5a7a343d0000000000000000000000000000000000000000000000000000000060408201529050604481016123e2565b7f3030300000000000000000000000000000000000000000000000000000000000815260038101614132565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c65794181527f67496d6c745957646c58325268644745694f69416950484e325a7942325a584a60208201527f7a61573975505363784c6a456e49485a705a586443623367394a7a41674d434160408201527f7a4d6a41674d7a49774a79423462577875637a306e6148523063446f764c336460608201527f33647935334d793576636d63764d6a41774d43397a646d636e49484e6f59584260808201527f6c4c584a6c626d526c636d6c755a7a306e59334a70633342465a47646c63796360a08201527f2b0000000000000000000000000000000000000000000000000000000000000060c082015260c1016144b08188613bb6565b90506144bc8187613bb6565b90506144c88186613bb6565b90506144d48185613bb6565b7f50484e306557786c506e4a6c5933523764326c6b644767364d5442776544746f81527f5a576c6e614851364d544277654474395043397a64486c735a5434384c334e3260208201527f5a7a346749697767496d463064484a70596e56305a584d694f694262000000006040820152605c0190506145528184613bb6565b7f5853776749434169626d46745a534936496c4a31626d356c6369416a000000008152601c0190506145848183613bb6565b7f49697767496d526c63324e796158423061573975496a6f67496b4e6f59576c7581527f49464a31626d356c636e4d6759584a6c4945316c5a32456751326c306553427960208201527f5a57356c5a32466b5a584d674d5441774a53426e5a57356c636d46305a57516760408201527f623234675932686861573475496e3067000000000000000000000000000000006060820152607001979650505050505050565b61463081613e0c565b905061463c8186613bb6565b90506146488185613bb6565b90506146548184613bb6565b90506146608183613bb6565b90506123e281613dbe565b7f3030000000000000000000000000000000000000000000000000000000000000815260028101614132565b61413281613f44565b6020810161039f8284613a0c565b6020808252810161121c8184613aa3565b608080825281016146d08187613b1e565b905081810360208301526146e48186613a1b565b90506146f3604083018561400a565b81810360608301526128798184613a65565b6020810161039f8284613b5c565b6020808252810161121c8184613b84565b6020808252810161039f81613c2a565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408301526060820161039f565b6020808252810161121c8184613fd2565b6020810161039f8284614004565b6020810161039f828461400a565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1368590030181126147d0578283fd5b8301915050803567ffffffffffffffff8111156147ec57600080fd5b60208201915060018102360382131561364857600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8136849003018112614838578182fd5b9190910192915050565b600061484d60405190565b90506148598282614a7c565b919050565b600067ffffffffffffffff82111561487857614878614b6d565b5060200290565b600067ffffffffffffffff82111561489957614899614b6d565b601f19601f83011660200192915050565b61ffff8116905061ffff8216915060008261ffff038211156148ce576148ce614b2b565b500190565b62ffffff8116905062ffffff8216915060008262ffffff038211156148ce576148ce614b2b565b600082198211156148ce576148ce614b2b565b60ff8116905060ff8216915060008260ff038211156148ce576148ce614b2b565b60008261493d5761493d614b41565b500490565b61ffff8116905061ffff8216915060008161ffff048311821515161561496a5761496a614b2b565b500290565b600081600019048311821515161561496a5761496a614b2b565b60ff8116905060ff8216915060008160ff048311821515161561496a5761496a614b2b565b61ffff9081169082165b91506000828210156149cc576149cc614b2b565b500390565b816149b8565b60ff9081169082166149b8565b600073ffffffffffffffffffffffffffffffffffffffff821661039f565b82818337506000910152565b60005b83811015614a29578181015183820152602001614a11565b83811115614a38576000848401525b50505050565b600081614a4d57614a4d614b2b565b506000190190565b600281046001821680614a6957607f821691505b60208210811415612f2f57612f2f614b57565b601f19601f830116810181811067ffffffffffffffff82111715614aa257614aa2614b6d565b6040525050565b61ffff81169050600061ffff821415614ac457614ac4614b2b565b5060010190565b6000600019821415614ac457614ac4614b2b565b60ff81169050600060ff821415614ac457614ac4614b2b565b61ffff9081169082165b9150600082614b1357614b13614b41565b500690565b81614b02565b60ff908116908216614b02565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b614b8c816149e4565b81146120ba57600080fd5b7fff000000000000000000000000000000000000000000000000000000000000008116614b8c565b61ffff8116614b8c565b80614b8c565b60ff8116614b8c56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220e39a37a98143359fe3af60aecb42483606c54282fe6feeab196425c046d9af1564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 225,
        "contract": "contracts/runners/ChainRunnersLayerRenderer.sol:ChainRunnersLayerRenderer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 425,
        "contract": "contracts/runners/ChainRunnersLayerRenderer.sol:ChainRunnersLayerRenderer",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9016,
        "contract": "contracts/runners/ChainRunnersLayerRenderer.sol:ChainRunnersLayerRenderer",
        "label": "layers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_mapping(t_uint256,t_struct(Layer)8994_storage))13_storage"
      },
      {
        "astId": 9023,
        "contract": "contracts/runners/ChainRunnersLayerRenderer.sol:ChainRunnersLayerRenderer",
        "label": "WEIGHTS",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_array(t_array(t_uint16)dyn_storage)13_storage)3_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_array(t_uint16)dyn_storage)13_storage)3_storage": {
        "base": "t_array(t_array(t_uint16)dyn_storage)13_storage",
        "encoding": "inplace",
        "label": "uint16[][13][3]",
        "numberOfBytes": "1248"
      },
      "t_array(t_array(t_uint16)dyn_storage)13_storage": {
        "base": "t_array(t_uint16)dyn_storage",
        "encoding": "inplace",
        "label": "uint16[][13]",
        "numberOfBytes": "416"
      },
      "t_array(t_mapping(t_uint256,t_struct(Layer)8994_storage))13_storage": {
        "base": "t_mapping(t_uint256,t_struct(Layer)8994_storage)",
        "encoding": "inplace",
        "label": "mapping(uint256 => struct ChainRunnersBaseRenderer.Layer)[13]",
        "numberOfBytes": "416"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(Layer)8994_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ChainRunnersBaseRenderer.Layer)",
        "numberOfBytes": "32",
        "value": "t_struct(Layer)8994_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Layer)8994_storage": {
        "encoding": "inplace",
        "label": "struct ChainRunnersBaseRenderer.Layer",
        "members": [
          {
            "astId": 8991,
            "contract": "contracts/runners/ChainRunnersLayerRenderer.sol:ChainRunnersLayerRenderer",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8993,
            "contract": "contracts/runners/ChainRunnersLayerRenderer.sol:ChainRunnersLayerRenderer",
            "label": "hexString",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}