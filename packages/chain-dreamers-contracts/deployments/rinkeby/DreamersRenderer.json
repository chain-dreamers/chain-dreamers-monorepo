{
  "address": "0xB9b1150953B416cf21a84A95cF9278bBEd6B37C1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rendererAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_runnersTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "InvalidCodeAtRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WriteError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BITS_PER_D_ATTRIBUTE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BITS_PER_D_INDEX",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BITS_PER_FILL_INDEX",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "D_ATTRIBUTE_PALETTE",
      "outputs": [
        {
          "internalType": "bytes8",
          "name": "",
          "type": "bytes8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "D_ATTRIBUTE_PARAMETERS_COUNT",
      "outputs": [
        {
          "internalType": "bytes8",
          "name": "",
          "type": "bytes8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FILL_TAG",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HASHTAG",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NONE_COLOR",
      "outputs": [
        {
          "internalType": "bytes3",
          "name": "",
          "type": "bytes3"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_LAYERS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_RUNNERS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PATH_TAG_END",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PATH_TAG_START",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STROKE_TAG",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SVG_TAG_END",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SVG_TAG_START",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "WEIGHTS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dPalette",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dPaletteIndexes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fillPalette",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "dEncodedBytes",
          "type": "bytes"
        }
      ],
      "name": "getD",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        }
      ],
      "name": "getDBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        }
      ],
      "name": "getDIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runnerDna",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "dreamerDna",
          "type": "uint8"
        }
      ],
      "name": "getDreamerFullDna",
      "outputs": [
        {
          "internalType": "uint16[13]",
          "name": "",
          "type": "uint16[13]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        }
      ],
      "name": "getFill",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "dIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "fillIndex",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "stroke",
              "type": "bool"
            }
          ],
          "internalType": "struct DreamersRenderer.Trait[]",
          "name": "traits",
          "type": "tuple[]"
        }
      ],
      "name": "getSvg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[13]",
          "name": "dna",
          "type": "uint16[13]"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "internalType": "uint16[13]",
          "name": "traitIndexes",
          "type": "uint16[13]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        }
      ],
      "name": "getTrait",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "dIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "fillIndex",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "stroke",
              "type": "bool"
            }
          ],
          "internalType": "struct DreamersRenderer.Trait[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_layerIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_itemIndex",
          "type": "uint16"
        }
      ],
      "name": "getTraitIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[13]",
          "name": "_index",
          "type": "uint16[13]"
        }
      ],
      "name": "getTraits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "dIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "fillIndex",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "stroke",
              "type": "bool"
            }
          ],
          "internalType": "struct DreamersRenderer.Trait[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_pathPalette",
          "type": "bytes[]"
        }
      ],
      "name": "setDPalette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pathPaletteIndex",
          "type": "bytes"
        }
      ],
      "name": "setDPaletteIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_fillPalette",
          "type": "bytes"
        }
      ],
      "name": "setFillPalette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_layerIndexes",
          "type": "bytes"
        }
      ],
      "name": "setLayerIndexes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_traitPalette",
          "type": "bytes"
        }
      ],
      "name": "setTraitPalette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_traitPaletteIndex",
          "type": "bytes"
        }
      ],
      "name": "setTraitPaletteIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "splitNumber",
      "outputs": [
        {
          "internalType": "uint16[13]",
          "name": "numbers",
          "type": "uint16[13]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "dreamerDna",
          "type": "uint8"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitPalette",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitPaletteIndexes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe954565b7b69d3c59ed9ce54297797ddaf752fc64c92f2eae2d1241e24012d2e",
  "receipt": {
    "to": null,
    "from": "0x145247853C6eeA1263757d22C5e8C3A4dBbF48b6",
    "contractAddress": "0xB9b1150953B416cf21a84A95cF9278bBEd6B37C1",
    "transactionIndex": 31,
    "gasUsed": "6798677",
    "logsBloom": "0x
    "blockHash": "0xfc1aad597d22d627bd99837b815c2feb062713a8bd1a4461cea8a3f855e9735b",
    "transactionHash": "0xe954565b7b69d3c59ed9ce54297797ddaf752fc64c92f2eae2d1241e24012d2e",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 10042550,
        "transactionHash": "0xe954565b7b69d3c59ed9ce54297797ddaf752fc64c92f2eae2d1241e24012d2e",
        "address": "0xB9b1150953B416cf21a84A95cF9278bBEd6B37C1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000145247853c6eea1263757d22c5e8c3a4dbbf48b6"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0xfc1aad597d22d627bd99837b815c2feb062713a8bd1a4461cea8a3f855e9735b"
      }
    ],
    "blockNumber": 10042550,
    "cumulativeGasUsed": "15067962",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x79cfaa14901045e4564A5DAdb34DE81dC9efB871",
    "0x651534a85763beB8b6D04b86C96BE724a2D3b8cf"
  ],
  "numDeployments": 1,
  "solcInputHash": "6924c8c29a89484d2608e9133b0a4dc4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rendererAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_runnersTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WriteError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BITS_PER_D_ATTRIBUTE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_PER_D_INDEX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_PER_FILL_INDEX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"D_ATTRIBUTE_PALETTE\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"D_ATTRIBUTE_PARAMETERS_COUNT\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FILL_TAG\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HASHTAG\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NONE_COLOR\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"\",\"type\":\"bytes3\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_LAYERS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_RUNNERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PATH_TAG_END\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PATH_TAG_START\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STROKE_TAG\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVG_TAG_END\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVG_TAG_START\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WEIGHTS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dPalette\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dPaletteIndexes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillPalette\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dEncodedBytes\",\"type\":\"bytes\"}],\"name\":\"getD\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"getDBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"getDIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runnerDna\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"dreamerDna\",\"type\":\"uint8\"}],\"name\":\"getDreamerFullDna\",\"outputs\":[{\"internalType\":\"uint16[13]\",\"name\":\"\",\"type\":\"uint16[13]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"getFill\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"fillIndex\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"stroke\",\"type\":\"bool\"}],\"internalType\":\"struct DreamersRenderer.Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"}],\"name\":\"getSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[13]\",\"name\":\"dna\",\"type\":\"uint16[13]\"}],\"name\":\"getTokenData\",\"outputs\":[{\"internalType\":\"uint16[13]\",\"name\":\"traitIndexes\",\"type\":\"uint16[13]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"getTrait\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"fillIndex\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"stroke\",\"type\":\"bool\"}],\"internalType\":\"struct DreamersRenderer.Trait[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_layerIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_itemIndex\",\"type\":\"uint16\"}],\"name\":\"getTraitIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[13]\",\"name\":\"_index\",\"type\":\"uint16[13]\"}],\"name\":\"getTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"fillIndex\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"stroke\",\"type\":\"bool\"}],\"internalType\":\"struct DreamersRenderer.Trait[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_pathPalette\",\"type\":\"bytes[]\"}],\"name\":\"setDPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pathPaletteIndex\",\"type\":\"bytes\"}],\"name\":\"setDPaletteIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_fillPalette\",\"type\":\"bytes\"}],\"name\":\"setFillPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_layerIndexes\",\"type\":\"bytes\"}],\"name\":\"setLayerIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_traitPalette\",\"type\":\"bytes\"}],\"name\":\"setTraitPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_traitPaletteIndex\",\"type\":\"bytes\"}],\"name\":\"setTraitPaletteIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"splitNumber\",\"outputs\":[{\"internalType\":\"uint16[13]\",\"name\":\"numbers\",\"type\":\"uint16[13]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"dreamerDna\",\"type\":\"uint8\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitPalette\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitPaletteIndexes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getD(bytes)\":{\"details\":\"Decodes the path and returns it as a plain string to be used in the svg path attribute.\"},\"getDBytes(uint16)\":{\"details\":\"Retrieve the bytes for the given d from the dPalette storage. The bytes may be split into several SSTORE2      slots.\"},\"getDIndex(uint16)\":{\"details\":\"Get the start and end indexes of the bytes concerning the given d in the dPalette storage.\"},\"getDreamerFullDna(uint256,uint8)\":{\"details\":\"The Dreamer's full DNA is an alteration of its corresponding Runner's DNA with it's consumed candy.      The candy ids are hardcoded while it should be better to retrieve their effects from the CandyShop      contract.\"},\"getFill(uint16)\":{\"details\":\"3 bytes per color because svg does not handle alpha.\"},\"getSvg((uint16,uint16,bool)[])\":{\"details\":\"Each trait is the bytes representation of the final svg string concatenating several <path> elements.\"},\"getTokenData(uint16[13])\":{\"details\":\"Somehow copied from the original code but returns an array of trait indexes instead of Layer structs.      Flags for no layer is also updated from empty `Layer` to index = type(uint16).max.\"},\"getTraitIndex(uint16,uint16)\":{\"details\":\"This function will be the pendant of the ChainRunnersBaseRenderer.getLayer ones.\"},\"getTraits(uint16[13])\":{\"details\":\"Used to concat all the traits of a given dreamers given the array of trait indexes.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDPalette(bytes[])\":{\"details\":\"Only the d parameter is encoded for each path. All the paths are concatenated together to save gas.      The dPaletteIndexes is used to retrieve the path from the dPalette.\"},\"setDPaletteIndex(bytes)\":{\"details\":\"Since each SSTORE2 slots can contain up to 24kb, indexes need to be uint16, ie. two bytes per index.\"},\"setFillPalette(bytes)\":{\"details\":\"Colors are concatenated and stored in a single 'bytes' with SSTORE2 to save gas.\"},\"setLayerIndexes(bytes)\":{\"details\":\"The trait indexes allow to map from the Chain Runners 2D indexation (trait index, layer index) to the      current 1D indexation (trait index).\"},\"setTraitPalette(bytes)\":{\"details\":\"The traits are stored as a list of tuples (d index, fill index). For our case, 12 bits per index is      enough as 2^12 = 4096 is greater than total number of d and total number of fill to date.      This could be changed if needed.      Hence a trait is a sequence of several 3 bytes long (d index, fill index).\"},\"setTraitPaletteIndex(bytes)\":{\"details\":\"Since each SSTORE2 slots can contain up to 24kb, indexes need to be uint16, ie. two bytes per index.      A trait can then be retrieved with traitPalette[traitPaletteIndexes[i]: traitPaletteIndexes[i+1]]\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTrait(uint16)\":{\"notice\":\"Useful for returning a single Traits in the Runner's meaning\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dreamers/DreamersRenderer.sol\":\"DreamersRenderer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@0xsequence/sstore2/contracts/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\",\"keccak256\":\"0x79e6f5c7bb6b22d142ad0ec37e00930cdbef28ab405214f7c0f94cbd58255383\",\"license\":\"MIT\"},\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40ef4ee5697507566574eda36358a76b523b3dfe7cb65da1630004fe6c5a7a45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/dreamers/ChainRunnersConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IChainRunnersBaseRenderer.sol\\\";\\n\\n/*  @title Chain Runners constants\\n    @author Clement Walter\\n    @notice This contracts is used to retrieve constants used by the Chain Runners that are not exposed\\n            by the Chain Runners contracts.\\n*/\\ncontract ChainRunnersConstants {\\n    uint16[][13][3] public WEIGHTS;\\n    uint8 public constant NUM_LAYERS = 13;\\n    uint16 public constant NUM_RUNNERS = 10_000;\\n    IChainRunnersBaseRenderer chainRunnersBaseRenderer;\\n\\n    constructor(address _rendererAddress) {\\n        chainRunnersBaseRenderer = IChainRunnersBaseRenderer(_rendererAddress);\\n\\n        WEIGHTS[0][0] = [\\n            36,\\n            225,\\n            225,\\n            225,\\n            360,\\n            135,\\n            27,\\n            360,\\n            315,\\n            315,\\n            315,\\n            315,\\n            225,\\n            180,\\n            225,\\n            180,\\n            360,\\n            180,\\n            45,\\n            360,\\n            360,\\n            360,\\n            27,\\n            36,\\n            360,\\n            45,\\n            180,\\n            360,\\n            225,\\n            360,\\n            225,\\n            225,\\n            360,\\n            180,\\n            45,\\n            360,\\n            18,\\n            225,\\n            225,\\n            225,\\n            225,\\n            180,\\n            225,\\n            361\\n        ];\\n        WEIGHTS[0][1] = [\\n            875,\\n            1269,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            17,\\n            8,\\n            41\\n        ];\\n        WEIGHTS[0][2] = [\\n            303,\\n            303,\\n            303,\\n            303,\\n            151,\\n            30,\\n            0,\\n            0,\\n            151,\\n            151,\\n            151,\\n            151,\\n            30,\\n            303,\\n            151,\\n            30,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            30,\\n            151,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            3066\\n        ];\\n        WEIGHTS[0][3] = [\\n            645,\\n            0,\\n            1290,\\n            322,\\n            645,\\n            645,\\n            645,\\n            967,\\n            322,\\n            967,\\n            645,\\n            967,\\n            967,\\n            973\\n        ];\\n        WEIGHTS[0][4] = [\\n            0,\\n            0,\\n            0,\\n            1250,\\n            1250,\\n            1250,\\n            1250,\\n            1250,\\n            1250,\\n            1250,\\n            1250\\n        ];\\n        WEIGHTS[0][5] = [\\n            121,\\n            121,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            0,\\n            0,\\n            0,\\n            0,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            243,\\n            0,\\n            0,\\n            0,\\n            121,\\n            121,\\n            243,\\n            121,\\n            121,\\n            306\\n        ];\\n        WEIGHTS[0][6] = [\\n            925,\\n            555,\\n            185,\\n            555,\\n            925,\\n            925,\\n            185,\\n            1296,\\n            1296,\\n            1296,\\n            1857\\n        ];\\n        WEIGHTS[0][7] = [88, 88, 88, 88, 88, 265, 442, 8853];\\n        WEIGHTS[0][8] = [189, 189, 47, 18, 9, 28, 37, 9483];\\n        WEIGHTS[0][9] = [\\n            340,\\n            340,\\n            340,\\n            340,\\n            340,\\n            340,\\n            34,\\n            340,\\n            340,\\n            340,\\n            340,\\n            170,\\n            170,\\n            170,\\n            102,\\n            238,\\n            238,\\n            238,\\n            272,\\n            340,\\n            340,\\n            340,\\n            272,\\n            238,\\n            238,\\n            238,\\n            238,\\n            170,\\n            34,\\n            340,\\n            340,\\n            136,\\n            340,\\n            340,\\n            340,\\n            340,\\n            344\\n        ];\\n        WEIGHTS[0][10] = [\\n            159,\\n            212,\\n            106,\\n            53,\\n            26,\\n            159,\\n            53,\\n            265,\\n            53,\\n            212,\\n            159,\\n            265,\\n            53,\\n            265,\\n            265,\\n            212,\\n            53,\\n            159,\\n            239,\\n            53,\\n            106,\\n            5,\\n            106,\\n            53,\\n            212,\\n            212,\\n            106,\\n            159,\\n            212,\\n            265,\\n            212,\\n            265,\\n            5066\\n        ];\\n        WEIGHTS[0][11] = [\\n            139,\\n            278,\\n            278,\\n            250,\\n            250,\\n            194,\\n            222,\\n            278,\\n            278,\\n            194,\\n            222,\\n            83,\\n            222,\\n            278,\\n            139,\\n            139,\\n            27,\\n            278,\\n            278,\\n            278,\\n            278,\\n            27,\\n            278,\\n            139,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            27,\\n            139,\\n            139,\\n            139,\\n            139,\\n            0,\\n            278,\\n            194,\\n            83,\\n            83,\\n            278,\\n            83,\\n            27,\\n            306\\n        ];\\n        WEIGHTS[0][12] = [981, 2945, 654, 16, 981, 327, 654, 163, 3279];\\n\\n        // Skull\\n        WEIGHTS[1][0] = [\\n            36,\\n            225,\\n            225,\\n            225,\\n            360,\\n            135,\\n            27,\\n            360,\\n            315,\\n            315,\\n            315,\\n            315,\\n            225,\\n            180,\\n            225,\\n            180,\\n            360,\\n            180,\\n            45,\\n            360,\\n            360,\\n            360,\\n            27,\\n            36,\\n            360,\\n            45,\\n            180,\\n            360,\\n            225,\\n            360,\\n            225,\\n            225,\\n            360,\\n            180,\\n            45,\\n            360,\\n            18,\\n            225,\\n            225,\\n            225,\\n            225,\\n            180,\\n            225,\\n            361\\n        ];\\n        WEIGHTS[1][1] = [\\n            875,\\n            1269,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            17,\\n            8,\\n            41\\n        ];\\n        WEIGHTS[1][2] = [\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            10000\\n        ];\\n        WEIGHTS[1][3] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\\n        WEIGHTS[1][4] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\\n        WEIGHTS[1][5] = [\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            384,\\n            7692,\\n            1923,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1\\n        ];\\n        WEIGHTS[1][6] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10000];\\n        WEIGHTS[1][7] = [0, 0, 0, 0, 0, 909, 0, 9091];\\n        WEIGHTS[1][8] = [0, 0, 0, 0, 0, 0, 0, 10000];\\n        WEIGHTS[1][9] = [\\n            526,\\n            526,\\n            526,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            526,\\n            0,\\n            0,\\n            0,\\n            526,\\n            0,\\n            526,\\n            0,\\n            0,\\n            0,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            526,\\n            0,\\n            0,\\n            526,\\n            0,\\n            0,\\n            0,\\n            0,\\n            532\\n        ];\\n        WEIGHTS[1][10] = [\\n            80,\\n            0,\\n            400,\\n            240,\\n            80,\\n            0,\\n            240,\\n            0,\\n            0,\\n            80,\\n            80,\\n            80,\\n            0,\\n            0,\\n            0,\\n            0,\\n            80,\\n            80,\\n            0,\\n            0,\\n            80,\\n            80,\\n            0,\\n            80,\\n            80,\\n            80,\\n            80,\\n            80,\\n            0,\\n            0,\\n            0,\\n            0,\\n            8000\\n        ];\\n        WEIGHTS[1][11] = [\\n            289,\\n            0,\\n            0,\\n            0,\\n            0,\\n            404,\\n            462,\\n            578,\\n            578,\\n            0,\\n            462,\\n            173,\\n            462,\\n            578,\\n            0,\\n            0,\\n            57,\\n            0,\\n            57,\\n            0,\\n            57,\\n            57,\\n            578,\\n            289,\\n            578,\\n            57,\\n            0,\\n            57,\\n            57,\\n            57,\\n            578,\\n            578,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            57,\\n            289,\\n            578,\\n            0,\\n            0,\\n            0,\\n            231,\\n            57,\\n            0,\\n            0,\\n            1745\\n        ];\\n        WEIGHTS[1][12] = [714, 714, 714, 0, 714, 0, 0, 0, 7144];\\n\\n        // Bot\\n        WEIGHTS[2][0] = [\\n            36,\\n            225,\\n            225,\\n            225,\\n            360,\\n            135,\\n            27,\\n            360,\\n            315,\\n            315,\\n            315,\\n            315,\\n            225,\\n            180,\\n            225,\\n            180,\\n            360,\\n            180,\\n            45,\\n            360,\\n            360,\\n            360,\\n            27,\\n            36,\\n            360,\\n            45,\\n            180,\\n            360,\\n            225,\\n            360,\\n            225,\\n            225,\\n            360,\\n            180,\\n            45,\\n            360,\\n            18,\\n            225,\\n            225,\\n            225,\\n            225,\\n            180,\\n            225,\\n            361\\n        ];\\n        WEIGHTS[2][1] = [\\n            875,\\n            1269,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            779,\\n            17,\\n            8,\\n            41\\n        ];\\n        WEIGHTS[2][2] = [\\n            303,\\n            303,\\n            303,\\n            303,\\n            151,\\n            30,\\n            0,\\n            0,\\n            151,\\n            151,\\n            151,\\n            151,\\n            30,\\n            303,\\n            151,\\n            30,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            30,\\n            151,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            303,\\n            3066\\n        ];\\n        WEIGHTS[2][3] = [\\n            645,\\n            0,\\n            1290,\\n            322,\\n            645,\\n            645,\\n            645,\\n            967,\\n            322,\\n            967,\\n            645,\\n            967,\\n            967,\\n            973\\n        ];\\n        WEIGHTS[2][4] = [2500, 2500, 2500, 0, 0, 0, 0, 0, 0, 2500, 0];\\n        WEIGHTS[2][5] = [\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            588,\\n            588,\\n            588,\\n            588,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            588,\\n            588,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            588,\\n            0,\\n            0,\\n            4\\n        ];\\n        WEIGHTS[2][6] = [\\n            925,\\n            555,\\n            185,\\n            555,\\n            925,\\n            925,\\n            185,\\n            1296,\\n            1296,\\n            1296,\\n            1857\\n        ];\\n        WEIGHTS[2][7] = [88, 88, 88, 88, 88, 265, 442, 8853];\\n        WEIGHTS[2][8] = [183, 274, 274, 18, 18, 27, 36, 9170];\\n        WEIGHTS[2][9] = [\\n            340,\\n            340,\\n            340,\\n            340,\\n            340,\\n            340,\\n            34,\\n            340,\\n            340,\\n            340,\\n            340,\\n            170,\\n            170,\\n            170,\\n            102,\\n            238,\\n            238,\\n            238,\\n            272,\\n            340,\\n            340,\\n            340,\\n            272,\\n            238,\\n            238,\\n            238,\\n            238,\\n            170,\\n            34,\\n            340,\\n            340,\\n            136,\\n            340,\\n            340,\\n            340,\\n            340,\\n            344\\n        ];\\n        WEIGHTS[2][10] = [\\n            217,\\n            362,\\n            217,\\n            144,\\n            72,\\n            289,\\n            144,\\n            362,\\n            72,\\n            289,\\n            217,\\n            362,\\n            72,\\n            362,\\n            362,\\n            289,\\n            0,\\n            217,\\n            0,\\n            72,\\n            144,\\n            7,\\n            217,\\n            72,\\n            217,\\n            217,\\n            289,\\n            217,\\n            289,\\n            362,\\n            217,\\n            362,\\n            3269\\n        ];\\n        WEIGHTS[2][11] = [\\n            139,\\n            278,\\n            278,\\n            250,\\n            250,\\n            194,\\n            222,\\n            278,\\n            278,\\n            194,\\n            222,\\n            83,\\n            222,\\n            278,\\n            139,\\n            139,\\n            27,\\n            278,\\n            278,\\n            278,\\n            278,\\n            27,\\n            278,\\n            139,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            278,\\n            27,\\n            139,\\n            139,\\n            139,\\n            139,\\n            0,\\n            278,\\n            194,\\n            83,\\n            83,\\n            278,\\n            83,\\n            27,\\n            306\\n        ];\\n        WEIGHTS[2][12] = [981, 2945, 654, 16, 981, 327, 654, 163, 3279];\\n    }\\n\\n    function splitNumber(uint256 _number)\\n        public\\n        pure\\n        returns (uint16[NUM_LAYERS] memory numbers)\\n    {\\n        for (uint256 i = 0; i < numbers.length; i++) {\\n            numbers[i] = uint16(_number % NUM_RUNNERS);\\n            _number >>= 14;\\n        }\\n        return numbers;\\n    }\\n}\\n\",\"keccak256\":\"0x7eabe5b2de4eb55dd9112369477f47dd12a398c157a28c7846ee07c58eb34eb5\",\"license\":\"MIT\"},\"contracts/dreamers/DreamersRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport {Integers} from \\\"../lib/Integers.sol\\\";\\nimport \\\"./ChainRunnersConstants.sol\\\";\\n\\nimport \\\"../interfaces/IChainRunners.sol\\\";\\nimport \\\"../interfaces/IDreamersRenderer.sol\\\";\\n\\n/*  @title Dreamers Renderer\\n    @author Clement Walter\\n    @dev Leverage the d attributes of svg <path> to encode a palette of base traits. Each runner trait\\n         is encoded as a combination of these base traits. More precisely, the Dreamers encoding scheme works as follows:\\n         - each one of the 330 traits is encoded as a list of <path />\\n         - each path combines a `d` and a `fill`\\n         - the storage contains the all the possible `d` and all the possible `fill`\\n         - each trait is then an ordered list of tuples (index of d, index of fill)\\n         - each dreamer is a list a trait and consequently still an ordered list of (index of d, index of fill)\\n*/\\ncontract DreamersRenderer is\\n    IDreamersRenderer,\\n    Ownable,\\n    ReentrancyGuard,\\n    ChainRunnersConstants\\n{\\n    using Integers for uint8;\\n    using Strings for uint256;\\n\\n    // We have a total of 3 bytes = 24 bits per Path\\n    uint8 public constant BITS_PER_D_INDEX = 12;\\n    uint8 public constant BITS_PER_FILL_INDEX = 12;\\n\\n    // Each D is encoded with a sequence of 2 bits for each letter (M, L, Q, C) and 1 byte per attribute. Since each\\n    // letter does not have the same number of attributes, this number if stored as constant below as well.\\n    uint8 public constant BITS_PER_D_ATTRIBUTE = 3;\\n    bytes8 public constant D_ATTRIBUTE_PALETTE = hex\\\"4d4c51434148565a\\\"; // M L Q C A H V Z\\n    bytes8 public constant D_ATTRIBUTE_PARAMETERS_COUNT = hex\\\"0202040607010100\\\"; // 2 2 4 6 7 1 1 0\\n    bytes3 public constant NONE_COLOR = hex\\\"000001\\\";\\n    bytes public constant PATH_TAG_START = bytes(\\\"%3cpath%20d='\\\");\\n    bytes public constant FILL_TAG = bytes(\\\"'%20fill='\\\");\\n    bytes public constant STROKE_TAG = bytes(\\\"'%20stroke='%23000\\\");\\n    bytes public constant PATH_TAG_END = bytes(\\\"'/%3e\\\");\\n    bytes public constant HASHTAG = bytes(\\\"%23\\\");\\n    bytes public constant SVG_TAG_START =\\n        bytes(\\n            \\\"%3csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20255%20255'%20width='500px'%20height='500px'%3e\\\"\\n        );\\n    bytes public constant SVG_TAG_END =\\n        bytes(\\\"%3cstyle%3epath{stroke-width:0.71}%3c/style%3e%3c/svg%3e\\\");\\n\\n    struct Trait {\\n        uint16 dIndex;\\n        uint16 fillIndex;\\n        bool stroke;\\n    }\\n\\n    address public fillPalette;\\n    address[] public dPalette;\\n    address public dPaletteIndexes;\\n    address public traitPalette;\\n    address public traitPaletteIndexes;\\n    bytes layerIndexes;\\n    IChainRunners runnersToken;\\n\\n    ////////////////////////////////////////////////////////////////////////////////\\n    ////////////////////////////  Rendering mechanics  /////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////////////\\n    /// @dev Colors are concatenated and stored in a single 'bytes' with SSTORE2 to save gas.\\n    function setFillPalette(bytes calldata _fillPalette) external onlyOwner {\\n        fillPalette = SSTORE2.write(_fillPalette);\\n    }\\n\\n    /// @dev Only the d parameter is encoded for each path. All the paths are concatenated together to save gas.\\n    ///      The dPaletteIndexes is used to retrieve the path from the dPalette.\\n    function setDPalette(bytes[] calldata _pathPalette) external onlyOwner {\\n        for (uint8 i = 0; i < _pathPalette.length; i++) {\\n            dPalette.push(SSTORE2.write(_pathPalette[i]));\\n        }\\n    }\\n\\n    /// @dev Since each SSTORE2 slots can contain up to 24kb, indexes need to be uint16, ie. two bytes per index.\\n    function setDPaletteIndex(bytes calldata _pathPaletteIndex)\\n        external\\n        onlyOwner\\n    {\\n        dPaletteIndexes = SSTORE2.write(_pathPaletteIndex);\\n    }\\n\\n    /// @dev The traits are stored as a list of tuples (d index, fill index). For our case, 12 bits per index is\\n    ///      enough as 2^12 = 4096 is greater than total number of d and total number of fill to date.\\n    ///      This could be changed if needed.\\n    ///      Hence a trait is a sequence of several 3 bytes long (d index, fill index).\\n    function setTraitPalette(bytes calldata _traitPalette) external onlyOwner {\\n        traitPalette = SSTORE2.write(_traitPalette);\\n    }\\n\\n    /// @dev Since each SSTORE2 slots can contain up to 24kb, indexes need to be uint16, ie. two bytes per index.\\n    ///      A trait can then be retrieved with traitPalette[traitPaletteIndexes[i]: traitPaletteIndexes[i+1]]\\n    function setTraitPaletteIndex(bytes calldata _traitPaletteIndex)\\n        external\\n        onlyOwner\\n    {\\n        traitPaletteIndexes = SSTORE2.write(_traitPaletteIndex);\\n    }\\n\\n    /// @dev The trait indexes allow to map from the Chain Runners 2D indexation (trait index, layer index) to the\\n    ///      current 1D indexation (trait index).\\n    function setLayerIndexes(bytes calldata _layerIndexes) external onlyOwner {\\n        layerIndexes = _layerIndexes;\\n    }\\n\\n    /// @dev This function will be the pendant of the ChainRunnersBaseRenderer.getLayer ones.\\n    function getTraitIndex(uint16 _layerIndex, uint16 _itemIndex)\\n        public\\n        view\\n        returns (uint16)\\n    {\\n        uint16 traitIndex = BytesLib.toUint16(layerIndexes, _layerIndex * 2);\\n        uint16 nextTraitIndex = BytesLib.toUint16(\\n            layerIndexes,\\n            (_layerIndex + 1) * 2\\n        );\\n        if (traitIndex + _itemIndex >= nextTraitIndex) {\\n            return type(uint16).max;\\n        }\\n\\n        return traitIndex + _itemIndex;\\n    }\\n\\n    /// @dev 3 bytes per color because svg does not handle alpha.\\n    function getFill(uint16 _index) public view returns (string memory) {\\n        // TODO: use assembly instead\\n        bytes memory palette = SSTORE2.read(fillPalette);\\n        if (\\n            palette[(_index * 3)] == NONE_COLOR[0] &&\\n            palette[(_index * 3) + 1] == NONE_COLOR[1] &&\\n            palette[(_index * 3) + 2] == NONE_COLOR[2]\\n        ) {\\n            return \\\"none\\\";\\n        }\\n\\n        return\\n            string(\\n                bytes.concat(\\n                    HASHTAG,\\n                    bytes(uint8(palette[3 * _index]).toString(16, 2)),\\n                    bytes(uint8(palette[3 * _index + 1]).toString(16, 2)),\\n                    bytes(uint8(palette[3 * _index + 2]).toString(16, 2))\\n                )\\n            );\\n    }\\n\\n    /// @dev Get the start and end indexes of the bytes concerning the given d in the dPalette storage.\\n    function getDIndex(uint16 _index) public view returns (uint32, uint32) {\\n        // TODO: use assembly instead\\n        bytes memory _indexes = SSTORE2.read(dPaletteIndexes);\\n        uint32 start = uint32(BytesLib.toUint16(_indexes, _index * 2));\\n        uint32 next = uint32(BytesLib.toUint16(_indexes, _index * 2 + 2));\\n        // Magic reasonable number to deal with overflow\\n        if (uint32(_index) > 1000 && start < 20000) {\\n            start = uint32(type(uint16).max) + 1 + start;\\n        }\\n        if (uint32(_index) > 2000 && start < 40000) {\\n            start = uint32(type(uint16).max) + 1 + start;\\n        }\\n        if (uint32(_index) > 1000 && next < 20000) {\\n            next = uint32(type(uint16).max) + 1 + next;\\n        }\\n        if (uint32(_index) > 2000 && next < 40000) {\\n            next = uint32(type(uint16).max) + 1 + next;\\n        }\\n        return (start, next);\\n    }\\n\\n    /// @dev Retrieve the bytes for the given d from the dPalette storage. The bytes may be split into several SSTORE2\\n    ///      slots.\\n    function getDBytes(uint16 _index) public view returns (bytes memory) {\\n        // TODO: use assembly instead\\n        (uint32 dIndex, uint32 dIndexNext) = getDIndex(_index);\\n        uint256 storageIndex = 0;\\n        bytes memory _dPalette = SSTORE2.read(dPalette[storageIndex]);\\n        uint256 cumSumBytes = _dPalette.length;\\n        uint256 pos = dIndex;\\n        while (dIndex >= cumSumBytes) {\\n            pos -= _dPalette.length;\\n            storageIndex++;\\n            _dPalette = SSTORE2.read(dPalette[storageIndex]);\\n            cumSumBytes += _dPalette.length;\\n        }\\n        bytes memory _d = new bytes(dIndexNext - dIndex);\\n        for (uint256 i = 0; i < _d.length; i++) {\\n            if (pos >= _dPalette.length) {\\n                storageIndex++;\\n                _dPalette = SSTORE2.read(dPalette[storageIndex]);\\n                pos = 0;\\n            }\\n            _d[i] = _dPalette[pos];\\n            pos++;\\n        }\\n        return _d;\\n    }\\n\\n    /// @dev Decodes the path and returns it as a plain string to be used in the svg path attribute.\\n    function getD(bytes memory dEncodedBytes)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory d;\\n        bytes memory bytesBuffer;\\n        uint32 bitsShift = 0;\\n        uint16 byteIndex = 0;\\n        uint8 bitShiftRemainder = 0;\\n        uint8 dAttributeIndex;\\n        uint8 dAttributeParameterCount;\\n        while (\\n            bitsShift <= dEncodedBytes.length * 8 - (BITS_PER_D_ATTRIBUTE + 8) // at least BITS_PER_D_ATTRIBUTE bits for the d attribute index and 1 byte for the d attribute parameter count\\n        ) {\\n            byteIndex = uint16(bitsShift / 8);\\n            bitShiftRemainder = uint8(bitsShift % 8);\\n\\n            dAttributeIndex =\\n                uint8(\\n                    (dEncodedBytes[byteIndex] << bitShiftRemainder) |\\n                        (dEncodedBytes[byteIndex + 1] >>\\n                            (8 - bitShiftRemainder))\\n                ) >>\\n                (8 - BITS_PER_D_ATTRIBUTE);\\n\\n            dAttributeParameterCount = uint8(\\n                D_ATTRIBUTE_PARAMETERS_COUNT[dAttributeIndex]\\n            );\\n            d = bytes.concat(d, D_ATTRIBUTE_PALETTE[dAttributeIndex]);\\n\\n            bitsShift += BITS_PER_D_ATTRIBUTE;\\n            byteIndex = uint16(bitsShift / 8);\\n            bitShiftRemainder = uint8(bitsShift % 8);\\n            bytesBuffer = new bytes(dAttributeParameterCount);\\n            // TODO: use assembly instead\\n            for (uint8 i = 0; i < dAttributeParameterCount; i++) {\\n                bytesBuffer[i] =\\n                    dEncodedBytes[byteIndex + i] <<\\n                    bitShiftRemainder;\\n                if (byteIndex + i + 1 < dEncodedBytes.length) {\\n                    bytesBuffer[i] |=\\n                        dEncodedBytes[byteIndex + i + 1] >>\\n                        (8 - bitShiftRemainder);\\n                }\\n            }\\n\\n            for (uint8 i = 0; i < dAttributeParameterCount; i++) {\\n                d = bytes.concat(\\n                    d,\\n                    hex\\\"2c\\\", // comma\\n                    bytes(uint8(bytesBuffer[i]).toString())\\n                );\\n            }\\n            bitsShift += 8 * dAttributeParameterCount;\\n        }\\n        return string(d);\\n    }\\n\\n    /// @dev Used to concat all the traits of a given dreamers given the array of trait indexes.\\n    function getTraits(uint16[NUM_LAYERS] memory _index)\\n        public\\n        view\\n        returns (Trait[] memory)\\n    {\\n        // First: retrieve all bytes indexes\\n        bytes memory _traitPaletteIndexes = SSTORE2.read(traitPaletteIndexes);\\n        bytes memory _traitPalette = SSTORE2.read(traitPalette);\\n\\n        bytes memory traitsBytes;\\n        uint16 start;\\n        uint16 next;\\n        for (uint16 i = 0; i < NUM_LAYERS; i++) {\\n            if (_index[i] == type(uint16).max) {\\n                continue;\\n            }\\n            start = BytesLib.toUint16(_traitPaletteIndexes, _index[i] * 2);\\n            next = BytesLib.toUint16(_traitPaletteIndexes, _index[i] * 2 + 2);\\n            traitsBytes = bytes.concat(\\n                traitsBytes,\\n                BytesLib.slice(_traitPalette, start, next - start)\\n            );\\n        }\\n\\n        // Second: retrieve all traits\\n        bool stroke;\\n        Trait[] memory traits = new Trait[](traitsBytes.length / 3);\\n        for (uint256 i = 0; i < traitsBytes.length; i += 3) {\\n            (uint16 dIndex, uint16 fillIndex) = Integers.load12x2(\\n                traitsBytes[i],\\n                traitsBytes[i + 1],\\n                traitsBytes[i + 2]\\n            );\\n            stroke = fillIndex % 2 > 0;\\n            fillIndex = fillIndex >> 1;\\n            traits[i / 3] = Trait(dIndex, fillIndex, stroke);\\n        }\\n        return traits;\\n    }\\n\\n    /// @notice Useful for returning a single Traits in the Runner's meaning\\n    function getTrait(uint16 _index) public view returns (Trait[] memory) {\\n        uint16[NUM_LAYERS] memory _indexes;\\n        _indexes[0] = _index;\\n        for (uint256 i = 1; i < NUM_LAYERS; i++) {\\n            _indexes[i] = type(uint16).max;\\n        }\\n        return getTraits(_indexes);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////\\n    /////////////////////////////////  Dreamers  ///////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev Each trait is the bytes representation of the final svg string concatenating several <path> elements.\\n    function getSvg(Trait[] memory traits) public view returns (string memory) {\\n        bytes memory svg = SVG_TAG_START;\\n        for (uint16 i = 0; i < traits.length; i++) {\\n            svg = bytes.concat(\\n                svg,\\n                PATH_TAG_START,\\n                bytes(getD(getDBytes(traits[i].dIndex))),\\n                FILL_TAG,\\n                bytes(getFill(traits[i].fillIndex))\\n            );\\n            if (traits[i].stroke) {\\n                svg = bytes.concat(svg, STROKE_TAG);\\n            }\\n            svg = bytes.concat(svg, PATH_TAG_END);\\n        }\\n        return string(bytes.concat(svg, SVG_TAG_END));\\n    }\\n\\n    constructor(address _rendererAddress, address _runnersTokenAddress)\\n        ChainRunnersConstants(_rendererAddress)\\n    {\\n        runnersToken = IChainRunners(_runnersTokenAddress);\\n    }\\n\\n    /// @dev Somehow copied from the original code but returns an array of trait indexes instead of Layer structs.\\n    ///      Flags for no layer is also updated from empty `Layer` to index = type(uint16).max.\\n    function getTokenData(uint16[NUM_LAYERS] memory dna)\\n        public\\n        view\\n        returns (uint16[NUM_LAYERS] memory traitIndexes)\\n    {\\n        uint16 raceIndex = chainRunnersBaseRenderer.getRaceIndex(dna[1]);\\n        bool hasFaceAcc = dna[7] < (NUM_RUNNERS - WEIGHTS[raceIndex][7][7]);\\n        bool hasMask = dna[8] < (NUM_RUNNERS - WEIGHTS[raceIndex][8][7]);\\n        bool hasHeadBelow = dna[9] < (NUM_RUNNERS - WEIGHTS[raceIndex][9][36]);\\n        bool hasHeadAbove = dna[11] <\\n            (NUM_RUNNERS - WEIGHTS[raceIndex][11][48]);\\n        bool useHeadAbove = (dna[0] % 2) > 0;\\n        for (uint8 i = 0; i < NUM_LAYERS; i++) {\\n            uint8 layerTraitIndex = chainRunnersBaseRenderer.getLayerIndex(\\n                dna[i],\\n                i,\\n                raceIndex\\n            );\\n            uint16 traitIndex = getTraitIndex(i, layerTraitIndex);\\n            /*\\n            These conditions help make sure layer selection meshes well visually.\\n            1. If mask, no face/eye acc/mouth acc\\n            2. If face acc, no mask/mouth acc/face\\n            3. If both head above & head below, randomly choose one\\n            */\\n            bool consistencyCheck = (((i == 2 || i == 12) &&\\n                !hasMask &&\\n                !hasFaceAcc) ||\\n                (i == 7 && !hasMask) ||\\n                (i == 10 && !hasMask) ||\\n                (i < 2 || (i > 2 && i < 7) || i == 8 || i == 9 || i == 11));\\n            bool noHeadCheck = ((hasHeadBelow &&\\n                hasHeadAbove &&\\n                (i == 9 && useHeadAbove)) || (i == 11 && !useHeadAbove));\\n            bool isRealTrait = traitIndex < type(uint16).max;\\n            if (!isRealTrait || !consistencyCheck || noHeadCheck) {\\n                traitIndex = type(uint16).max;\\n            }\\n            traitIndexes[i] = traitIndex;\\n        }\\n        return traitIndexes;\\n    }\\n\\n    /// @dev The Dreamer's full DNA is an alteration of its corresponding Runner's DNA with it's consumed candy.\\n    ///      The candy ids are hardcoded while it should be better to retrieve their effects from the CandyShop\\n    ///      contract.\\n    function getDreamerFullDna(uint256 runnerDna, uint8 dreamerDna)\\n        public\\n        view\\n        returns (uint16[NUM_LAYERS] memory)\\n    {\\n        uint16[NUM_LAYERS] memory dna = splitNumber(runnerDna);\\n        return dna;\\n    }\\n\\n    function tokenURI(uint256 tokenId, uint8 dreamerDna)\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        uint256 runnerDna = runnersToken.getDna(tokenId);\\n        uint16[NUM_LAYERS] memory dna = getDreamerFullDna(\\n            runnerDna,\\n            dreamerDna\\n        );\\n        uint16[NUM_LAYERS] memory traitIndexes = getTokenData(dna);\\n        Trait[] memory traits = getTraits(traitIndexes);\\n        string memory svg = getSvg(traits);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:application/json,{\\\"image_data\\\":',\\n                    svg,\\n                    '\\\", \\\"name\\\", \\\"Dreamer #',\\n                    tokenId.toString(),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x34fe5edb3a6fd75b6ed1da609a17181e9fe0aea794850e3ab028d724b13a24d5\",\"license\":\"MIT\"},\"contracts/interfaces/IChainRunners.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IChainRunners {\\n    function getDna(uint256 _tokenId) external view returns (uint256);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x32b3945520274c2188f4432dcf78bdf498ec63b5b16d55b2f5b73d3df2443445\",\"license\":\"MIT\"},\"contracts/interfaces/IChainRunnersBaseRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IChainRunnersBaseRenderer {\\n    function getRaceIndex(uint16 _dna) external view returns (uint8);\\n\\n    function getLayerIndex(\\n        uint16 _dna,\\n        uint8 _index,\\n        uint16 _raceIndex\\n    ) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x623e2ee08d0b3439956721e3083c85b634aee1bdd2937ec8f46ae64a677ca8a7\",\"license\":\"MIT\"},\"contracts/interfaces/IDreamersRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IDreamersRenderer {\\n    function tokenURI(uint256 tokenId, uint8 dreamerDna)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xd920ca53404e1cfc0f5c626310ea9032e79236705bdafa103266413814129422\",\"license\":\"MIT\"},\"contracts/lib/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < count; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n\\n    /**\\n     * Load 16\\n     *\\n     * Converts two bytes to a 16 bit unsigned integer\\n     *\\n     * @param _leadingBytes the first byte of the unsigned integer in [256, 65536]\\n     * @param _endingBytes the second byte of the unsigned integer in [0, 255]\\n     * @return uint16 The resulting integer value\\n     */\\n    function load16(bytes1 _leadingBytes, bytes1 _endingBytes)\\n        public\\n        pure\\n        returns (uint16)\\n    {\\n        return\\n            (uint16(uint8(_leadingBytes)) << 8) + uint16(uint8(_endingBytes));\\n    }\\n\\n    /**\\n     * Load 12\\n     *\\n     * Converts three bytes into two uint12 integers\\n     *\\n     * @return (uint16, uint16) The two uint16 values up to 2^12 each\\n     */\\n    function load12x2(\\n        bytes1 first,\\n        bytes1 second,\\n        bytes1 third\\n    ) public pure returns (uint16, uint16) {\\n        return (\\n            (uint16(uint8(first)) << 4) + (uint16(uint8(second)) >> 4),\\n            (uint16(uint8(second & hex\\\"0f\\\")) << 8) + uint16(uint8(third))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7d20e3fab34d97af5681961ac0a58f3177794fcf4c0283e5723d8797dcd017f4\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620063eb380380620063eb83398101604081905262000034916200260a565b81620000403362002475565b60018055602980546001600160a01b0319166001600160a01b0383161790556040805161058081018252602480825260e1602083018190529282018390526060820183905261016860808301819052608760a0840152601b60c0840181905260e0840182905261013b610100850181905261012085018190526101408501819052610160850152610180840185905260b46101a085018190526101c085018690526101e0850181905261020085018390526102208501819052602d6102408601819052610260860184905261028086018490526102a086018490526102c08601929092526102e0850193909352610300840182905261032084018190526103408401839052610360840182905261038084018590526103a084018290526103c084018590526103e084018590526104008401829052610420840183905261044084015261046083015260126104808301526104a082018390526104c082018390526104e082018390526105008201839052610520820152610540810191909152610169610560820152620001d990600290602c620024c5565b50604080516101e08101825261036b81526104f5602082015261030b918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152601161018082015260086101a082015260296101c08201526200026790600390600f620024c5565b50604080516104208101825261012f8082526020820181905291810182905260608101829052609760808201819052601e60a08301819052600060c0840181905260e0840152610100830182905261012083018290526101408301829052610160830182905261018083018190526101a083018490526101c083018290526101e08301819052610200830184905261022083018490526102408301849052610260830184905261028083018490526102a083018490526102c08301526102e0820152610300810182905261032081018290526103408101829052610360810182905261038081018290526103a081018290526103c081018290526103e0810191909152610bfa61040082015262000383906004906021620024c5565b50604080516101c0810182526102858082526000602083015261050a92820192909252610142606082018190526080820183905260a0820183905260c082018390526103c760e08301819052610100830191909152610120820181905261014082019290925261016081018290526101808101919091526103cd6101a08201526200041390600590600e620024c5565b506040805161016081018252600080825260208201819052918101919091526104e2606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201526200047e90600690600b620024c5565b506040805161094081018252607980825260208201819052918101829052606081018290526080810182905260a0810182905260f360c08201819052600060e08301819052610100830181905261012083018190526101408301819052610160830184905261018083018490526101a083018290526101c083018490526101e08301849052610200830182905261022083018490526102408301849052610260830184905261028083018490526102a083018490526102c083018290526102e08301849052610300830184905261032083018490526103408301849052610360830182905261038083018490526103a083018490526103c083018490526103e08301849052610400830182905261042083018490526104408301849052610460830184905261048083018290526104a083018490526104c083018490526104e08301849052610500830184905261052083018290526105408301849052610560830184905261058083018490526105a083018490526105c083018290526105e08301849052610600830184905261062083018490526106408301849052610660830182905261068083018490526106a083018490526106c083018490526106e08301849052610700830182905261072083018490526107408301849052610760830184905261078083018490526107a083018290526107c083018490526107e0830184905261080083018290526108208301819052610840830181905261086083015261088082018390526108a082018390526108c08201526108e08101829052610900810191909152610132610920820152620006e190600790604a620024c5565b50604080516101608101825261039d80825261022b6020830181905260b993830184905260608301526080820181905260a082015260c081019190915261051060e0820181905261010082018190526101208201526107416101408201526200074f90600890600b620024c5565b50604080516101008101825260588082526020820181905291810182905260608101829052608081019190915261010960a08201526101ba60c082015261229560e0820152620007a4906009906008620024c5565b50604080516101008101825260bd8082526020820152602f918101919091526012606082015260096080820152601c60a0820152602560c082015261250b60e0820152620007f790600a906008620024c5565b50604080516104a08101825261015480825260208201819052918101829052606081018290526080810182905260a08101829052602260c0820181905260e0820183905261010082018390526101208201839052610140820183905260aa610160830181905261018083018190526101a0830181905260666101c084015260ee6101e08401819052610200840181905261022084018190526101106102408501819052610260850186905261028085018690526102a085018690526102c08501526102e08401819052610300840181905261032084018190526103408401526103608301526103808201526103a081018290526103c0810182905260886103e08201526104008101829052610420810182905261044081018290526104608101919091526101586104808201526200093490600b906025620024c5565b506040805161042081018252609f80825260d460208301819052606a938301849052603560608401819052601a608085015260a0840183905260c0840181905261010960e08501819052610100850182905261012085018390526101408501849052610160850181905261018085018290526101a085018190526101c085018190526101e085018390526102008501829052610220850184905260ef6102408601526102608501829052610280850186905260056102a08601526102c085018690526102e08501919091526103008401829052610320840182905261034084019490945261036083019190915261038082018190526103a082018390526103c08201526103e08101919091526113ca61040082015262000a5990600c906021620024c5565b506040805161062081018252608b8082526101166020830181905292820183905260fa60608301819052608083015260c260a0830181905260de60c0840181905260e08401859052610100840185905261012084018290526101408401819052605361016085018190526101808501919091526101a084018590526101c084018390526101e08401839052601b610200850181905261022085018690526102408501869052610260850186905261028085018690526102a085018190526102c085018690526102e08501849052610300850186905261032085018690526103408501869052610360850186905261038085018690526103a085018690526103c085018690526103e08501869052610400850186905261042085018690526104408501869052610460850181905261048085018490526104a085018490526104c085018490526104e085019390935260006105008501526105208401859052610540840191909152610560830181905261058083018190526105a08301939093526105c08201929092526105e081019190915261013261060082015262000c0490600d906031620024c5565b5060408051610120810182526103d5808252610b81602083015261028e92820183905260106060830152608082015261014760a082015260c081019190915260a360e0820152610ccf61010082015262000c6390600e906009620024c5565b506040805161058081018252602480825260e1602083018190529282018390526060820183905261016860808301819052608760a0840152601b60c0840181905260e0840182905261013b610100850181905261012085018190526101408501819052610160850152610180840185905260b46101a085018190526101c085018690526101e0850181905261020085018390526102208501819052602d6102408601819052610260860184905261028086018490526102a086018490526102c08601929092526102e0850193909352610300840182905261032084018190526103408401839052610360840182905261038084018590526103a084018290526103c084018590526103e084018590526104008401829052610420840183905261044084015261046083015260126104808301526104a082018390526104c082018390526104e08201839052610500820183905261052082015261054081019190915261016961056082015262000dde90600f90602c620024c5565b50604080516101e08101825261036b81526104f5602082015261030b918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152601161018082015260086101a082015260296101c082015262000e6c90601090600f620024c5565b506040805161042081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e08101829052610200810182905261022081018290526102408101829052610260810182905261028081018290526102a081018290526102c081018290526102e08101829052610300810182905261032081018290526103408101829052610360810182905261038081018290526103a081018290526103c081018290526103e081019190915261271061040082015262000f87906011906021620024c5565b50604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101919091526200100990601290600e62002575565b506040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101919091526200107390601390600b62002575565b506040805161094081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081018290526101808082018390526101a082018390526101c082018390526101e08201839052610200820183905261022082018390526102408201839052610260820183905261028082018390526102a082018390526102c082018390526102e08201839052610300820183905261032082018390526103408201839052610360820183905261038082018390526103a082018390526103c082018390526103e08201839052610400820183905261042082018390526104408201839052610460820183905261048082018390526104a082018390526104c082018390526104e08201839052610500820183905261052082018390526105408201839052610560820183905261058082018390526105a082018390526105c082018390526105e08201839052610600820183905261062082018390526106408201839052610660820183905261068082018390526106a082018390526106c082018390526106e08201839052610700820183905261072082018390526107408201839052610760820183905261078082018390526107a082018390526107c082018390526107e082018390526108008201839052610820820152611e0c61084082015261078361086082015261088081018290526108a081018290526108c081018290526108e081018290526109008101919091526001610920820152620012d690601490604a620024c5565b506040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091526127106101408201526200134190601590600b620024c5565b506040805161010081018252600080825260208201819052918101829052606081018290526080810182905261038d60a082015260c081019190915261238360e082015262001395906016906008620024c5565b506040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915261271060e0820152620013e8906017906008620024c5565b50604080516104a08101825261020e808252602082018190529181018290526000606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820183905261012082018190526101408201819052610160820181905261018082018390526101a082018190526101c082018390526101e08201819052610200820181905261022082018190526102408201839052610260820183905261028082018390526102a082018390526102c082018390526102e08201839052610300820183905261032082018390526103408201839052610360820183905261038082018390526103a082018190526103c082018190526103e082019290925261040081018290526104208101829052610440810182905261046081019190915261021461048082015262001527906018906025620024c5565b50604080516104208101825260508082526000602083018190526101909383019390935260f0606083018190526080830182905260a0830184905260c083015260e08201839052610100820183905261012082018190526101408201819052610160820181905261018082018390526101a082018390526101c082018390526101e08201839052610200820181905261022082018190526102408201839052610260820183905261028082018190526102a082018190526102c082018390526102e0820181905261030082018190526103208201819052610340820181905261036082015261038081018290526103a081018290526103c081018290526103e0810191909152611f4061040082015262001646906019906021620024c5565b506040805161062081018252610121808252600060208301819052928201839052606082018390526080820183905261019460a08301526101ce60c0830181905261024260e0840181905261010084018190526101208401859052610140840182905260ad6101608501526101808401919091526101a083018190526101c083018490526101e083018490526039610200840181905261022084018590526102408401819052610260840185905261028084018190526102a084018190526102c084018290526102e08401839052610300840182905261032084018190526103408401859052610360840181905261038084018190526103a084018190526103c084018290526103e08401829052610400840185905261042084018590526104408401859052610460840185905261048084018590526104a084018590526104c084018190526104e084019290925261050083015261052082018390526105408201839052610560820183905260e76105808301526105a08201526105c081018290526105e08101919091526106d1610600820152620017eb90601a906031620024c5565b5060408051610120810182526102ca80825260208201819052918101829052600060608201819052608082019290925260a0810182905260c0810182905260e0810191909152611be86101008201526200184a90601b906009620024c5565b506040805161058081018252602480825260e1602083018190529282018390526060820183905261016860808301819052608760a0840152601b60c0840181905260e0840182905261013b610100850181905261012085018190526101408501819052610160850152610180840185905260b46101a085018190526101c085018690526101e0850181905261020085018390526102208501819052602d6102408601819052610260860184905261028086018490526102a086018490526102c08601929092526102e0850193909352610300840182905261032084018190526103408401839052610360840182905261038084018590526103a084018290526103c084018590526103e084018590526104008401829052610420840183905261044084015261046083015260126104808301526104a082018390526104c082018390526104e082018390526105008201839052610520820152610540810191909152610169610560820152620019c590601c90602c620024c5565b50604080516101e08101825261036b81526104f5602082015261030b918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152601161018082015260086101a082015260296101c082015262001a5390601d90600f620024c5565b50604080516104208101825261012f8082526020820181905291810182905260608101829052609760808201819052601e60a08301819052600060c0840181905260e0840152610100830182905261012083018290526101408301829052610160830182905261018083018190526101a083018490526101c083018290526101e08301819052610200830184905261022083018490526102408301849052610260830184905261028083018490526102a083018490526102c083018190526102e0830191909152610300820183905261032082018390526103408201839052610360820183905261038082018390526103a082018390526103c082018390526103e0820192909252610bfa61040082015262001b7291906021620024c5565b50604080516101c0810182526102858082526000602083015261050a92820192909252610142606082018190526080820183905260a0820183905260c082018390526103c760e08301819052610100830191909152610120820181905261014082019290925261016081018290526101808101919091526103cd6101a082015262001c0290601f90600e620024c5565b5060408051610160810182526109c480825260208083018290529282018190526000606083018190526080830181905260a0830181905260c0830181905260e08301819052610100830181905261012083019190915261014082015262001c6c9190600b620024c5565b506040805161094081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905261024c60c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820183905261018082018390526101a082018190526101c082018390526101e08201839052610200820181905261022082018390526102408201839052610260820183905261028082018390526102a082018390526102c082018190526102e08201839052610300820183905261032082018390526103408201839052610360820181905261038082018390526103a082018390526103c082018390526103e08201819052610400820181905261042082018390526104408201839052610460820183905261048082018190526104a082018390526104c082018390526104e08201839052610500820183905261052082018190526105408201839052610560820183905261058082018390526105a082018390526105c082018390526105e08201839052610600820183905261062082018390526106408201839052610660820181905261068082018390526106a082018390526106c082018390526106e08201839052610700820181905261072082018390526107408201839052610760820183905261078082018390526107a082018190526107c082018390526107e08201839052610800820183905261082082018390526108408201839052610860820183905261088082018390526108a082018390526108c08201526108e08101829052610900810191909152600461092082015262001ecf90602190604a620024c5565b50604080516101608101825261039d80825261022b6020830181905260b993830184905260608301526080820181905260a082015260c081019190915261051060e08201819052610100820181905261012082015261074161014082015262001f3d90602290600b620024c5565b50604080516101008101825260588082526020820181905291810182905260608101829052608081019190915261010960a08201526101ba60c082015261229560e082015262001f92906023906008620024c5565b50604080516101008101825260b7815261011260208201819052918101919091526012606082018190526080820152601b60a0820152602460c082018190526123d260e083015262001fe6916008620024c5565b50604080516104a08101825261015480825260208201819052918101829052606081018290526080810182905260a08101829052602260c0820181905260e0820183905261010082018390526101208201839052610140820183905260aa610160830181905261018083018190526101a0830181905260666101c084015260ee6101e08401819052610200840181905261022084018190526101106102408501819052610260850186905261028085018690526102a085018690526102c08501526102e08401819052610300840181905261032084018190526103408401526103608301526103808201526103a081018290526103c0810182905260886103e0820152610400810182905261042081018290526104408101829052610460810191909152610158610480820152620021229060259081620024c5565b50604080516104208101825260d980825261016a6020830181905292820181905260906060830181905260486080840181905261012160a0850181905260c0850183905260e08501869052610100850182905261012085018190526101408501849052610160850186905261018085018290526101a085018690526101c085018690526101e08501819052600061020086018190526102208601859052610240860152610260850182905261028085019290925260076102a08501526102c084018390526102e084015261030083018290526103208301829052610340830181905261036083018290526103808301526103a082018390526103c08201526103e0810191909152610cc561040082015262002242906026906021620024c5565b506040805161062081018252608b8082526101166020830181905292820183905260fa60608301819052608083015260c260a0830181905260de60c0840181905260e08401859052610100840185905261012084018290526101408401819052605361016085018190526101808501919091526101a084018590526101c084018390526101e08401839052601b610200850181905261022085018690526102408501869052610260850186905261028085018690526102a085018190526102c085018690526102e08501849052610300850186905261032085018690526103408501869052610360850186905261038085018690526103a085018690526103c085018690526103e08501869052610400850186905261042085018690526104408501869052610460850181905261048085018490526104a085018490526104c085018490526104e085019390935260006105008501526105208401859052610540840191909152610560830181905261058083018190526105a08301939093526105c08201929092526105e0810191909152610132610600820152620023ed906027906031620024c5565b5060408051610120810182526103d5808252610b81602083015261028e92820183905260106060830152608082015261014760a082015260c081019190915260a360e0820152610ccf6101008201526200244c906028906009620024c5565b5050603080546001600160a01b0319166001600160a01b03929092169190911790555062002673565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090600f01601090048101928215620025635791602002820160005b838211156200253157835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302620024ef565b8015620025615782816101000a81549061ffff021916905560020160208160010104928301926001030262002531565b505b5062002571929150620025e0565b5090565b82805482825590600052602060002090600f01601090048101928215620025635791602002820160005b838211156200253157835183826101000a81548161ffff021916908360ff16021790555092602001926002016020816001010492830192600103026200259f565b5b80821115620025715760008155600101620025e1565b8051620026048162002659565b92915050565b600080604083850312156200261d578182fd5b6200262b84838501620025f7565b915060206200263d85828601620025f7565b9150509250929050565b60006001600160a01b03821662002604565b620026648162002647565b81146200267057600080fd5b50565b613d6880620026836000396000f3fe608060405234801561001057600080fd5b50600436106102de5760003560e01c80638da5cb5b11610186578063c1dfb567116100e3578063f2a90a7611610097578063fd88767711610071578063fd887677146106e1578063fdd5e4e8146106f4578063fe31cecf1461071557600080fd5b8063f2a90a76146106a8578063f2fde38b146106bb578063f6a5d702146106ce57600080fd5b8063d337c2c3116100c8578063d337c2c3146105f4578063d6bf650114610630578063e8f255f01461066c57600080fd5b8063c1dfb56714610599578063cd369849146105cd57600080fd5b8063b674b7611161013a578063bc4617fb1161011f578063bc4617fb14610560578063bc7208c514610573578063bfa933261461058657600080fd5b8063b674b76114610511578063b9f8e72a1461054d57600080fd5b8063aacb2fa61161016b578063aacb2fa6146104f6578063b3215d49146104f6578063b4de6216146104fe57600080fd5b80638da5cb5b146104a9578063a4cd9a11146104ba57600080fd5b80634b65e32f1161023f5780636f5c723b116101f35780637c213e7b116101cd5780637c213e7b1461047b5780637e8e06571461048e5780638aaad5461461049657600080fd5b80636f5c723b14610458578063715018a614610460578063761d9db81461046857600080fd5b80635cc518ba116102245780635cc518ba1461041f5780636432609f14610432578063677bfad31461044557600080fd5b80634b65e32f146103da5780634c63ba13146103ed57600080fd5b80633259ca05116102965780633e1ed1321161027b5780633e1ed1321461039257806340eb8e22146103a5578063480bc3c8146103c557600080fd5b80633259ca051461036a578063397bcf611461037d57600080fd5b80631a5d193d116102c75780631a5d193d1461031f578063220b028d1461033f5780632c3e0c5c1461035457600080fd5b80630e275391146102e35780631866112c1461030c575b600080fd5b602c546102f6906001600160a01b031681565b604051610303919061368c565b60405180910390f35b602d546102f6906001600160a01b031681565b61033261032d3660046130fa565b610728565b60405161030391906136ab565b610347600381565b604051610303919061385f565b61035d61271081565b60405161030391906137b0565b610332610378366004612fb9565b610795565b61039061038b366004612fd7565b610cdc565b005b6103906103a0366004612fd7565b610d7f565b6103b86103b3366004612fb9565b610e19565b604051610303919061369a565b6103cd6111f6565b60405161030391906136fe565b6103cd6103e8366004613077565b611212565b6104127d01000000000000000000000000000000000000000000000000000000000081565b60405161030391906136e2565b6103cd61042d36600461317f565b61163e565b602e546102f6906001600160a01b031681565b6102f66104533660046130fa565b61174c565b6103cd611776565b610390611792565b6103cd610476366004613077565b6117c8565b61035d610489366004613094565b6119bd565b610347600d81565b6103cd6104a4366004612f84565b611b3e565b6000546001600160a01b03166102f6565b6103cd6040518060400160405280600581526020017f272f25336500000000000000000000000000000000000000000000000000000081525081565b610347600c81565b6103b861050c366004613077565b611d99565b6103cd6040518060400160405280600a81526020017f2725323066696c6c3d270000000000000000000000000000000000000000000081525081565b6103cd61055b36600461300d565b611e0a565b61039061056e366004612f42565b6122ee565b61033261058136600461317f565b6123f0565b610390610594366004612fd7565b61240b565b6105c07f4d4c51434148565a00000000000000000000000000000000000000000000000081565b60405161030391906136f0565b6105c07f020204060701010000000000000000000000000000000000000000000000000081565b6103cd6040518060400160405280600381526020017f253233000000000000000000000000000000000000000000000000000000000081525081565b6103cd6040518060400160405280600d81526020017f25336370617468253230643d270000000000000000000000000000000000000081525081565b6103cd6040518060400160405280601281526020017f272532307374726f6b653d27253233303030000000000000000000000000000081525081565b602a546102f6906001600160a01b031681565b6103906106c9366004612f25565b6124a5565b6103906106dc366004612fd7565b612501565b61035d6106ef366004613134565b61259b565b610707610702366004613077565b6125f8565b604051610303929190613844565b610390610723366004612fd7565b612745565b610730612b7f565b60005b600d81101561078f5761074861271084613bea565b8282600d811061076857634e487b7160e01b600052603260045260246000fd5b61ffff9092166020929092020152600e9290921c918061078781613b91565b915050610733565b50919050565b61079d612b7f565b60295460208301516040517f7f436b5c0000000000000000000000000000000000000000000000000000000081526000926001600160a01b031691637f436b5c916107eb91906004016137b0565b60206040518083038186803b15801561080357600080fd5b505afa158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b91906131ad565b60ff16905060006002826003811061086357634e487b7160e01b600052603260045260246000fd5b600d020160070160078154811061088a57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff166127106108bb9190613a7d565b61ffff16846007602002015161ffff16109050600060028361ffff16600381106108f557634e487b7160e01b600052603260045260246000fd5b600d020160080160078154811061091c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661271061094d9190613a7d565b61ffff16856008602002015161ffff16109050600060028461ffff166003811061098757634e487b7160e01b600052603260045260246000fd5b600d02016009016024815481106109ae57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff166127106109df9190613a7d565b61ffff16866009602002015161ffff16109050600060028561ffff1660038110610a1957634e487b7160e01b600052603260045260246000fd5b600d0201600b01603081548110610a4057634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff16612710610a719190613a7d565b61ffff1687600b602002015161ffff16109050600080600289826020020151610a9a9190613bca565b61ffff1611905060005b600d60ff82161015610cd0576029546000906001600160a01b031663fca228ce8b60ff8516600d8110610ae757634e487b7160e01b600052603260045260246000fd5b6020020151848b6040518463ffffffff1660e01b8152600401610b0c939291906137be565b60206040518083038186803b158015610b2457600080fd5b505afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c91906131ad565b90506000610b708360ff168360ff166119bd565b905060008360ff1660021480610b8957508360ff16600c145b8015610b93575087155b8015610b9d575088155b80610bb457508360ff166007148015610bb4575087155b80610bcb57508360ff16600a148015610bcb575087155b80610c1e575060028460ff161080610bf4575060028460ff16118015610bf4575060078460ff16105b80610c0257508360ff166008145b80610c1057508360ff166009145b80610c1e57508360ff16600b145b90506000878015610c2c5750865b8015610c4357508460ff166009148015610c435750855b80610c5a57508460ff16600b148015610c5a575085155b905061ffff83811610801580610c6e575082155b80610c765750815b15610c815761ffff93505b838d8760ff16600d8110610ca557634e487b7160e01b600052603260045260246000fd5b602002019061ffff16908161ffff168152505050505050508080610cc890613ba5565b915050610aa4565b50505050505050919050565b6000546001600160a01b03163314610d0f5760405162461bcd60e51b8152600401610d0690613790565b60405180910390fd5b610d4e82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061277b92505050565b602d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b6000546001600160a01b03163314610da95760405162461bcd60e51b8152600401610d0690613790565b610de882828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061277b92505050565b602e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b602e54606090600090610e34906001600160a01b03166127f3565b602d54909150600090610e4f906001600160a01b03166127f3565b9050606060008060005b600d61ffff82161015610f795761ffff88828216600d8110610e8b57634e487b7160e01b600052603260045260246000fd5b602002015161ffff161415610e9f57610f67565b610ee086898361ffff16600d8110610ec757634e487b7160e01b600052603260045260246000fd5b6020020151610ed7906002613a11565b61ffff16612803565b9250610f2586898361ffff16600d8110610f0a57634e487b7160e01b600052603260045260246000fd5b6020020151610f1a906002613a11565b610ed7906002613962565b915083610f448661ffff8616610f3b8787613a7d565b61ffff16612839565b604051602001610f559291906134b8565b60405160208183030381529060405293505b80610f7181613b6f565b915050610e59565b5060008060038551610f8b91906139e9565b67ffffffffffffffff811115610fb157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ffc57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610fcf5790505b50905060005b85518110156111e95760008073F00A0FEaaDfD42224a700f15E1Af2E2a71aa9D8b635dfb512c89858151811061104857634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319168a61106387600161398b565b8151811061108157634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319168b61109c88600261398b565b815181106110ba57634e487b7160e01b600052603260045260246000fd5b01602001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526111049392916001600160f81b031916906004016136ba565b604080518083038186803b15801561111b57600080fd5b505af415801561112f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115391906130cc565b90925090506000611165600283613bca565b61ffff1611945060018161ffff16901c905060405180606001604052808361ffff1681526020018261ffff168152602001861515815250846003856111aa91906139e9565b815181106111c857634e487b7160e01b600052603260045260246000fd5b602002602001018190525050506003816111e2919061398b565b9050611002565b5098975050505050505050565b6040518060a00160405280606d8152602001613cc6606d913981565b602a5460609060009061122d906001600160a01b03166127f3565b905060008161123d856003613a11565b61ffff168151811061125f57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319161480156112c25750600081611284856003613a11565b61128f906001613962565b61ffff16815181106112b157634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916145b801561133457507f0100000000000000000000000000000000000000000000000000000000000000816112f6856003613a11565b611301906002613962565b61ffff168151811061132357634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916145b1561137457505060408051808201909152600481527f6e6f6e65000000000000000000000000000000000000000000000000000000006020820152919050565b6040518060400160405280600381526020017f2532330000000000000000000000000000000000000000000000000000000000815250818460036113b89190613a11565b61ffff16815181106113da57634e487b7160e01b600052603260045260246000fd5b016020015160405163c1338a6960e01b815273F00A0FEaaDfD42224a700f15E1Af2E2a71aa9D8b9163c1338a699161141e9160f81c906010906002906004016137f4565b60006040518083038186803b15801561143657600080fd5b505af415801561144a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114729190810190613042565b8261147e866003613a11565b611489906001613962565b61ffff16815181106114ab57634e487b7160e01b600052603260045260246000fd5b016020015160405163c1338a6960e01b815273F00A0FEaaDfD42224a700f15E1Af2E2a71aa9D8b9163c1338a69916114ef9160f81c906010906002906004016137f4565b60006040518083038186803b15801561150757600080fd5b505af415801561151b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115439190810190613042565b8361154f876003613a11565b61155a906002613962565b61ffff168151811061157c57634e487b7160e01b600052603260045260246000fd5b016020015160405163c1338a6960e01b815273F00A0FEaaDfD42224a700f15E1Af2E2a71aa9D8b9163c1338a69916115c09160f81c906010906002906004016137f4565b60006040518083038186803b1580156115d857600080fd5b505af41580156115ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116149190810190613042565b60405160200161162794939291906134ce565b604051602081830303815290604052915050919050565b6030546040517f422627c30000000000000000000000000000000000000000000000000000000081526060916000916001600160a01b039091169063422627c39061168d9087906004016137e6565b60206040518083038186803b1580156116a557600080fd5b505afa1580156116b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dd9190613117565b905060006116eb82856123f0565b905060006116f882610795565b9050600061170582610e19565b9050600061171282611b3e565b90508061171e89612901565b60405160200161172f9291906135c1565b604051602081830303815290604052955050505050505b92915050565b602b818154811061175c57600080fd5b6000918252602090912001546001600160a01b0316905081565b604051806060016040528060388152602001613c8e6038913981565b6000546001600160a01b031633146117bc5760405162461bcd60e51b8152600401610d0690613790565b6117c66000612a37565b565b60606000806117d6846125f8565b9150915060008061181b602b838154811061180157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03166127f3565b805190915063ffffffff85165b818663ffffffff161061188a5782516118419082613aa0565b90508361184d81613b91565b945050611874602b858154811061180157634e487b7160e01b600052603260045260246000fd5b9250825182611883919061398b565b9150611828565b60006118968787613aa6565b63ffffffff1667ffffffffffffffff8111156118c257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156118ec576020820181803683370190505b50905060005b81518110156111e9578451831061193b578561190d81613b91565b965050611934602b878154811061180157634e487b7160e01b600052603260045260246000fd5b9450600092505b84838151811061195b57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b82828151811061198657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350826119a781613b91565b93505080806119b590613b91565b9150506118f2565b600080611a5b602f80546119d090613b1b565b80601f01602080910402602001604051908101604052809291908181526020018280546119fc90613b1b565b8015611a495780601f10611a1e57610100808354040283529160200191611a49565b820191906000526020600020905b815481529060010190602001808311611a2c57829003601f168201915b5050505050856002610ed79190613a11565b90506000611b05602f8054611a6f90613b1b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9b90613b1b565b8015611ae85780601f10611abd57610100808354040283529160200191611ae8565b820191906000526020600020905b815481529060010190602001808311611acb57829003601f168201915b5050505050866001611afa9190613962565b610ed7906002613a11565b905061ffff8116611b168584613962565b61ffff1610611b2b5761ffff92505050611746565b611b358483613962565b95945050505050565b606060006040518060a00160405280606d8152602001613cc6606d9139905060005b83518161ffff161015611d6d57816040518060400160405280600d81526020017f25336370617468253230643d2700000000000000000000000000000000000000815250611bdf61055b878561ffff1681518110611bce57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516117c8565b6040518060400160405280600a81526020017f2725323066696c6c3d2700000000000000000000000000000000000000000000815250611c4d888661ffff1681518110611c3c57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151611212565b604051602001611c619594939291906134fc565b6040516020818303038152906040529150838161ffff1681518110611c9657634e487b7160e01b600052603260045260246000fd5b60200260200101516040015115611d0157816040518060400160405280601281526020017f272532307374726f6b653d272532333030300000000000000000000000000000815250604051602001611cef9291906134b8565b60405160208183030381529060405291505b816040518060400160405280600581526020017f272f253365000000000000000000000000000000000000000000000000000000815250604051602001611d499291906134b8565b60405160208183030381529060405291508080611d6590613b6f565b915050611b60565b5080604051806060016040528060388152602001613c8e603891396040516020016116279291906134b8565b6060611da3612b7f565b61ffff8316815260015b600d811015611df95761ffff8282600d8110611dd957634e487b7160e01b600052603260045260246000fd5b61ffff909216602092909202015280611df181613b91565b915050611dad565b50611e0381610e19565b9392505050565b6060806060600080600080805b611e23600360086139c8565b60ff1689516008611e349190613a3e565b611e3e9190613aa0565b8563ffffffff16116122e157611e55600886613a01565b9350611e62600886613bf0565b9250611e7060036008613ab6565b60ff16611e7e846008613ab6565b60ff168a611e8d876001613962565b61ffff1681518110611eaf57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b6001600160f81b031916901c8460ff168b8761ffff1681518110611eee57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916901b1760f81c901c91507f020204060701010000000000000000000000000000000000000000000000000060ff831660088110611f4a57634e487b7160e01b600052603260045260246000fd5b1a9050867f4d4c51434148565a00000000000000000000000000000000000000000000000060ff841660088110611f9157634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001611fa6929190613499565b60408051601f198184030181529190529650611fc360038661399e565b9450611fd0600886613a01565b9350611fdd600886613bf0565b92508060ff1667ffffffffffffffff81111561200957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612033576020820181803683370190505b50955060005b8160ff168160ff1610156121ab578360ff168a8260ff168761205b9190613962565b61ffff168151811061207d57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b6001600160f81b031916901b878260ff16815181106120b757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535089516120dd60ff831687613962565b6120e8906001613962565b61ffff161015612199576120fd846008613ab6565b60ff168a8260ff16876121109190613962565b61211b906001613962565b61ffff168151811061213d57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b6001600160f81b031916901c878260ff168151811061217757634e487b7160e01b600052603260045260246000fd5b0160200180516001600160f81b031992831692169190911790600082901a9053505b806121a381613ba5565b915050612039565b5060005b8160ff168160ff1610156122c15787878260ff16815181106121e157634e487b7160e01b600052603260045260246000fd5b01602001516040517f6900a3ae00000000000000000000000000000000000000000000000000000000815273F00A0FEaaDfD42224a700f15E1Af2E2a71aa9D8b91636900a3ae916122389160f81c906004016137e6565b60006040518083038186803b15801561225057600080fd5b505af4158015612264573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261228c9190810190613042565b60405160200161229d929190613540565b604051602081830303815290604052975080806122b990613ba5565b9150506121af565b506122cd816008613a58565b6122da9060ff168661399e565b9450611e17565b5094979650505050505050565b6000546001600160a01b031633146123185760405162461bcd60e51b8152600401610d0690613790565b60005b60ff81168211156123eb57602b61239a84848460ff1681811061234e57634e487b7160e01b600052603260045260246000fd5b9050602002810190612360919061386d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061277b92505050565b815460018101835560009283526020909220909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055806123e381613ba5565b91505061231b565b505050565b6123f8612b7f565b600061240384610728565b949350505050565b6000546001600160a01b031633146124355760405162461bcd60e51b8152600401610d0690613790565b61247482828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061277b92505050565b602a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b6000546001600160a01b031633146124cf5760405162461bcd60e51b8152600401610d0690613790565b6001600160a01b0381166124f55760405162461bcd60e51b8152600401610d069061370f565b6124fe81612a37565b50565b6000546001600160a01b0316331461252b5760405162461bcd60e51b8152600401610d0690613790565b61256a82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061277b92505050565b602c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b600283600381106125ab57600080fd5b600d020182600d81106125bd57600080fd5b0181815481106125cc57600080fd5b906000526020600020906010918282040191900660020292509250509054906101000a900461ffff1681565b602c5460009081908190612614906001600160a01b03166127f3565b9050600061262782610ed7876002613a11565b61ffff169050600061263e83610f1a886002613a11565b61ffff1690506103e88661ffff1663ffffffff161180156126665750614e208263ffffffff16105b15612686578161267961ffff600161399e565b612683919061399e565b91505b6107d061ffff87161180156126a25750619c408263ffffffff16105b156126c257816126b561ffff600161399e565b6126bf919061399e565b91505b6103e861ffff87161180156126de5750614e208163ffffffff16105b156126fe57806126f161ffff600161399e565b6126fb919061399e565b90505b6107d061ffff871611801561271a5750619c408163ffffffff16105b1561273a578061272d61ffff600161399e565b612737919061399e565b90505b909590945092505050565b6000546001600160a01b0316331461276f5760405162461bcd60e51b8152600401610d0690613790565b6123eb602f8383612b9e565b6000806127a6836040516020016127929190613677565b604051602081830303815290604052612a94565b90508051602082016000f091506001600160a01b03821661078f576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060611746826001600019612ac0565b600061281082600261398b565b835110156128305760405162461bcd60e51b8152600401610d0690613770565b50016002015190565b60608161284781601f61398b565b10156128655760405162461bcd60e51b8152600401610d0690613780565b61286f828461398b565b8451101561288f5760405162461bcd60e51b8152600401610d06906137a0565b6060821580156128ae57604051915060008252602082016040526128f8565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156128e75780518352602092830192016128cf565b5050858452601f01601f1916604052505b50949350505050565b60608161294157505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561296b578061295581613b91565b91506129649050600a836139e9565b9150612945565b60008167ffffffffffffffff81111561299457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156129be576020820181803683370190505b5090505b8415612403576129d3600183613aa0565b91506129e0600a86613bea565b6129eb90603061398b565b60f81b818381518110612a0e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612a30600a866139e9565b94506129c2565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060815182604051602001612aaa92919061357c565b6040516020818303038152906040529050919050565b6060833b80612adf575050604080516020810190915260008152611e03565b80841115612afd575050604080516020810190915260008152611e03565b83831015612b3d578084846040517f2c4a89fa000000000000000000000000000000000000000000000000000000008152600401610d069392919061381c565b8383038482036000828210612b525782612b54565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b604051806101a00160405280600d906020820280368337509192915050565b828054612baa90613b1b565b90600052602060002090601f016020900481019282612bcc5760008555612c30565b82601f10612c03578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612c30565b82800160010185558215612c30579182015b82811115612c30578235825591602001919060010190612c15565b50612c3c929150612c40565b5090565b5b80821115612c3c5760008155600101612c41565b6000612c68612c63846138f2565b6138d6565b83815290506020810182606085028101861015612c8457600080fd5b60005b85811015612cb057612c998783612e8c565b835260209092019160609190910190600101612c87565b5050509392505050565b6000612cc8612c6384613916565b90508082856020860285011115612cde57600080fd5b60005b85811015612cb057612cf38783612ee3565b83526020928301929190910190600101612ce1565b6000612d16612c6384613937565b905082815260208101848484011115612d2e57600080fd5b612d39848285613adf565b509392505050565b6000612d4f612c6384613937565b905082815260208101848484011115612d6757600080fd5b612d39848285613aeb565b803561174681613c58565b60008083601f840112612d8e578182fd5b50813567ffffffffffffffff811115612da5578182fd5b602083019150836020820283011115612dbd57600080fd5b9250929050565b600082601f830112612dd4578081fd5b8135612403848260208601612c55565b600082601f830112612df4578081fd5b600d612403848285612cba565b803561174681613c6c565b60008083601f840112612e1d578182fd5b50813567ffffffffffffffff811115612e34578182fd5b602083019150836001820283011115612dbd57600080fd5b600082601f830112612e5c578081fd5b8135612403848260208601612d08565b600082601f830112612e7c578081fd5b8151612403848260208601612d41565b600060608284031215612e9d578081fd5b612ea760606138d6565b90506000612eb58484612ee3565b908201526020612ec784848301612ee3565b908201526040612ed984848301612e01565b9082015292915050565b803561174681613c74565b805161174681613c74565b803561174681613c7e565b805161174681613c7e565b803561174681613c84565b805161174681613c84565b600060208284031215612f36578081fd5b611e0383828401612d72565b60008060208385031215612f54578081fd5b8083013567ffffffffffffffff811115612f6c578182fd5b612f7885828601612d7d565b92509250509250929050565b600060208284031215612f95578081fd5b8082013567ffffffffffffffff811115612fad578182fd5b61240384828501612dc4565b60006101a08284031215612fcb578081fd5b611e0383828401612de4565b60008060208385031215612fe9578182fd5b8183013567ffffffffffffffff811115613001578283fd5b612f7885828601612e0c565b60006020828403121561301e578081fd5b8082013567ffffffffffffffff811115613036578182fd5b61240384828501612e4c565b600060208284031215613053578081fd5b8082015167ffffffffffffffff81111561306b578182fd5b61240384828501612e6c565b600060208284031215613088578081fd5b611e0383828401612ee3565b600080604083850312156130a6578182fd5b6130b284838501612ee3565b915060206130c285828601612ee3565b9150509250929050565b600080604083850312156130de578182fd5b6130ea84838501612eee565b915060206130c285828601612eee565b60006020828403121561310b578081fd5b611e0383828401612ef9565b600060208284031215613128578081fd5b611e0383828401612f04565b600080600060608486031215613148578081fd5b61315485828601612ef9565b9250602061316486828701612ef9565b925050604061317586828701612ef9565b9150509250925092565b60008060408385031215613191578182fd5b61319d84838501612ef9565b915060206130c285828601612f0f565b6000602082840312156131be578081fd5b611e0383828401612f1a565b6131d48282613433565b5060600190565b6131e58282613465565b5060200190565b6131f581613ac3565b82525050565b6000613205825190565b8084526020938401938301825b8281101561323757815161322687826131ca565b965050602082019150600101613212565b5093949350505050565b600d8160005b8281101561326c57815161325b86826131db565b955050602082019150600101613247565b5050505050565b8015156131f5565b6001600160f81b031981166131f5565b7fffffff000000000000000000000000000000000000000000000000000000000081166131f5565b7fffffffffffffffff00000000000000000000000000000000000000000000000081166131f5565b60006132e5825190565b8084526020840193506132fc818560208601613aeb565b601f01601f19169290920192915050565b6000613317825190565b613325818560208601613aeb565b9290920192915050565b6131f581613ad4565b7f630000000000000000000000000000000000000000000000000000000000000081525b60010190565b60148152602081017f746f55696e7431365f6f75744f66426f756e6473000000000000000000000000815290505b60200190565b600e8152602081017f736c6963655f6f766572666c6f7700000000000000000000000000000000000081529050613390565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152613390565b6000815261335c565b60118152602081017f736c6963655f6f75744f66426f756e647300000000000000000000000000000081529050613390565b805161343f8382613465565b5060208101516134526020840182613465565b5060408101516123eb6040840182613273565b61ffff81166131f5565b806131f5565b63ffffffff81166131f5565b6131f563ffffffff8216613bbe565b60ff81166131f5565b6134a3818461330d565b90506134af818361327b565b60010192915050565b6134c2818461330d565b9050611e03818361330d565b6134d8818661330d565b90506134e4818561330d565b90506134f0818461330d565b9050611b35818361330d565b613506818761330d565b9050613512818661330d565b905061351e818561330d565b905061352a818461330d565b9050613536818361330d565b9695505050505050565b61354a818461330d565b7f2c0000000000000000000000000000000000000000000000000000000000000081529050600101611e03818361330d565b61358581613338565b90506135918184613481565b6004016134c2817f80600e6000396000f30000000000000000000000000000000000000000000000815260090190565b7f646174613a6170706c69636174696f6e2f6a736f6e2c7b22696d6167655f646181527f7461223a000000000000000000000000000000000000000000000000000000006020820152602401613617818461330d565b7f222c20226e616d65222c2022447265616d65722023000000000000000000000081526015019050613649818361330d565b7f227d0000000000000000000000000000000000000000000000000000000000008152905060028101611e03565b613680816133f8565b9050611746818361330d565b6020810161174682846131ec565b60208082528101611e0381846131fb565b6101a081016117468284613241565b606081016136c8828661327b565b6136d5602083018561327b565b612403604083018461327b565b60208101611746828461328b565b6020810161174682846132b3565b60208082528101611e0381846132db565b6020808252810161174681602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b6020808252810161174681613362565b6020808252810161174681613396565b60208082528101611746816133c8565b6020808252810161174681613401565b602081016117468284613465565b606081016137cc8286613465565b6137d96020830185613490565b6124036040830184613465565b60208101611746828461346f565b60608101613802828661346f565b61380f602083018561332f565b612403604083018461332f565b6060810161382a828661346f565b613837602083018561346f565b612403604083018461346f565b604081016138528285613475565b611e036020830184613475565b602081016117468284613490565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1368590030181126138a2578283fd5b8301915050803567ffffffffffffffff8111156138be57600080fd5b602082019150600181023603821315612dbd57600080fd5b60006138e160405190565b90506138ed8282613b42565b919050565b600067ffffffffffffffff82111561390c5761390c613c42565b5060209081020190565b600067ffffffffffffffff82111561393057613930613c42565b5060200290565b600067ffffffffffffffff82111561395157613951613c42565b601f19601f83011660200192915050565b61ffff8116905061ffff8216915060008261ffff0382111561398657613986613c00565b500190565b6000821982111561398657613986613c00565b63ffffffff8116905063ffffffff8216915060008263ffffffff0382111561398657613986613c00565b60ff8116905060ff8216915060008260ff0382111561398657613986613c00565b815b91506000826139fc576139fc613c16565b500490565b63ffffffff9081169082166139eb565b61ffff8116905061ffff8216915060008161ffff0483118215151615613a3957613a39613c00565b500290565b6000816000190483118215151615613a3957613a39613c00565b60ff8116905060ff8216915060008160ff0483118215151615613a3957613a39613c00565b61ffff9081169082165b9150600082821015613a9b57613a9b613c00565b500390565b81613a87565b63ffffffff908116908216613a87565b60ff908116908216613a87565b60006001600160a01b038216611746565b600060ff8216611746565b82818337506000910152565b60005b83811015613b06578181015183820152602001613aee565b83811115613b15576000848401525b50505050565b600281046001821680613b2f57607f821691505b6020821081141561078f5761078f613c2c565b601f19601f830116810181811067ffffffffffffffff82111715613b6857613b68613c42565b6040525050565b61ffff81169050600061ffff821415613b8a57613b8a613c00565b5060010190565b6000600019821415613b8a57613b8a613c00565b60ff81169050600060ff821415613b8a57613b8a613c00565b60006117468260e01b90565b61ffff9081169082165b9150600082613be557613be5613c16565b500690565b81613bd4565b63ffffffff908116908216613bd4565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b613c6181613ac3565b81146124fe57600080fd5b801515613c61565b61ffff8116613c61565b80613c61565b60ff8116613c6156fe2533637374796c65253365706174687b7374726f6b652d77696474683a302e37317d2533632f7374796c652533652533632f737667253365253363737667253230786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f7376672725323076696577426f783d2730253230302532303235352532303235352725323077696474683d273530307078272532306865696768743d27353030707827253365a264697066735822122072bb2277f2c421e34519d7a92a8e6f941c034acd89537fc92c08dee7f8d1058864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102de5760003560e01c80638da5cb5b11610186578063c1dfb567116100e3578063f2a90a7611610097578063fd88767711610071578063fd887677146106e1578063fdd5e4e8146106f4578063fe31cecf1461071557600080fd5b8063f2a90a76146106a8578063f2fde38b146106bb578063f6a5d702146106ce57600080fd5b8063d337c2c3116100c8578063d337c2c3146105f4578063d6bf650114610630578063e8f255f01461066c57600080fd5b8063c1dfb56714610599578063cd369849146105cd57600080fd5b8063b674b7611161013a578063bc4617fb1161011f578063bc4617fb14610560578063bc7208c514610573578063bfa933261461058657600080fd5b8063b674b76114610511578063b9f8e72a1461054d57600080fd5b8063aacb2fa61161016b578063aacb2fa6146104f6578063b3215d49146104f6578063b4de6216146104fe57600080fd5b80638da5cb5b146104a9578063a4cd9a11146104ba57600080fd5b80634b65e32f1161023f5780636f5c723b116101f35780637c213e7b116101cd5780637c213e7b1461047b5780637e8e06571461048e5780638aaad5461461049657600080fd5b80636f5c723b14610458578063715018a614610460578063761d9db81461046857600080fd5b80635cc518ba116102245780635cc518ba1461041f5780636432609f14610432578063677bfad31461044557600080fd5b80634b65e32f146103da5780634c63ba13146103ed57600080fd5b80633259ca05116102965780633e1ed1321161027b5780633e1ed1321461039257806340eb8e22146103a5578063480bc3c8146103c557600080fd5b80633259ca051461036a578063397bcf611461037d57600080fd5b80631a5d193d116102c75780631a5d193d1461031f578063220b028d1461033f5780632c3e0c5c1461035457600080fd5b80630e275391146102e35780631866112c1461030c575b600080fd5b602c546102f6906001600160a01b031681565b604051610303919061368c565b60405180910390f35b602d546102f6906001600160a01b031681565b61033261032d3660046130fa565b610728565b60405161030391906136ab565b610347600381565b604051610303919061385f565b61035d61271081565b60405161030391906137b0565b610332610378366004612fb9565b610795565b61039061038b366004612fd7565b610cdc565b005b6103906103a0366004612fd7565b610d7f565b6103b86103b3366004612fb9565b610e19565b604051610303919061369a565b6103cd6111f6565b60405161030391906136fe565b6103cd6103e8366004613077565b611212565b6104127d01000000000000000000000000000000000000000000000000000000000081565b60405161030391906136e2565b6103cd61042d36600461317f565b61163e565b602e546102f6906001600160a01b031681565b6102f66104533660046130fa565b61174c565b6103cd611776565b610390611792565b6103cd610476366004613077565b6117c8565b61035d610489366004613094565b6119bd565b610347600d81565b6103cd6104a4366004612f84565b611b3e565b6000546001600160a01b03166102f6565b6103cd6040518060400160405280600581526020017f272f25336500000000000000000000000000000000000000000000000000000081525081565b610347600c81565b6103b861050c366004613077565b611d99565b6103cd6040518060400160405280600a81526020017f2725323066696c6c3d270000000000000000000000000000000000000000000081525081565b6103cd61055b36600461300d565b611e0a565b61039061056e366004612f42565b6122ee565b61033261058136600461317f565b6123f0565b610390610594366004612fd7565b61240b565b6105c07f4d4c51434148565a00000000000000000000000000000000000000000000000081565b60405161030391906136f0565b6105c07f020204060701010000000000000000000000000000000000000000000000000081565b6103cd6040518060400160405280600381526020017f253233000000000000000000000000000000000000000000000000000000000081525081565b6103cd6040518060400160405280600d81526020017f25336370617468253230643d270000000000000000000000000000000000000081525081565b6103cd6040518060400160405280601281526020017f272532307374726f6b653d27253233303030000000000000000000000000000081525081565b602a546102f6906001600160a01b031681565b6103906106c9366004612f25565b6124a5565b6103906106dc366004612fd7565b612501565b61035d6106ef366004613134565b61259b565b610707610702366004613077565b6125f8565b604051610303929190613844565b610390610723366004612fd7565b612745565b610730612b7f565b60005b600d81101561078f5761074861271084613bea565b8282600d811061076857634e487b7160e01b600052603260045260246000fd5b61ffff9092166020929092020152600e9290921c918061078781613b91565b915050610733565b50919050565b61079d612b7f565b60295460208301516040517f7f436b5c0000000000000000000000000000000000000000000000000000000081526000926001600160a01b031691637f436b5c916107eb91906004016137b0565b60206040518083038186803b15801561080357600080fd5b505afa158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b91906131ad565b60ff16905060006002826003811061086357634e487b7160e01b600052603260045260246000fd5b600d020160070160078154811061088a57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff166127106108bb9190613a7d565b61ffff16846007602002015161ffff16109050600060028361ffff16600381106108f557634e487b7160e01b600052603260045260246000fd5b600d020160080160078154811061091c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661271061094d9190613a7d565b61ffff16856008602002015161ffff16109050600060028461ffff166003811061098757634e487b7160e01b600052603260045260246000fd5b600d02016009016024815481106109ae57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff166127106109df9190613a7d565b61ffff16866009602002015161ffff16109050600060028561ffff1660038110610a1957634e487b7160e01b600052603260045260246000fd5b600d0201600b01603081548110610a4057634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff16612710610a719190613a7d565b61ffff1687600b602002015161ffff16109050600080600289826020020151610a9a9190613bca565b61ffff1611905060005b600d60ff82161015610cd0576029546000906001600160a01b031663fca228ce8b60ff8516600d8110610ae757634e487b7160e01b600052603260045260246000fd5b6020020151848b6040518463ffffffff1660e01b8152600401610b0c939291906137be565b60206040518083038186803b158015610b2457600080fd5b505afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c91906131ad565b90506000610b708360ff168360ff166119bd565b905060008360ff1660021480610b8957508360ff16600c145b8015610b93575087155b8015610b9d575088155b80610bb457508360ff166007148015610bb4575087155b80610bcb57508360ff16600a148015610bcb575087155b80610c1e575060028460ff161080610bf4575060028460ff16118015610bf4575060078460ff16105b80610c0257508360ff166008145b80610c1057508360ff166009145b80610c1e57508360ff16600b145b90506000878015610c2c5750865b8015610c4357508460ff166009148015610c435750855b80610c5a57508460ff16600b148015610c5a575085155b905061ffff83811610801580610c6e575082155b80610c765750815b15610c815761ffff93505b838d8760ff16600d8110610ca557634e487b7160e01b600052603260045260246000fd5b602002019061ffff16908161ffff168152505050505050508080610cc890613ba5565b915050610aa4565b50505050505050919050565b6000546001600160a01b03163314610d0f5760405162461bcd60e51b8152600401610d0690613790565b60405180910390fd5b610d4e82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061277b92505050565b602d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b6000546001600160a01b03163314610da95760405162461bcd60e51b8152600401610d0690613790565b610de882828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061277b92505050565b602e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b602e54606090600090610e34906001600160a01b03166127f3565b602d54909150600090610e4f906001600160a01b03166127f3565b9050606060008060005b600d61ffff82161015610f795761ffff88828216600d8110610e8b57634e487b7160e01b600052603260045260246000fd5b602002015161ffff161415610e9f57610f67565b610ee086898361ffff16600d8110610ec757634e487b7160e01b600052603260045260246000fd5b6020020151610ed7906002613a11565b61ffff16612803565b9250610f2586898361ffff16600d8110610f0a57634e487b7160e01b600052603260045260246000fd5b6020020151610f1a906002613a11565b610ed7906002613962565b915083610f448661ffff8616610f3b8787613a7d565b61ffff16612839565b604051602001610f559291906134b8565b60405160208183030381529060405293505b80610f7181613b6f565b915050610e59565b5060008060038551610f8b91906139e9565b67ffffffffffffffff811115610fb157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ffc57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610fcf5790505b50905060005b85518110156111e95760008073__$6cc8f8b41053aebd660af83ec8df928129$__635dfb512c89858151811061104857634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319168a61106387600161398b565b8151811061108157634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319168b61109c88600261398b565b815181106110ba57634e487b7160e01b600052603260045260246000fd5b01602001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526111049392916001600160f81b031916906004016136ba565b604080518083038186803b15801561111b57600080fd5b505af415801561112f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115391906130cc565b90925090506000611165600283613bca565b61ffff1611945060018161ffff16901c905060405180606001604052808361ffff1681526020018261ffff168152602001861515815250846003856111aa91906139e9565b815181106111c857634e487b7160e01b600052603260045260246000fd5b602002602001018190525050506003816111e2919061398b565b9050611002565b5098975050505050505050565b6040518060a00160405280606d8152602001613cc6606d913981565b602a5460609060009061122d906001600160a01b03166127f3565b905060008161123d856003613a11565b61ffff168151811061125f57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319161480156112c25750600081611284856003613a11565b61128f906001613962565b61ffff16815181106112b157634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916145b801561133457507f0100000000000000000000000000000000000000000000000000000000000000816112f6856003613a11565b611301906002613962565b61ffff168151811061132357634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916145b1561137457505060408051808201909152600481527f6e6f6e65000000000000000000000000000000000000000000000000000000006020820152919050565b6040518060400160405280600381526020017f2532330000000000000000000000000000000000000000000000000000000000815250818460036113b89190613a11565b61ffff16815181106113da57634e487b7160e01b600052603260045260246000fd5b016020015160405163c1338a6960e01b815273__$6cc8f8b41053aebd660af83ec8df928129$__9163c1338a699161141e9160f81c906010906002906004016137f4565b60006040518083038186803b15801561143657600080fd5b505af415801561144a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114729190810190613042565b8261147e866003613a11565b611489906001613962565b61ffff16815181106114ab57634e487b7160e01b600052603260045260246000fd5b016020015160405163c1338a6960e01b815273__$6cc8f8b41053aebd660af83ec8df928129$__9163c1338a69916114ef9160f81c906010906002906004016137f4565b60006040518083038186803b15801561150757600080fd5b505af415801561151b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115439190810190613042565b8361154f876003613a11565b61155a906002613962565b61ffff168151811061157c57634e487b7160e01b600052603260045260246000fd5b016020015160405163c1338a6960e01b815273__$6cc8f8b41053aebd660af83ec8df928129$__9163c1338a69916115c09160f81c906010906002906004016137f4565b60006040518083038186803b1580156115d857600080fd5b505af41580156115ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116149190810190613042565b60405160200161162794939291906134ce565b604051602081830303815290604052915050919050565b6030546040517f422627c30000000000000000000000000000000000000000000000000000000081526060916000916001600160a01b039091169063422627c39061168d9087906004016137e6565b60206040518083038186803b1580156116a557600080fd5b505afa1580156116b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dd9190613117565b905060006116eb82856123f0565b905060006116f882610795565b9050600061170582610e19565b9050600061171282611b3e565b90508061171e89612901565b60405160200161172f9291906135c1565b604051602081830303815290604052955050505050505b92915050565b602b818154811061175c57600080fd5b6000918252602090912001546001600160a01b0316905081565b604051806060016040528060388152602001613c8e6038913981565b6000546001600160a01b031633146117bc5760405162461bcd60e51b8152600401610d0690613790565b6117c66000612a37565b565b60606000806117d6846125f8565b9150915060008061181b602b838154811061180157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03166127f3565b805190915063ffffffff85165b818663ffffffff161061188a5782516118419082613aa0565b90508361184d81613b91565b945050611874602b858154811061180157634e487b7160e01b600052603260045260246000fd5b9250825182611883919061398b565b9150611828565b60006118968787613aa6565b63ffffffff1667ffffffffffffffff8111156118c257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156118ec576020820181803683370190505b50905060005b81518110156111e9578451831061193b578561190d81613b91565b965050611934602b878154811061180157634e487b7160e01b600052603260045260246000fd5b9450600092505b84838151811061195b57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b82828151811061198657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350826119a781613b91565b93505080806119b590613b91565b9150506118f2565b600080611a5b602f80546119d090613b1b565b80601f01602080910402602001604051908101604052809291908181526020018280546119fc90613b1b565b8015611a495780601f10611a1e57610100808354040283529160200191611a49565b820191906000526020600020905b815481529060010190602001808311611a2c57829003601f168201915b5050505050856002610ed79190613a11565b90506000611b05602f8054611a6f90613b1b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9b90613b1b565b8015611ae85780601f10611abd57610100808354040283529160200191611ae8565b820191906000526020600020905b815481529060010190602001808311611acb57829003601f168201915b5050505050866001611afa9190613962565b610ed7906002613a11565b905061ffff8116611b168584613962565b61ffff1610611b2b5761ffff92505050611746565b611b358483613962565b95945050505050565b606060006040518060a00160405280606d8152602001613cc6606d9139905060005b83518161ffff161015611d6d57816040518060400160405280600d81526020017f25336370617468253230643d2700000000000000000000000000000000000000815250611bdf61055b878561ffff1681518110611bce57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516117c8565b6040518060400160405280600a81526020017f2725323066696c6c3d2700000000000000000000000000000000000000000000815250611c4d888661ffff1681518110611c3c57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151611212565b604051602001611c619594939291906134fc565b6040516020818303038152906040529150838161ffff1681518110611c9657634e487b7160e01b600052603260045260246000fd5b60200260200101516040015115611d0157816040518060400160405280601281526020017f272532307374726f6b653d272532333030300000000000000000000000000000815250604051602001611cef9291906134b8565b60405160208183030381529060405291505b816040518060400160405280600581526020017f272f253365000000000000000000000000000000000000000000000000000000815250604051602001611d499291906134b8565b60405160208183030381529060405291508080611d6590613b6f565b915050611b60565b5080604051806060016040528060388152602001613c8e603891396040516020016116279291906134b8565b6060611da3612b7f565b61ffff8316815260015b600d811015611df95761ffff8282600d8110611dd957634e487b7160e01b600052603260045260246000fd5b61ffff909216602092909202015280611df181613b91565b915050611dad565b50611e0381610e19565b9392505050565b6060806060600080600080805b611e23600360086139c8565b60ff1689516008611e349190613a3e565b611e3e9190613aa0565b8563ffffffff16116122e157611e55600886613a01565b9350611e62600886613bf0565b9250611e7060036008613ab6565b60ff16611e7e846008613ab6565b60ff168a611e8d876001613962565b61ffff1681518110611eaf57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b6001600160f81b031916901c8460ff168b8761ffff1681518110611eee57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916901b1760f81c901c91507f020204060701010000000000000000000000000000000000000000000000000060ff831660088110611f4a57634e487b7160e01b600052603260045260246000fd5b1a9050867f4d4c51434148565a00000000000000000000000000000000000000000000000060ff841660088110611f9157634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001611fa6929190613499565b60408051601f198184030181529190529650611fc360038661399e565b9450611fd0600886613a01565b9350611fdd600886613bf0565b92508060ff1667ffffffffffffffff81111561200957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612033576020820181803683370190505b50955060005b8160ff168160ff1610156121ab578360ff168a8260ff168761205b9190613962565b61ffff168151811061207d57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b6001600160f81b031916901b878260ff16815181106120b757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535089516120dd60ff831687613962565b6120e8906001613962565b61ffff161015612199576120fd846008613ab6565b60ff168a8260ff16876121109190613962565b61211b906001613962565b61ffff168151811061213d57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b6001600160f81b031916901c878260ff168151811061217757634e487b7160e01b600052603260045260246000fd5b0160200180516001600160f81b031992831692169190911790600082901a9053505b806121a381613ba5565b915050612039565b5060005b8160ff168160ff1610156122c15787878260ff16815181106121e157634e487b7160e01b600052603260045260246000fd5b01602001516040517f6900a3ae00000000000000000000000000000000000000000000000000000000815273__$6cc8f8b41053aebd660af83ec8df928129$",
  "libraries": {
    "Integers": "0xF00A0FEaaDfD42224a700f15E1Af2E2a71aa9D8b"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getD(bytes)": {
        "details": "Decodes the path and returns it as a plain string to be used in the svg path attribute."
      },
      "getDBytes(uint16)": {
        "details": "Retrieve the bytes for the given d from the dPalette storage. The bytes may be split into several SSTORE2      slots."
      },
      "getDIndex(uint16)": {
        "details": "Get the start and end indexes of the bytes concerning the given d in the dPalette storage."
      },
      "getDreamerFullDna(uint256,uint8)": {
        "details": "The Dreamer's full DNA is an alteration of its corresponding Runner's DNA with it's consumed candy.      The candy ids are hardcoded while it should be better to retrieve their effects from the CandyShop      contract."
      },
      "getFill(uint16)": {
        "details": "3 bytes per color because svg does not handle alpha."
      },
      "getSvg((uint16,uint16,bool)[])": {
        "details": "Each trait is the bytes representation of the final svg string concatenating several <path> elements."
      },
      "getTokenData(uint16[13])": {
        "details": "Somehow copied from the original code but returns an array of trait indexes instead of Layer structs.      Flags for no layer is also updated from empty `Layer` to index = type(uint16).max."
      },
      "getTraitIndex(uint16,uint16)": {
        "details": "This function will be the pendant of the ChainRunnersBaseRenderer.getLayer ones."
      },
      "getTraits(uint16[13])": {
        "details": "Used to concat all the traits of a given dreamers given the array of trait indexes."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDPalette(bytes[])": {
        "details": "Only the d parameter is encoded for each path. All the paths are concatenated together to save gas.      The dPaletteIndexes is used to retrieve the path from the dPalette."
      },
      "setDPaletteIndex(bytes)": {
        "details": "Since each SSTORE2 slots can contain up to 24kb, indexes need to be uint16, ie. two bytes per index."
      },
      "setFillPalette(bytes)": {
        "details": "Colors are concatenated and stored in a single 'bytes' with SSTORE2 to save gas."
      },
      "setLayerIndexes(bytes)": {
        "details": "The trait indexes allow to map from the Chain Runners 2D indexation (trait index, layer index) to the      current 1D indexation (trait index)."
      },
      "setTraitPalette(bytes)": {
        "details": "The traits are stored as a list of tuples (d index, fill index). For our case, 12 bits per index is      enough as 2^12 = 4096 is greater than total number of d and total number of fill to date.      This could be changed if needed.      Hence a trait is a sequence of several 3 bytes long (d index, fill index)."
      },
      "setTraitPaletteIndex(bytes)": {
        "details": "Since each SSTORE2 slots can contain up to 24kb, indexes need to be uint16, ie. two bytes per index.      A trait can then be retrieved with traitPalette[traitPaletteIndexes[i]: traitPaletteIndexes[i+1]]"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTrait(uint16)": {
        "notice": "Useful for returning a single Traits in the Runner's meaning"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 225,
        "contract": "contracts/dreamers/DreamersRenderer.sol:DreamersRenderer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 425,
        "contract": "contracts/dreamers/DreamersRenderer.sol:DreamersRenderer",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4571,
        "contract": "contracts/dreamers/DreamersRenderer.sol:DreamersRenderer",
        "label": "WEIGHTS",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_array(t_array(t_uint16)dyn_storage)13_storage)3_storage"
      },
      {
        "astId": 4580,
        "contract": "contracts/dreamers/DreamersRenderer.sol:DreamersRenderer",
        "label": "chainRunnersBaseRenderer",
        "offset": 0,
        "slot": "41",
        "type": "t_contract(IChainRunnersBaseRenderer)7632"
      },
      {
        "astId": 6078,
        "contract": "contracts/dreamers/DreamersRenderer.sol:DreamersRenderer",
        "label": "fillPalette",
        "offset": 0,
        "slot": "42",
        "type": "t_address"
      },
      {
        "astId": 6081,
        "contract": "contracts/dreamers/DreamersRenderer.sol:DreamersRenderer",
        "label": "dPalette",
        "offset": 0,
        "slot": "43",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6083,
        "contract": "contracts/dreamers/DreamersRenderer.sol:DreamersRenderer",
        "label": "dPaletteIndexes",
        "offset": 0,
        "slot": "44",
        "type": "t_address"
      },
      {
        "astId": 6085,
        "contract": "contracts/dreamers/DreamersRenderer.sol:DreamersRenderer",
        "label": "traitPalette",
        "offset": 0,
        "slot": "45",
        "type": "t_address"
      },
      {
        "astId": 6087,
        "contract": "contracts/dreamers/DreamersRenderer.sol:DreamersRenderer",
        "label": "traitPaletteIndexes",
        "offset": 0,
        "slot": "46",
        "type": "t_address"
      },
      {
        "astId": 6089,
        "contract": "contracts/dreamers/DreamersRenderer.sol:DreamersRenderer",
        "label": "layerIndexes",
        "offset": 0,
        "slot": "47",
        "type": "t_bytes_storage"
      },
      {
        "astId": 6092,
        "contract": "contracts/dreamers/DreamersRenderer.sol:DreamersRenderer",
        "label": "runnersToken",
        "offset": 0,
        "slot": "48",
        "type": "t_contract(IChainRunners)7611"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_array(t_uint16)dyn_storage)13_storage)3_storage": {
        "base": "t_array(t_array(t_uint16)dyn_storage)13_storage",
        "encoding": "inplace",
        "label": "uint16[][13][3]",
        "numberOfBytes": "1248"
      },
      "t_array(t_array(t_uint16)dyn_storage)13_storage": {
        "base": "t_array(t_uint16)dyn_storage",
        "encoding": "inplace",
        "label": "uint16[][13]",
        "numberOfBytes": "416"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IChainRunners)7611": {
        "encoding": "inplace",
        "label": "contract IChainRunners",
        "numberOfBytes": "20"
      },
      "t_contract(IChainRunnersBaseRenderer)7632": {
        "encoding": "inplace",
        "label": "contract IChainRunnersBaseRenderer",
        "numberOfBytes": "20"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}